
THARSIS_C_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  08016c30  08016c30  00026c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017838  08017838  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08017838  08017838  00027838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017840  08017840  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017840  08017840  00027840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017844  08017844  00027844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08017848  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005028  20000228  08017a70  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005250  08017a70  00035250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029014  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000599a  00000000  00000000  0005926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0005ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  000606d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e12c  00000000  00000000  00061f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000297a3  00000000  00000000  00080054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d677  00000000  00000000  000a97f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a50  00000000  00000000  00146ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016c14 	.word	0x08016c14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	08016c14 	.word	0x08016c14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <BMP388_writeByte>:

#include "BMP388.h"


void BMP388_writeByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * wdata,uint8_t size)
{
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b590      	push	{r4, r7, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	af04      	add	r7, sp, #16
 8001004:	f107 0410 	add.w	r4, r7, #16
 8001008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&hi2cX,device_address << 1,register_address,1,wdata,size,10*size);
 800100c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001010:	b29b      	uxth	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b298      	uxth	r0, r3
 8001016:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800101a:	b29c      	uxth	r4, r3
 800101c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001020:	b299      	uxth	r1, r3
 8001022:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	9101      	str	r1, [sp, #4]
 8001032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	4622      	mov	r2, r4
 800103a:	4601      	mov	r1, r0
 800103c:	f107 0010 	add.w	r0, r7, #16
 8001040:	f008 f8b0 	bl	80091a4 <HAL_I2C_Mem_Write>
}
 8001044:	bf00      	nop
 8001046:	3704      	adds	r7, #4
 8001048:	46bd      	mov	sp, r7
 800104a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800104e:	b004      	add	sp, #16
 8001050:	4770      	bx	lr

08001052 <BMP388_readByte>:
void BMP388_readByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * rdata,uint8_t size)
{
 8001052:	b084      	sub	sp, #16
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af04      	add	r7, sp, #16
 800105a:	f107 0410 	add.w	r4, r7, #16
 800105e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_I2C_Mem_Read(&hi2cX,device_address << 1,register_address,1,rdata,size,size*10);
 8001062:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001066:	b29b      	uxth	r3, r3
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b298      	uxth	r0, r3
 800106c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001070:	b29c      	uxth	r4, r3
 8001072:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001076:	b299      	uxth	r1, r3
 8001078:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	9101      	str	r1, [sp, #4]
 8001088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4622      	mov	r2, r4
 8001090:	4601      	mov	r1, r0
 8001092:	f107 0010 	add.w	r0, r7, #16
 8001096:	f008 f97f 	bl	8009398 <HAL_I2C_Mem_Read>
}
 800109a:	bf00      	nop
 800109c:	3704      	adds	r7, #4
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010a4:	b004      	add	sp, #16
 80010a6:	4770      	bx	lr

080010a8 <BMP388_Init>:

float par_t1, par_t2, par_t3;
float par_p1, par_p2, par_p3, par_p4, par_p5, par_p6, par_p7, par_p8, par_p9, par_p10, par_p11;

void BMP388_Init(void)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b09f      	sub	sp, #124	; 0x7c
 80010ac:	af16      	add	r7, sp, #88	; 0x58
	// Soft reset
	uint8_t data[2] = {0xB6,0};
 80010ae:	23b6      	movs	r3, #182	; 0xb6
 80010b0:	83bb      	strh	r3, [r7, #28]
	BMP388_writeByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_CMD_ADDR,&data[0],1);
 80010b2:	4cb7      	ldr	r4, [pc, #732]	; (8001390 <BMP388_Init+0x2e8>)
 80010b4:	2301      	movs	r3, #1
 80010b6:	9314      	str	r3, [sp, #80]	; 0x50
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80010be:	237e      	movs	r3, #126	; 0x7e
 80010c0:	9312      	str	r3, [sp, #72]	; 0x48
 80010c2:	2376      	movs	r3, #118	; 0x76
 80010c4:	9311      	str	r3, [sp, #68]	; 0x44
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0310 	add.w	r3, r4, #16
 80010cc:	2244      	movs	r2, #68	; 0x44
 80010ce:	4619      	mov	r1, r3
 80010d0:	f00f f926 	bl	8010320 <memcpy>
 80010d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d8:	f7ff ff90 	bl	8000ffc <BMP388_writeByte>

	// Enable sensors and set power mode to normal
	BMP388_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_PWR_CTRL_ADDR,&data[0],1);
 80010dc:	4cac      	ldr	r4, [pc, #688]	; (8001390 <BMP388_Init+0x2e8>)
 80010de:	2301      	movs	r3, #1
 80010e0:	9314      	str	r3, [sp, #80]	; 0x50
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e8:	231b      	movs	r3, #27
 80010ea:	9312      	str	r3, [sp, #72]	; 0x48
 80010ec:	2376      	movs	r3, #118	; 0x76
 80010ee:	9311      	str	r3, [sp, #68]	; 0x44
 80010f0:	4668      	mov	r0, sp
 80010f2:	f104 0310 	add.w	r3, r4, #16
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	4619      	mov	r1, r3
 80010fa:	f00f f911 	bl	8010320 <memcpy>
 80010fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001102:	f7ff ffa6 	bl	8001052 <BMP388_readByte>
	data[0] |= 0b00110011;
 8001106:	7f3b      	ldrb	r3, [r7, #28]
 8001108:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 800110c:	b2db      	uxtb	r3, r3
 800110e:	773b      	strb	r3, [r7, #28]
	BMP388_writeByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_PWR_CTRL_ADDR,&data[0],1);
 8001110:	4c9f      	ldr	r4, [pc, #636]	; (8001390 <BMP388_Init+0x2e8>)
 8001112:	2301      	movs	r3, #1
 8001114:	9314      	str	r3, [sp, #80]	; 0x50
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	9313      	str	r3, [sp, #76]	; 0x4c
 800111c:	231b      	movs	r3, #27
 800111e:	9312      	str	r3, [sp, #72]	; 0x48
 8001120:	2376      	movs	r3, #118	; 0x76
 8001122:	9311      	str	r3, [sp, #68]	; 0x44
 8001124:	4668      	mov	r0, sp
 8001126:	f104 0310 	add.w	r3, r4, #16
 800112a:	2244      	movs	r2, #68	; 0x44
 800112c:	4619      	mov	r1, r3
 800112e:	f00f f8f7 	bl	8010320 <memcpy>
 8001132:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001136:	f7ff ff61 	bl	8000ffc <BMP388_writeByte>



	uint8_t calib_data[BMP3_CALIB_DATA_LEN];
	BMP388_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_CALIB_DATA_ADDR,calib_data,BMP3_CALIB_DATA_LEN);
 800113a:	4c95      	ldr	r4, [pc, #596]	; (8001390 <BMP388_Init+0x2e8>)
 800113c:	2315      	movs	r3, #21
 800113e:	9314      	str	r3, [sp, #80]	; 0x50
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	9313      	str	r3, [sp, #76]	; 0x4c
 8001144:	2331      	movs	r3, #49	; 0x31
 8001146:	9312      	str	r3, [sp, #72]	; 0x48
 8001148:	2376      	movs	r3, #118	; 0x76
 800114a:	9311      	str	r3, [sp, #68]	; 0x44
 800114c:	4668      	mov	r0, sp
 800114e:	f104 0310 	add.w	r3, r4, #16
 8001152:	2244      	movs	r2, #68	; 0x44
 8001154:	4619      	mov	r1, r3
 8001156:	f00f f8e3 	bl	8010320 <memcpy>
 800115a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115e:	f7ff ff78 	bl	8001052 <BMP388_readByte>

	NVM_PAR_T1 = (calib_data[1] << 8) | (calib_data[0]);
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	793b      	ldrb	r3, [r7, #4]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b88      	ldr	r3, [pc, #544]	; (8001394 <BMP388_Init+0x2ec>)
 8001174:	801a      	strh	r2, [r3, #0]
	NVM_PAR_T2 = (calib_data[3] << 8) | (calib_data[2]);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b84      	ldr	r3, [pc, #528]	; (8001398 <BMP388_Init+0x2f0>)
 8001188:	801a      	strh	r2, [r3, #0]
	NVM_PAR_T3 = (calib_data[4]);
 800118a:	7a3b      	ldrb	r3, [r7, #8]
 800118c:	b25a      	sxtb	r2, r3
 800118e:	4b83      	ldr	r3, [pc, #524]	; (800139c <BMP388_Init+0x2f4>)
 8001190:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P1 = (calib_data[6] << 8) | (calib_data[5]);
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	7a7b      	ldrb	r3, [r7, #9]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <BMP388_Init+0x2f8>)
 80011a2:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P2 = (calib_data[8] << 8) | (calib_data[7]);
 80011a4:	7b3b      	ldrb	r3, [r7, #12]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <BMP388_Init+0x2fc>)
 80011b4:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P3 = (calib_data[9]);
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	4b7b      	ldr	r3, [pc, #492]	; (80013a8 <BMP388_Init+0x300>)
 80011bc:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P4 = (calib_data[10]);
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <BMP388_Init+0x304>)
 80011c4:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P5 = (calib_data[12] << 8) | (calib_data[11]);
 80011c6:	7c3b      	ldrb	r3, [r7, #16]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <BMP388_Init+0x308>)
 80011d8:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P6 = (calib_data[14] << 8) | (calib_data[13]);
 80011da:	7cbb      	ldrb	r3, [r7, #18]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <BMP388_Init+0x30c>)
 80011ec:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P7 = (calib_data[15]);
 80011ee:	7cfb      	ldrb	r3, [r7, #19]
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <BMP388_Init+0x310>)
 80011f4:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P8 = (calib_data[16]);
 80011f6:	7d3b      	ldrb	r3, [r7, #20]
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <BMP388_Init+0x314>)
 80011fc:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P9 = (calib_data[18] << 8) | (calib_data[17]);
 80011fe:	7dbb      	ldrb	r3, [r7, #22]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7d7b      	ldrb	r3, [r7, #21]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <BMP388_Init+0x318>)
 800120e:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P10 = (calib_data[19]);
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	b25a      	sxtb	r2, r3
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <BMP388_Init+0x31c>)
 8001216:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P11 = (calib_data[20]);
 8001218:	7e3b      	ldrb	r3, [r7, #24]
 800121a:	b25a      	sxtb	r2, r3
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <BMP388_Init+0x320>)
 800121e:	701a      	strb	r2, [r3, #0]

	//float temp_var =
	par_t1 = NVM_PAR_T1/pow(2,-8);
 8001220:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <BMP388_Init+0x2ec>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f985 	bl	8000534 <__aeabi_i2d>
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <BMP388_Init+0x324>)
 8001230:	f7ff fb14 	bl	800085c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fcdc 	bl	8000bf8 <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	4a63      	ldr	r2, [pc, #396]	; (80013d0 <BMP388_Init+0x328>)
 8001244:	6013      	str	r3, [r2, #0]
	par_t2 = NVM_PAR_T2/pow(2,30);
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <BMP388_Init+0x2f0>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f972 	bl	8000534 <__aeabi_i2d>
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <BMP388_Init+0x32c>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fcc9 	bl	8000bf8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <BMP388_Init+0x330>)
 800126a:	6013      	str	r3, [r2, #0]
	par_t3 = NVM_PAR_T3/pow(2,48);
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <BMP388_Init+0x2f4>)
 800126e:	f993 3000 	ldrsb.w	r3, [r3]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f95e 	bl	8000534 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b57      	ldr	r3, [pc, #348]	; (80013dc <BMP388_Init+0x334>)
 800127e:	f7ff faed 	bl	800085c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fcb5 	bl	8000bf8 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <BMP388_Init+0x338>)
 8001292:	6013      	str	r3, [r2, #0]
	par_p1 = (NVM_PAR_P1-pow(2,14))/pow(2,20);
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <BMP388_Init+0x2f8>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f94a 	bl	8000534 <__aeabi_i2d>
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <BMP388_Init+0x33c>)
 80012a6:	f7fe fff7 	bl	8000298 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <BMP388_Init+0x340>)
 80012b8:	f7ff fad0 	bl	800085c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fc98 	bl	8000bf8 <__aeabi_d2f>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <BMP388_Init+0x344>)
 80012cc:	6013      	str	r3, [r2, #0]
	par_p2 = (NVM_PAR_P2-pow(2,14))/pow(2,29);
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <BMP388_Init+0x2fc>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <BMP388_Init+0x33c>)
 80012e0:	f7fe ffda 	bl	8000298 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <BMP388_Init+0x348>)
 80012f2:	f7ff fab3 	bl	800085c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc7b 	bl	8000bf8 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <BMP388_Init+0x34c>)
 8001306:	6013      	str	r3, [r2, #0]
	par_p3 = NVM_PAR_P3/pow(2,32);
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <BMP388_Init+0x300>)
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <BMP388_Init+0x350>)
 800131a:	f7ff fa9f 	bl	800085c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc67 	bl	8000bf8 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <BMP388_Init+0x354>)
 800132e:	6013      	str	r3, [r2, #0]
	par_p4 = NVM_PAR_P4/pow(2,37);
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <BMP388_Init+0x304>)
 8001332:	f993 3000 	ldrsb.w	r3, [r3]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8fc 	bl	8000534 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <BMP388_Init+0x358>)
 8001342:	f7ff fa8b 	bl	800085c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc53 	bl	8000bf8 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <BMP388_Init+0x35c>)
 8001356:	6013      	str	r3, [r2, #0]
	par_p5 = NVM_PAR_P5/pow(2,-3);
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <BMP388_Init+0x308>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8e9 	bl	8000534 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800136a:	f7ff fa77 	bl	800085c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc3f 	bl	8000bf8 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <BMP388_Init+0x360>)
 800137e:	6013      	str	r3, [r2, #0]
	par_p6 = NVM_PAR_P6/pow(2,6);
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <BMP388_Init+0x30c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8d5 	bl	8000534 <__aeabi_i2d>
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	e03d      	b.n	800140c <BMP388_Init+0x364>
 8001390:	200008a4 	.word	0x200008a4
 8001394:	20000518 	.word	0x20000518
 8001398:	2000055c 	.word	0x2000055c
 800139c:	20000516 	.word	0x20000516
 80013a0:	20000544 	.word	0x20000544
 80013a4:	20000514 	.word	0x20000514
 80013a8:	20000534 	.word	0x20000534
 80013ac:	20000512 	.word	0x20000512
 80013b0:	20000554 	.word	0x20000554
 80013b4:	20000510 	.word	0x20000510
 80013b8:	2000052c 	.word	0x2000052c
 80013bc:	20000557 	.word	0x20000557
 80013c0:	20000524 	.word	0x20000524
 80013c4:	20000556 	.word	0x20000556
 80013c8:	2000055e 	.word	0x2000055e
 80013cc:	3f700000 	.word	0x3f700000
 80013d0:	20000550 	.word	0x20000550
 80013d4:	41d00000 	.word	0x41d00000
 80013d8:	20000520 	.word	0x20000520
 80013dc:	42f00000 	.word	0x42f00000
 80013e0:	20000504 	.word	0x20000504
 80013e4:	40d00000 	.word	0x40d00000
 80013e8:	41300000 	.word	0x41300000
 80013ec:	20000508 	.word	0x20000508
 80013f0:	41c00000 	.word	0x41c00000
 80013f4:	2000054c 	.word	0x2000054c
 80013f8:	41f00000 	.word	0x41f00000
 80013fc:	2000050c 	.word	0x2000050c
 8001400:	42400000 	.word	0x42400000
 8001404:	20000530 	.word	0x20000530
 8001408:	20000548 	.word	0x20000548
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <BMP388_Init+0x450>)
 800140e:	f7ff fa25 	bl	800085c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbed 	bl	8000bf8 <__aeabi_d2f>
 800141e:	4603      	mov	r3, r0
 8001420:	4a36      	ldr	r2, [pc, #216]	; (80014fc <BMP388_Init+0x454>)
 8001422:	6013      	str	r3, [r2, #0]
	par_p7 = NVM_PAR_P7/pow(2,8);
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <BMP388_Init+0x458>)
 8001426:	f993 3000 	ldrsb.w	r3, [r3]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f882 	bl	8000534 <__aeabi_i2d>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <BMP388_Init+0x45c>)
 8001436:	f7ff fa11 	bl	800085c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbd9 	bl	8000bf8 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <BMP388_Init+0x460>)
 800144a:	6013      	str	r3, [r2, #0]
	par_p8 = NVM_PAR_P8/pow(2,15);
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <BMP388_Init+0x464>)
 800144e:	f993 3000 	ldrsb.w	r3, [r3]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f86e 	bl	8000534 <__aeabi_i2d>
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <BMP388_Init+0x468>)
 800145e:	f7ff f9fd 	bl	800085c <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fbc5 	bl	8000bf8 <__aeabi_d2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <BMP388_Init+0x46c>)
 8001472:	6013      	str	r3, [r2, #0]
	par_p9 = NVM_PAR_P9/pow(2,48);
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <BMP388_Init+0x470>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f85a 	bl	8000534 <__aeabi_i2d>
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <BMP388_Init+0x474>)
 8001486:	f7ff f9e9 	bl	800085c <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fbb1 	bl	8000bf8 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <BMP388_Init+0x478>)
 800149a:	6013      	str	r3, [r2, #0]
	par_p10 = NVM_PAR_P10/pow(2,48);
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <BMP388_Init+0x47c>)
 800149e:	f993 3000 	ldrsb.w	r3, [r3]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f846 	bl	8000534 <__aeabi_i2d>
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <BMP388_Init+0x474>)
 80014ae:	f7ff f9d5 	bl	800085c <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb9d 	bl	8000bf8 <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <BMP388_Init+0x480>)
 80014c2:	6013      	str	r3, [r2, #0]
	par_p11= NVM_PAR_P11/pow(2,65);
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BMP388_Init+0x484>)
 80014c6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f832 	bl	8000534 <__aeabi_i2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80014d8:	f7ff f9c0 	bl	800085c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb88 	bl	8000bf8 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <BMP388_Init+0x488>)
 80014ec:	6013      	str	r3, [r2, #0]

}
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40500000 	.word	0x40500000
 80014fc:	2000051c 	.word	0x2000051c
 8001500:	2000052c 	.word	0x2000052c
 8001504:	40700000 	.word	0x40700000
 8001508:	20000528 	.word	0x20000528
 800150c:	20000557 	.word	0x20000557
 8001510:	40e00000 	.word	0x40e00000
 8001514:	20000558 	.word	0x20000558
 8001518:	20000524 	.word	0x20000524
 800151c:	42f00000 	.word	0x42f00000
 8001520:	20000538 	.word	0x20000538
 8001524:	20000556 	.word	0x20000556
 8001528:	2000053c 	.word	0x2000053c
 800152c:	2000055e 	.word	0x2000055e
 8001530:	20000540 	.word	0x20000540

08001534 <BMP388_readData>:

float BMP388_readData(double * T, double * P)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b0a4      	sub	sp, #144	; 0x90
 8001538:	af16      	add	r7, sp, #88	; 0x58
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	BMP388_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_DATA_ADDR,data,6);
 800153e:	4cc2      	ldr	r4, [pc, #776]	; (8001848 <BMP388_readData+0x314>)
 8001540:	2306      	movs	r3, #6
 8001542:	9314      	str	r3, [sp, #80]	; 0x50
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	9313      	str	r3, [sp, #76]	; 0x4c
 800154a:	2304      	movs	r3, #4
 800154c:	9312      	str	r3, [sp, #72]	; 0x48
 800154e:	2376      	movs	r3, #118	; 0x76
 8001550:	9311      	str	r3, [sp, #68]	; 0x44
 8001552:	4668      	mov	r0, sp
 8001554:	f104 0310 	add.w	r3, r4, #16
 8001558:	2244      	movs	r2, #68	; 0x44
 800155a:	4619      	mov	r1, r3
 800155c:	f00e fee0 	bl	8010320 <memcpy>
 8001560:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001564:	f7ff fd75 	bl	8001052 <BMP388_readByte>

	uint32_t uncomp_temp, uncomp_press;
	uncomp_press = (data[2] << 16) | (data[1] << 8) | (data[0]);
 8001568:	7abb      	ldrb	r3, [r7, #10]
 800156a:	041a      	lsls	r2, r3, #16
 800156c:	7a7b      	ldrb	r3, [r7, #9]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	4313      	orrs	r3, r2
 8001572:	7a3a      	ldrb	r2, [r7, #8]
 8001574:	4313      	orrs	r3, r2
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
	uncomp_temp = (data[5] << 16) | (data[4] << 8) | (data[3]);
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	7b3b      	ldrb	r3, [r7, #12]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	4313      	orrs	r3, r2
 8001582:	7afa      	ldrb	r2, [r7, #11]
 8001584:	4313      	orrs	r3, r2
 8001586:	633b      	str	r3, [r7, #48]	; 0x30

	// Temperature compensation
	float partial_data1;
	float partial_data2;
	partial_data1 = (float)(uncomp_temp-par_t1);
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001592:	4bae      	ldr	r3, [pc, #696]	; (800184c <BMP388_readData+0x318>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	partial_data2 = (float)(partial_data1 * par_t2);
 80015a0:	4bab      	ldr	r3, [pc, #684]	; (8001850 <BMP388_readData+0x31c>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	*T = partial_data2 + (partial_data1 * partial_data1) * par_t3;
 80015b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ba:	4ba6      	ldr	r3, [pc, #664]	; (8001854 <BMP388_readData+0x320>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	ee17 0a90 	vmov	r0, s15
 80015d0:	f7fe ffc2 	bl	8000558 <__aeabi_f2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	e9c1 2300 	strd	r2, r3, [r1]

	double temp = *T;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	// Pressure compensation
	partial_data1 = 0;
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = 0;
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
	float partial_data3, partial_data4, partial_out1, partial_out2;
	partial_data1 = par_p6 * temp;
 80015f4:	4b98      	ldr	r3, [pc, #608]	; (8001858 <BMP388_readData+0x324>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffad 	bl	8000558 <__aeabi_f2d>
 80015fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001602:	f7ff f801 	bl	8000608 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = par_p7 * temp*temp;
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <BMP388_readData+0x328>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001624:	f7fe fff0 	bl	8000608 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001634:	f7fe ffe8 	bl	8000608 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fada 	bl	8000bf8 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = par_p8 * temp*temp*temp;
 8001648:	4b85      	ldr	r3, [pc, #532]	; (8001860 <BMP388_readData+0x32c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001656:	f7fe ffd7 	bl	8000608 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001666:	f7fe ffcf 	bl	8000608 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001676:	f7fe ffc7 	bl	8000608 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fab9 	bl	8000bf8 <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	61fb      	str	r3, [r7, #28]
	partial_out1 = par_p5 + partial_data1 + partial_data2 + partial_data3;
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <BMP388_readData+0x330>)
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001698:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	edc7 7a06 	vstr	s15, [r7, #24]
	partial_data1 = par_p2 * temp;
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <BMP388_readData+0x334>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff51 	bl	8000558 <__aeabi_f2d>
 80016b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ba:	f7fe ffa5 	bl	8000608 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa97 	bl	8000bf8 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = par_p3 * temp*temp;
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <BMP388_readData+0x338>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff40 	bl	8000558 <__aeabi_f2d>
 80016d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016dc:	f7fe ff94 	bl	8000608 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ec:	f7fe ff8c 	bl	8000608 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa7e 	bl	8000bf8 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = par_p4 * temp*temp*temp;
 8001700:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <BMP388_readData+0x33c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff27 	bl	8000558 <__aeabi_f2d>
 800170a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800170e:	f7fe ff7b 	bl	8000608 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172e:	f7fe ff6b 	bl	8000608 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa5d 	bl	8000bf8 <__aeabi_d2f>
 800173e:	4603      	mov	r3, r0
 8001740:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)uncomp_press * (par_p1 + partial_data1 + partial_data2 + partial_data3);
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174c:	4b49      	ldr	r3, [pc, #292]	; (8001874 <BMP388_readData+0x340>)
 800174e:	edd3 6a00 	vldr	s13, [r3]
 8001752:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001756:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800175a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800175e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001762:	edd7 7a07 	vldr	s15, [r7, #28]
 8001766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800176a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176e:	edc7 7a05 	vstr	s15, [r7, #20]
	partial_data1 = (float)uncomp_press * (float)uncomp_press;
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	partial_data2 = par_p9 + par_p10 * temp;
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <BMP388_readData+0x344>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee0 	bl	8000558 <__aeabi_f2d>
 8001798:	4604      	mov	r4, r0
 800179a:	460d      	mov	r5, r1
 800179c:	4b37      	ldr	r3, [pc, #220]	; (800187c <BMP388_readData+0x348>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed9 	bl	8000558 <__aeabi_f2d>
 80017a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017aa:	f7fe ff2d 	bl	8000608 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f7fe fd71 	bl	800029c <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa19 	bl	8000bf8 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = partial_data1 * partial_data2;
 80017ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_data4 = partial_data3 + (float)uncomp_press*(float)uncomp_press*(float)uncomp_press*par_p11;
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <BMP388_readData+0x34c>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	ed97 7a07 	vldr	s14, [r7, #28]
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	edc7 7a04 	vstr	s15, [r7, #16]
	*P = partial_out1 + partial_out2 + partial_data4;
 8001816:	ed97 7a06 	vldr	s14, [r7, #24]
 800181a:	edd7 7a05 	vldr	s15, [r7, #20]
 800181e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001822:	edd7 7a04 	vldr	s15, [r7, #16]
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	ee17 0a90 	vmov	r0, s15
 800182e:	f7fe fe93 	bl	8000558 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	e9c1 2300 	strd	r2, r3, [r1]
}
 800183c:	bf00      	nop
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	200008a4 	.word	0x200008a4
 800184c:	20000550 	.word	0x20000550
 8001850:	20000520 	.word	0x20000520
 8001854:	20000504 	.word	0x20000504
 8001858:	2000051c 	.word	0x2000051c
 800185c:	20000528 	.word	0x20000528
 8001860:	20000558 	.word	0x20000558
 8001864:	20000548 	.word	0x20000548
 8001868:	2000054c 	.word	0x2000054c
 800186c:	2000050c 	.word	0x2000050c
 8001870:	20000530 	.word	0x20000530
 8001874:	20000508 	.word	0x20000508
 8001878:	20000538 	.word	0x20000538
 800187c:	2000053c 	.word	0x2000053c
 8001880:	20000540 	.word	0x20000540
 8001884:	00000000 	.word	0x00000000

08001888 <BMP388_readAltitude>:

float BMP388_readAltitude (double pressure,float sealevelhPa)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001892:	ed87 1a01 	vstr	s2, [r7, #4]
	float altitude;
	pressure/=100;
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <BMP388_readAltitude+0xa0>)
 800189c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a0:	f7fe ffdc 	bl	800085c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	altitude= 44330*(1-pow(pressure/sealevelhPa,0.1903));
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7fe fe53 	bl	8000558 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ba:	f7fe ffcf 	bl	800085c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b17 	vmov	d7, r2, r3
 80018c6:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001918 <BMP388_readAltitude+0x90>
 80018ca:	eeb0 0a47 	vmov.f32	s0, s14
 80018ce:	eef0 0a67 	vmov.f32	s1, s15
 80018d2:	f013 fe15 	bl	8015500 <pow>
 80018d6:	ec53 2b10 	vmov	r2, r3, d0
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	4913      	ldr	r1, [pc, #76]	; (800192c <BMP388_readAltitude+0xa4>)
 80018e0:	f7fe fcda 	bl	8000298 <__aeabi_dsub>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a30c      	add	r3, pc, #48	; (adr r3, 8001920 <BMP388_readAltitude+0x98>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe89 	bl	8000608 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f97b 	bl	8000bf8 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	617b      	str	r3, [r7, #20]
	return altitude;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	ee07 3a90 	vmov	s15, r3
}
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	1a36e2eb 	.word	0x1a36e2eb
 800191c:	3fc85bc0 	.word	0x3fc85bc0
 8001920:	00000000 	.word	0x00000000
 8001924:	40e5a540 	.word	0x40e5a540
 8001928:	40590000 	.word	0x40590000
 800192c:	3ff00000 	.word	0x3ff00000

08001930 <BMX160_writeByte>:
#include "math.h"

#define rad_to_deg 180/3.14

void BMX160_writeByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * wdata,uint8_t size)
{
 8001930:	b084      	sub	sp, #16
 8001932:	b590      	push	{r4, r7, lr}
 8001934:	b085      	sub	sp, #20
 8001936:	af04      	add	r7, sp, #16
 8001938:	f107 0410 	add.w	r4, r7, #16
 800193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&hi2cX,device_address << 1,register_address,1,wdata,size,10*size);
 8001940:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001944:	b29b      	uxth	r3, r3
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	b298      	uxth	r0, r3
 800194a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800194e:	b29c      	uxth	r4, r3
 8001950:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001954:	b299      	uxth	r1, r3
 8001956:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	9101      	str	r1, [sp, #4]
 8001966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	4622      	mov	r2, r4
 800196e:	4601      	mov	r1, r0
 8001970:	f107 0010 	add.w	r0, r7, #16
 8001974:	f007 fc16 	bl	80091a4 <HAL_I2C_Mem_Write>
}
 8001978:	bf00      	nop
 800197a:	3704      	adds	r7, #4
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001982:	b004      	add	sp, #16
 8001984:	4770      	bx	lr

08001986 <BMX160_readByte>:
void BMX160_readByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * rdata,uint8_t size)
{
 8001986:	b084      	sub	sp, #16
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af04      	add	r7, sp, #16
 800198e:	f107 0410 	add.w	r4, r7, #16
 8001992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_I2C_Mem_Read(&hi2cX,device_address << 1,register_address,1,rdata,size,size*10);
 8001996:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800199a:	b29b      	uxth	r3, r3
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	b298      	uxth	r0, r3
 80019a0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80019a4:	b29c      	uxth	r4, r3
 80019a6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019aa:	b299      	uxth	r1, r3
 80019ac:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	9101      	str	r1, [sp, #4]
 80019bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	4622      	mov	r2, r4
 80019c4:	4601      	mov	r1, r0
 80019c6:	f107 0010 	add.w	r0, r7, #16
 80019ca:	f007 fce5 	bl	8009398 <HAL_I2C_Mem_Read>
}
 80019ce:	bf00      	nop
 80019d0:	3704      	adds	r7, #4
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80019d8:	b004      	add	sp, #16
 80019da:	4770      	bx	lr

080019dc <BMX160_Read_ID>:

uint8_t BMX160_Read_ID(void)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b099      	sub	sp, #100	; 0x64
 80019e0:	af16      	add	r7, sp, #88	; 0x58
	uint8_t id;
	BMX160_readByte(hi2c2,BMX160_I2C_ADDRESS, BMX160_CHIP_ID_ADDR , &id, 1);
 80019e2:	4c0c      	ldr	r4, [pc, #48]	; (8001a14 <BMX160_Read_ID+0x38>)
 80019e4:	2301      	movs	r3, #1
 80019e6:	9314      	str	r3, [sp, #80]	; 0x50
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80019ec:	2300      	movs	r3, #0
 80019ee:	9312      	str	r3, [sp, #72]	; 0x48
 80019f0:	2369      	movs	r3, #105	; 0x69
 80019f2:	9311      	str	r3, [sp, #68]	; 0x44
 80019f4:	4668      	mov	r0, sp
 80019f6:	f104 0310 	add.w	r3, r4, #16
 80019fa:	2244      	movs	r2, #68	; 0x44
 80019fc:	4619      	mov	r1, r3
 80019fe:	f00e fc8f 	bl	8010320 <memcpy>
 8001a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a06:	f7ff ffbe 	bl	8001986 <BMX160_readByte>
	return id;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	200008a4 	.word	0x200008a4

08001a18 <BMX160_Begin>:
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_COMMAND_REG_ADDR,&data,1);
	HAL_Delay(15);
}

void BMX160_Begin(void)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b099      	sub	sp, #100	; 0x64
 8001a1c:	af16      	add	r7, sp, #88	; 0x58
	// Set accel to normal mode
	uint8_t data = 0x11;
 8001a1e:	2311      	movs	r3, #17
 8001a20:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_COMMAND_REG_ADDR,&data,1);
 8001a22:	4ca7      	ldr	r4, [pc, #668]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001a24:	2301      	movs	r3, #1
 8001a26:	9314      	str	r3, [sp, #80]	; 0x50
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8001a2c:	237e      	movs	r3, #126	; 0x7e
 8001a2e:	9312      	str	r3, [sp, #72]	; 0x48
 8001a30:	2369      	movs	r3, #105	; 0x69
 8001a32:	9311      	str	r3, [sp, #68]	; 0x44
 8001a34:	4668      	mov	r0, sp
 8001a36:	f104 0310 	add.w	r3, r4, #16
 8001a3a:	2244      	movs	r2, #68	; 0x44
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f00e fc6f 	bl	8010320 <memcpy>
 8001a42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a46:	f7ff ff73 	bl	8001930 <BMX160_writeByte>

	// Set gyro to normal mode
	data = 0x15;
 8001a4a:	2315      	movs	r3, #21
 8001a4c:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_COMMAND_REG_ADDR,&data,1);
 8001a4e:	4c9c      	ldr	r4, [pc, #624]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001a50:	2301      	movs	r3, #1
 8001a52:	9314      	str	r3, [sp, #80]	; 0x50
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	9313      	str	r3, [sp, #76]	; 0x4c
 8001a58:	237e      	movs	r3, #126	; 0x7e
 8001a5a:	9312      	str	r3, [sp, #72]	; 0x48
 8001a5c:	2369      	movs	r3, #105	; 0x69
 8001a5e:	9311      	str	r3, [sp, #68]	; 0x44
 8001a60:	4668      	mov	r0, sp
 8001a62:	f104 0310 	add.w	r3, r4, #16
 8001a66:	2244      	movs	r2, #68	; 0x44
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f00e fc59 	bl	8010320 <memcpy>
 8001a6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a72:	f7ff ff5d 	bl	8001930 <BMX160_writeByte>

	// Set magn to normal mode
	data = 0x19;
 8001a76:	2319      	movs	r3, #25
 8001a78:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_COMMAND_REG_ADDR,&data,1);
 8001a7a:	4c91      	ldr	r4, [pc, #580]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9314      	str	r3, [sp, #80]	; 0x50
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	9313      	str	r3, [sp, #76]	; 0x4c
 8001a84:	237e      	movs	r3, #126	; 0x7e
 8001a86:	9312      	str	r3, [sp, #72]	; 0x48
 8001a88:	2369      	movs	r3, #105	; 0x69
 8001a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8001a8c:	4668      	mov	r0, sp
 8001a8e:	f104 0310 	add.w	r3, r4, #16
 8001a92:	2244      	movs	r2, #68	; 0x44
 8001a94:	4619      	mov	r1, r3
 8001a96:	f00e fc43 	bl	8010320 <memcpy>
 8001a9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a9e:	f7ff ff47 	bl	8001930 <BMX160_writeByte>

	data = 0x80;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_0_ADDR,&data,1);
 8001aa6:	4c86      	ldr	r4, [pc, #536]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9314      	str	r3, [sp, #80]	; 0x50
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	9313      	str	r3, [sp, #76]	; 0x4c
 8001ab0:	234c      	movs	r3, #76	; 0x4c
 8001ab2:	9312      	str	r3, [sp, #72]	; 0x48
 8001ab4:	2369      	movs	r3, #105	; 0x69
 8001ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8001ab8:	4668      	mov	r0, sp
 8001aba:	f104 0310 	add.w	r3, r4, #16
 8001abe:	2244      	movs	r2, #68	; 0x44
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f00e fc2d 	bl	8010320 <memcpy>
 8001ac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aca:	f7ff ff31 	bl	8001930 <BMX160_writeByte>

	// Sleep mode
	data = 0x01;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_3_ADDR,&data,1);
 8001ad2:	4c7b      	ldr	r4, [pc, #492]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	9313      	str	r3, [sp, #76]	; 0x4c
 8001adc:	234f      	movs	r3, #79	; 0x4f
 8001ade:	9312      	str	r3, [sp, #72]	; 0x48
 8001ae0:	2369      	movs	r3, #105	; 0x69
 8001ae2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ae4:	4668      	mov	r0, sp
 8001ae6:	f104 0310 	add.w	r3, r4, #16
 8001aea:	2244      	movs	r2, #68	; 0x44
 8001aec:	4619      	mov	r1, r3
 8001aee:	f00e fc17 	bl	8010320 <memcpy>
 8001af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001af6:	f7ff ff1b 	bl	8001930 <BMX160_writeByte>
	data = 0x4B;
 8001afa:	234b      	movs	r3, #75	; 0x4b
 8001afc:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_2_ADDR,&data,1);
 8001afe:	4c70      	ldr	r4, [pc, #448]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	9314      	str	r3, [sp, #80]	; 0x50
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	9313      	str	r3, [sp, #76]	; 0x4c
 8001b08:	234e      	movs	r3, #78	; 0x4e
 8001b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8001b0c:	2369      	movs	r3, #105	; 0x69
 8001b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8001b10:	4668      	mov	r0, sp
 8001b12:	f104 0310 	add.w	r3, r4, #16
 8001b16:	2244      	movs	r2, #68	; 0x44
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f00e fc01 	bl	8010320 <memcpy>
 8001b1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b22:	f7ff ff05 	bl	8001930 <BMX160_writeByte>

	// REPXY
	data = 0x04;
 8001b26:	2304      	movs	r3, #4
 8001b28:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_3_ADDR,&data,1);
 8001b2a:	4c65      	ldr	r4, [pc, #404]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	9313      	str	r3, [sp, #76]	; 0x4c
 8001b34:	234f      	movs	r3, #79	; 0x4f
 8001b36:	9312      	str	r3, [sp, #72]	; 0x48
 8001b38:	2369      	movs	r3, #105	; 0x69
 8001b3a:	9311      	str	r3, [sp, #68]	; 0x44
 8001b3c:	4668      	mov	r0, sp
 8001b3e:	f104 0310 	add.w	r3, r4, #16
 8001b42:	2244      	movs	r2, #68	; 0x44
 8001b44:	4619      	mov	r1, r3
 8001b46:	f00e fbeb 	bl	8010320 <memcpy>
 8001b4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b4e:	f7ff feef 	bl	8001930 <BMX160_writeByte>
	data = 0x51;
 8001b52:	2351      	movs	r3, #81	; 0x51
 8001b54:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_2_ADDR,&data,1);
 8001b56:	4c5a      	ldr	r4, [pc, #360]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9314      	str	r3, [sp, #80]	; 0x50
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001b60:	234e      	movs	r3, #78	; 0x4e
 8001b62:	9312      	str	r3, [sp, #72]	; 0x48
 8001b64:	2369      	movs	r3, #105	; 0x69
 8001b66:	9311      	str	r3, [sp, #68]	; 0x44
 8001b68:	4668      	mov	r0, sp
 8001b6a:	f104 0310 	add.w	r3, r4, #16
 8001b6e:	2244      	movs	r2, #68	; 0x44
 8001b70:	4619      	mov	r1, r3
 8001b72:	f00e fbd5 	bl	8010320 <memcpy>
 8001b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b7a:	f7ff fed9 	bl	8001930 <BMX160_writeByte>

	// REPZ
	data = 0x0E;
 8001b7e:	230e      	movs	r3, #14
 8001b80:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_3_ADDR,&data,1);
 8001b82:	4c4f      	ldr	r4, [pc, #316]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001b84:	2301      	movs	r3, #1
 8001b86:	9314      	str	r3, [sp, #80]	; 0x50
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8001b8c:	234f      	movs	r3, #79	; 0x4f
 8001b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8001b90:	2369      	movs	r3, #105	; 0x69
 8001b92:	9311      	str	r3, [sp, #68]	; 0x44
 8001b94:	4668      	mov	r0, sp
 8001b96:	f104 0310 	add.w	r3, r4, #16
 8001b9a:	2244      	movs	r2, #68	; 0x44
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f00e fbbf 	bl	8010320 <memcpy>
 8001ba2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ba6:	f7ff fec3 	bl	8001930 <BMX160_writeByte>
	data = 0x52;
 8001baa:	2352      	movs	r3, #82	; 0x52
 8001bac:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_2_ADDR,&data,1);
 8001bae:	4c44      	ldr	r4, [pc, #272]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9314      	str	r3, [sp, #80]	; 0x50
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8001bb8:	234e      	movs	r3, #78	; 0x4e
 8001bba:	9312      	str	r3, [sp, #72]	; 0x48
 8001bbc:	2369      	movs	r3, #105	; 0x69
 8001bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8001bc0:	4668      	mov	r0, sp
 8001bc2:	f104 0310 	add.w	r3, r4, #16
 8001bc6:	2244      	movs	r2, #68	; 0x44
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f00e fba9 	bl	8010320 <memcpy>
 8001bce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bd2:	f7ff fead 	bl	8001930 <BMX160_writeByte>

	data = 0x02;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_3_ADDR,&data,1);
 8001bda:	4c39      	ldr	r4, [pc, #228]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001bdc:	2301      	movs	r3, #1
 8001bde:	9314      	str	r3, [sp, #80]	; 0x50
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8001be4:	234f      	movs	r3, #79	; 0x4f
 8001be6:	9312      	str	r3, [sp, #72]	; 0x48
 8001be8:	2369      	movs	r3, #105	; 0x69
 8001bea:	9311      	str	r3, [sp, #68]	; 0x44
 8001bec:	4668      	mov	r0, sp
 8001bee:	f104 0310 	add.w	r3, r4, #16
 8001bf2:	2244      	movs	r2, #68	; 0x44
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f00e fb93 	bl	8010320 <memcpy>
 8001bfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bfe:	f7ff fe97 	bl	8001930 <BMX160_writeByte>
	data = 0x4C;
 8001c02:	234c      	movs	r3, #76	; 0x4c
 8001c04:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_2_ADDR,&data,1);
 8001c06:	4c2e      	ldr	r4, [pc, #184]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9314      	str	r3, [sp, #80]	; 0x50
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c10:	234e      	movs	r3, #78	; 0x4e
 8001c12:	9312      	str	r3, [sp, #72]	; 0x48
 8001c14:	2369      	movs	r3, #105	; 0x69
 8001c16:	9311      	str	r3, [sp, #68]	; 0x44
 8001c18:	4668      	mov	r0, sp
 8001c1a:	f104 0310 	add.w	r3, r4, #16
 8001c1e:	2244      	movs	r2, #68	; 0x44
 8001c20:	4619      	mov	r1, r3
 8001c22:	f00e fb7d 	bl	8010320 <memcpy>
 8001c26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c2a:	f7ff fe81 	bl	8001930 <BMX160_writeByte>
	data = 0x42;
 8001c2e:	2342      	movs	r3, #66	; 0x42
 8001c30:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_1_ADDR,&data,1);
 8001c32:	4c23      	ldr	r4, [pc, #140]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001c34:	2301      	movs	r3, #1
 8001c36:	9314      	str	r3, [sp, #80]	; 0x50
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c3c:	234d      	movs	r3, #77	; 0x4d
 8001c3e:	9312      	str	r3, [sp, #72]	; 0x48
 8001c40:	2369      	movs	r3, #105	; 0x69
 8001c42:	9311      	str	r3, [sp, #68]	; 0x44
 8001c44:	4668      	mov	r0, sp
 8001c46:	f104 0310 	add.w	r3, r4, #16
 8001c4a:	2244      	movs	r2, #68	; 0x44
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f00e fb67 	bl	8010320 <memcpy>
 8001c52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c56:	f7ff fe6b 	bl	8001930 <BMX160_writeByte>
	data = 0x08;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_CONFIG_ADDR,&data,1);
 8001c5e:	4c18      	ldr	r4, [pc, #96]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001c60:	2301      	movs	r3, #1
 8001c62:	9314      	str	r3, [sp, #80]	; 0x50
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c68:	2344      	movs	r3, #68	; 0x44
 8001c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8001c6c:	2369      	movs	r3, #105	; 0x69
 8001c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8001c70:	4668      	mov	r0, sp
 8001c72:	f104 0310 	add.w	r3, r4, #16
 8001c76:	2244      	movs	r2, #68	; 0x44
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f00e fb51 	bl	8010320 <memcpy>
 8001c7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c82:	f7ff fe55 	bl	8001930 <BMX160_writeByte>

	data = 0x03;
 8001c86:	2303      	movs	r3, #3
 8001c88:	71fb      	strb	r3, [r7, #7]
	BMX160_writeByte(hi2c2,BMX160_I2C_ADDRESS,BMX160_MAGN_IF_0_ADDR,&data,1);
 8001c8a:	4c0d      	ldr	r4, [pc, #52]	; (8001cc0 <BMX160_Begin+0x2a8>)
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9314      	str	r3, [sp, #80]	; 0x50
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c94:	234c      	movs	r3, #76	; 0x4c
 8001c96:	9312      	str	r3, [sp, #72]	; 0x48
 8001c98:	2369      	movs	r3, #105	; 0x69
 8001c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8001c9c:	4668      	mov	r0, sp
 8001c9e:	f104 0310 	add.w	r3, r4, #16
 8001ca2:	2244      	movs	r2, #68	; 0x44
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f00e fb3b 	bl	8010320 <memcpy>
 8001caa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cae:	f7ff fe3f 	bl	8001930 <BMX160_writeByte>

	HAL_Delay(50);
 8001cb2:	2032      	movs	r0, #50	; 0x32
 8001cb4:	f005 fb00 	bl	80072b8 <HAL_Delay>
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	200008a4 	.word	0x200008a4
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <BMX160_readAllData>:

void BMX160_readAllData(struct bmx160SensorData *magn, struct bmx160SensorData *gyro, struct bmx160SensorData *accel)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b0a1      	sub	sp, #132	; 0x84
 8001ccc:	af16      	add	r7, sp, #88	; 0x58
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	uint8_t data[23];
	BMX160_readByte(hi2c2, BMX160_I2C_ADDRESS, BMX160_MAG_DATA_ADDR, data, 23);
 8001cd4:	4c92      	ldr	r4, [pc, #584]	; (8001f20 <BMX160_readAllData+0x258>)
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	9314      	str	r3, [sp, #80]	; 0x50
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	9313      	str	r3, [sp, #76]	; 0x4c
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	9312      	str	r3, [sp, #72]	; 0x48
 8001ce4:	2369      	movs	r3, #105	; 0x69
 8001ce6:	9311      	str	r3, [sp, #68]	; 0x44
 8001ce8:	4668      	mov	r0, sp
 8001cea:	f104 0310 	add.w	r3, r4, #16
 8001cee:	2244      	movs	r2, #68	; 0x44
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f00e fb15 	bl	8010320 <memcpy>
 8001cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cfa:	f7ff fe44 	bl	8001986 <BMX160_readByte>

    magn->x = (int16_t) ((data[1] << 8) | data[0]);
 8001cfe:	7c7b      	ldrb	r3, [r7, #17]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	7c3b      	ldrb	r3, [r7, #16]
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc11 	bl	8000534 <__aeabi_i2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	e9c1 2300 	strd	r2, r3, [r1]
    magn->y = (int16_t) ((data[3] << 8) | data[2]);
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	7cbb      	ldrb	r3, [r7, #18]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc02 	bl	8000534 <__aeabi_i2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	e9c1 2302 	strd	r2, r3, [r1, #8]
    magn->z = (int16_t) ((data[5] << 8) | data[4]);
 8001d3a:	7d7b      	ldrb	r3, [r7, #21]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	7d3b      	ldrb	r3, [r7, #20]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fbf3 	bl	8000534 <__aeabi_i2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	e9c1 2304 	strd	r2, r3, [r1, #16]
    magn->x *= BMX160_MAGN_UT_LSB;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5e:	a36a      	add	r3, pc, #424	; (adr r3, 8001f08 <BMX160_readAllData+0x240>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc50 	bl	8000608 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	e9c1 2300 	strd	r2, r3, [r1]
    magn->y *= BMX160_MAGN_UT_LSB;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d78:	a363      	add	r3, pc, #396	; (adr r3, 8001f08 <BMX160_readAllData+0x240>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	e9c1 2302 	strd	r2, r3, [r1, #8]
    magn->z *= BMX160_MAGN_UT_LSB;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d92:	a35d      	add	r3, pc, #372	; (adr r3, 8001f08 <BMX160_readAllData+0x240>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc36 	bl	8000608 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    gyro->x = (int16_t) ((data[9] << 8) | data[8]);
 8001da6:	7e7b      	ldrb	r3, [r7, #25]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	7e3b      	ldrb	r3, [r7, #24]
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbbd 	bl	8000534 <__aeabi_i2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]
    gyro->y = (int16_t) ((data[11] << 8) | data[10]);
 8001dc4:	7efb      	ldrb	r3, [r7, #27]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	7ebb      	ldrb	r3, [r7, #26]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fbae 	bl	8000534 <__aeabi_i2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	e9c1 2302 	strd	r2, r3, [r1, #8]
    gyro->z = (int16_t) ((data[13] << 8) | data[12]);
 8001de2:	7f7b      	ldrb	r3, [r7, #29]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	7f3b      	ldrb	r3, [r7, #28]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb9f 	bl	8000534 <__aeabi_i2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    gyro->x *= BMX160_GYRO_SENSITIVITY_125DPS;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e06:	a342      	add	r3, pc, #264	; (adr r3, 8001f10 <BMX160_readAllData+0x248>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fbfc 	bl	8000608 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	e9c1 2300 	strd	r2, r3, [r1]
    gyro->y *= BMX160_GYRO_SENSITIVITY_125DPS;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e20:	a33b      	add	r3, pc, #236	; (adr r3, 8001f10 <BMX160_readAllData+0x248>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f7fe fbef 	bl	8000608 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	e9c1 2302 	strd	r2, r3, [r1, #8]
    gyro->z *= BMX160_GYRO_SENSITIVITY_125DPS;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e3a:	a335      	add	r3, pc, #212	; (adr r3, 8001f10 <BMX160_readAllData+0x248>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fbe2 	bl	8000608 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    accel->x = (int16_t) ((data[15] << 8) | data[14]);
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	7fbb      	ldrb	r3, [r7, #30]
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb69 	bl	8000534 <__aeabi_i2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    accel->y = (int16_t) ((data[17] << 8) | data[16]);
 8001e6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb58 	bl	8000534 <__aeabi_i2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    accel->z = (int16_t) ((data[19] << 8) | data[18]);
 8001e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb47 	bl	8000534 <__aeabi_i2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accel->x *= BMX160_ACCEL_MG_LSB_2G;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb6:	a318      	add	r3, pc, #96	; (adr r3, 8001f18 <BMX160_readAllData+0x250>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fba4 	bl	8000608 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]
    accel->y *= BMX160_ACCEL_MG_LSB_2G;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ed0:	a311      	add	r3, pc, #68	; (adr r3, 8001f18 <BMX160_readAllData+0x250>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fb97 	bl	8000608 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    accel->z *= BMX160_ACCEL_MG_LSB_2G;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001eea:	a30b      	add	r3, pc, #44	; (adr r3, 8001f18 <BMX160_readAllData+0x250>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb8a 	bl	8000608 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	; 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40000000 	.word	0x40000000
 8001f0c:	3fd33333 	.word	0x3fd33333
 8001f10:	00000000 	.word	0x00000000
 8001f14:	3f6f383f 	.word	0x3f6f383f
 8001f18:	a0000000 	.word	0xa0000000
 8001f1c:	3f0ffffa 	.word	0x3f0ffffa
 8001f20:	200008a4 	.word	0x200008a4
 8001f24:	00000000 	.word	0x00000000

08001f28 <BMX160_getEulerAngles>:

void BMX160_getEulerAngles(double * roll, double * pitch, double * yaw)
{
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	ed2d 8b02 	vpush	{d8}
 8001f30:	b09f      	sub	sp, #124	; 0x7c
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
	struct bmx160SensorData Magn,Accel,Gyro;
	BMX160_readAllData(&Magn, &Gyro, &Accel);
 8001f3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f3e:	f107 0110 	add.w	r1, r7, #16
 8001f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff febe 	bl	8001cc8 <BMX160_readAllData>

	for(int i = 0; i<16; i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f50:	e056      	b.n	8002000 <BMX160_getEulerAngles+0xd8>
	{
		MahonyAHRSupdate(Gyro.x,Gyro.y,Gyro.z,Accel.x,Accel.y,Accel.z,Magn.x,Magn.y,Magn.z);
 8001f52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fe4d 	bl	8000bf8 <__aeabi_d2f>
 8001f5e:	4604      	mov	r4, r0
 8001f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fe46 	bl	8000bf8 <__aeabi_d2f>
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fe3f 	bl	8000bf8 <__aeabi_d2f>
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe38 	bl	8000bf8 <__aeabi_d2f>
 8001f88:	4680      	mov	r8, r0
 8001f8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe31 	bl	8000bf8 <__aeabi_d2f>
 8001f96:	4681      	mov	r9, r0
 8001f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fe2a 	bl	8000bf8 <__aeabi_d2f>
 8001fa4:	4682      	mov	sl, r0
 8001fa6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fe23 	bl	8000bf8 <__aeabi_d2f>
 8001fb2:	4683      	mov	fp, r0
 8001fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe1c 	bl	8000bf8 <__aeabi_d2f>
 8001fc0:	ee08 0a10 	vmov	s16, r0
 8001fc4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fe14 	bl	8000bf8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	ee04 3a10 	vmov	s8, r3
 8001fd6:	eef0 3a48 	vmov.f32	s7, s16
 8001fda:	ee03 ba10 	vmov	s6, fp
 8001fde:	ee02 aa90 	vmov	s5, sl
 8001fe2:	ee02 9a10 	vmov	s4, r9
 8001fe6:	ee01 8a90 	vmov	s3, r8
 8001fea:	ee01 6a10 	vmov	s2, r6
 8001fee:	ee00 5a90 	vmov	s1, r5
 8001ff2:	ee00 4a10 	vmov	s0, r4
 8001ff6:	f000 ff69 	bl	8002ecc <MahonyAHRSupdate>
	for(int i = 0; i<16; i++)
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
 8002000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002002:	2b0f      	cmp	r3, #15
 8002004:	dda5      	ble.n	8001f52 <BMX160_getEulerAngles+0x2a>
		//MahonyAHRSupdate(Gyro.x,Gyro.y,Gyro.z,Accel.x,Accel.y,Accel.z);
	}

	*roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002006:	4b64      	ldr	r3, [pc, #400]	; (8002198 <BMX160_getEulerAngles+0x270>)
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	4b63      	ldr	r3, [pc, #396]	; (800219c <BMX160_getEulerAngles+0x274>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002016:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 8002018:	edd3 6a00 	vldr	s13, [r3]
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <BMX160_getEulerAngles+0x27c>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002026:	ee37 6a27 	vadd.f32	s12, s14, s15
 800202a:	4b5c      	ldr	r3, [pc, #368]	; (800219c <BMX160_getEulerAngles+0x274>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	4b5a      	ldr	r3, [pc, #360]	; (800219c <BMX160_getEulerAngles+0x274>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800203e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002042:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 8002044:	edd3 6a00 	vldr	s13, [r3]
 8002048:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	eef0 0a67 	vmov.f32	s1, s15
 800205a:	eeb0 0a46 	vmov.f32	s0, s12
 800205e:	f013 fb63 	bl	8015728 <atan2f>
 8002062:	ee10 3a10 	vmov	r3, s0
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa76 	bl	8000558 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	e9c1 2300 	strd	r2, r3, [r1]
	*pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <BMX160_getEulerAngles+0x274>)
 8002078:	ed93 7a00 	vldr	s14, [r3]
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <BMX160_getEulerAngles+0x27c>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002086:	4b44      	ldr	r3, [pc, #272]	; (8002198 <BMX160_getEulerAngles+0x270>)
 8002088:	edd3 6a00 	vldr	s13, [r3]
 800208c:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800209e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a2:	eeb0 0a67 	vmov.f32	s0, s15
 80020a6:	f013 fb0d 	bl	80156c4 <asinf>
 80020aa:	ee10 3a10 	vmov	r3, s0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa52 	bl	8000558 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
	*yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <BMX160_getEulerAngles+0x274>)
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <BMX160_getEulerAngles+0x270>)
 80020d0:	edd3 6a00 	vldr	s13, [r3]
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <BMX160_getEulerAngles+0x27c>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020de:	ee37 6a27 	vadd.f32	s12, s14, s15
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 80020e4:	ed93 7a00 	vldr	s14, [r3]
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <BMX160_getEulerAngles+0x278>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <BMX160_getEulerAngles+0x27c>)
 80020fc:	edd3 6a00 	vldr	s13, [r3]
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <BMX160_getEulerAngles+0x27c>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	f013 fb07 	bl	8015728 <atan2f>
 800211a:	ee10 3a10 	vmov	r3, s0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa1a 	bl	8000558 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	e9c1 2300 	strd	r2, r3, [r1]
	*roll  *= rad_to_deg;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002134:	a316      	add	r3, pc, #88	; (adr r3, 8002190 <BMX160_getEulerAngles+0x268>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe fa65 	bl	8000608 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	e9c1 2300 	strd	r2, r3, [r1]
	*pitch *= rad_to_deg;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800214e:	a310      	add	r3, pc, #64	; (adr r3, 8002190 <BMX160_getEulerAngles+0x268>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fa58 	bl	8000608 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	e9c1 2300 	strd	r2, r3, [r1]
	*yaw   *= rad_to_deg;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002168:	a309      	add	r3, pc, #36	; (adr r3, 8002190 <BMX160_getEulerAngles+0x268>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa4b 	bl	8000608 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	e9c1 2300 	strd	r2, r3, [r1]
}
 800217c:	bf00      	nop
 800217e:	377c      	adds	r7, #124	; 0x7c
 8002180:	46bd      	mov	sp, r7
 8002182:	ecbd 8b02 	vpop	{d8}
 8002186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800218a:	bf00      	nop
 800218c:	f3af 8000 	nop.w
 8002190:	61d59ae7 	.word	0x61d59ae7
 8002194:	404ca994 	.word	0x404ca994
 8002198:	20000004 	.word	0x20000004
 800219c:	20000248 	.word	0x20000248
 80021a0:	2000024c 	.word	0x2000024c
 80021a4:	20000250 	.word	0x20000250

080021a8 <DS3231_readByte>:
void DS3231_writeByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * wdata,uint8_t size)
{
	ds3231_i2c_state = HAL_I2C_Mem_Write(&hi2cX,device_address << 1,register_address,1,wdata,size,10*size);
}
void DS3231_readByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * rdata,uint8_t size)
{
 80021a8:	b084      	sub	sp, #16
 80021aa:	b590      	push	{r4, r7, lr}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af04      	add	r7, sp, #16
 80021b0:	f107 0410 	add.w	r4, r7, #16
 80021b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ds3231_i2c_state = HAL_I2C_Mem_Read(&hi2cX,device_address << 1,register_address,1,rdata,size,size*10);
 80021b8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80021bc:	b29b      	uxth	r3, r3
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	b298      	uxth	r0, r3
 80021c2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80021c6:	b29c      	uxth	r4, r3
 80021c8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80021cc:	b299      	uxth	r1, r3
 80021ce:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	9101      	str	r1, [sp, #4]
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	4622      	mov	r2, r4
 80021e6:	4601      	mov	r1, r0
 80021e8:	f107 0010 	add.w	r0, r7, #16
 80021ec:	f007 f8d4 	bl	8009398 <HAL_I2C_Mem_Read>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <DS3231_readByte+0x60>)
 80021f6:	701a      	strb	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	3704      	adds	r7, #4
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002202:	b004      	add	sp, #16
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000561 	.word	0x20000561

0800220c <BCD2DEC>:

uint8_t BCD2DEC(uint8_t data)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	return (data >> 4)*10 + (data & 0x0F);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4413      	add	r3, r2
 8002230:	b2db      	uxtb	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <DS3231_getTime>:
{
	return ((data/10) << 4) | (data % 10);
}

void DS3231_getTime()
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b099      	sub	sp, #100	; 0x64
 8002244:	af16      	add	r7, sp, #88	; 0x58
	uint8_t buffer[7];
	DS3231_readByte(hi2c1,DS3231_ADDRESS,DS3231_TIME_CAL,buffer,7);
 8002246:	4c28      	ldr	r4, [pc, #160]	; (80022e8 <DS3231_getTime+0xa8>)
 8002248:	2307      	movs	r3, #7
 800224a:	9314      	str	r3, [sp, #80]	; 0x50
 800224c:	463b      	mov	r3, r7
 800224e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002250:	2300      	movs	r3, #0
 8002252:	9312      	str	r3, [sp, #72]	; 0x48
 8002254:	2368      	movs	r3, #104	; 0x68
 8002256:	9311      	str	r3, [sp, #68]	; 0x44
 8002258:	4668      	mov	r0, sp
 800225a:	f104 0310 	add.w	r3, r4, #16
 800225e:	2244      	movs	r2, #68	; 0x44
 8002260:	4619      	mov	r1, r3
 8002262:	f00e f85d 	bl	8010320 <memcpy>
 8002266:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800226a:	f7ff ff9d 	bl	80021a8 <DS3231_readByte>
	
	rtc.sec  = BCD2DEC(buffer[0]);
 800226e:	783b      	ldrb	r3, [r7, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ffcb 	bl	800220c <BCD2DEC>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <DS3231_getTime+0xac>)
 800227c:	701a      	strb	r2, [r3, #0]
	rtc.min  = BCD2DEC(buffer[1]);
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ffc3 	bl	800220c <BCD2DEC>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <DS3231_getTime+0xac>)
 800228c:	705a      	strb	r2, [r3, #1]
	rtc.hour = BCD2DEC(buffer[2]);
 800228e:	78bb      	ldrb	r3, [r7, #2]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ffbb 	bl	800220c <BCD2DEC>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <DS3231_getTime+0xac>)
 800229c:	709a      	strb	r2, [r3, #2]
	rtc.dayofweek = BCD2DEC(buffer[3]);
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ffb3 	bl	800220c <BCD2DEC>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <DS3231_getTime+0xac>)
 80022ac:	719a      	strb	r2, [r3, #6]
	rtc.day   = BCD2DEC(buffer[4]);
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ffab 	bl	800220c <BCD2DEC>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <DS3231_getTime+0xac>)
 80022bc:	715a      	strb	r2, [r3, #5]
	rtc.month = BCD2DEC(buffer[5]);
 80022be:	797b      	ldrb	r3, [r7, #5]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ffa3 	bl	800220c <BCD2DEC>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <DS3231_getTime+0xac>)
 80022cc:	711a      	strb	r2, [r3, #4]
	rtc.year  = BCD2DEC(buffer[6]);
 80022ce:	79bb      	ldrb	r3, [r7, #6]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff9b 	bl	800220c <BCD2DEC>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <DS3231_getTime+0xac>)
 80022dc:	70da      	strb	r2, [r3, #3]
	
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000850 	.word	0x20000850
 80022ec:	20000564 	.word	0x20000564

080022f0 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	80fb      	strh	r3, [r7, #6]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	2b3f      	cmp	r3, #63	; 0x3f
 8002308:	dc01      	bgt.n	800230e <bytestowrite+0x1e>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	e003      	b.n	8002316 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002314:	b29b      	uxth	r3, r3
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af04      	add	r7, sp, #16
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	81fb      	strh	r3, [r7, #14]
 8002332:	460b      	mov	r3, r1
 8002334:	81bb      	strh	r3, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 800233a:	2306      	movs	r3, #6
 800233c:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	da00      	bge.n	800234e <EEPROM_Write+0x2a>
 800234c:	333f      	adds	r3, #63	; 0x3f
 800234e:	119b      	asrs	r3, r3, #6
 8002350:	b29a      	uxth	r2, r3
 8002352:	89fb      	ldrh	r3, [r7, #14]
 8002354:	4413      	add	r3, r2
 8002356:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8002358:	8b7a      	ldrh	r2, [r7, #26]
 800235a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	b29b      	uxth	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8002364:	2300      	movs	r3, #0
 8002366:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	e034      	b.n	80023d8 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800236e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8002382:	89ba      	ldrh	r2, [r7, #12]
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ffb1 	bl	80022f0 <bytestowrite>
 800238e:	4603      	mov	r3, r0
 8002390:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8002392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	8af9      	ldrh	r1, [r7, #22]
 800239a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800239e:	9202      	str	r2, [sp, #8]
 80023a0:	8aba      	ldrh	r2, [r7, #20]
 80023a2:	9201      	str	r2, [sp, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2302      	movs	r3, #2
 80023a8:	460a      	mov	r2, r1
 80023aa:	21a0      	movs	r1, #160	; 0xa0
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <EEPROM_Write+0xc8>)
 80023ae:	f006 fef9 	bl	80091a4 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80023b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023b4:	3301      	adds	r3, #1
 80023b6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80023b8:	2300      	movs	r3, #0
 80023ba:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	8abb      	ldrh	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80023c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023c6:	8abb      	ldrh	r3, [r7, #20]
 80023c8:	4413      	add	r3, r2
 80023ca:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80023cc:	2005      	movs	r0, #5
 80023ce:	f004 ff73 	bl	80072b8 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	3301      	adds	r3, #1
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	8b3b      	ldrh	r3, [r7, #24]
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbc6      	blt.n	800236e <EEPROM_Write+0x4a>
	}
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200008a4 	.word	0x200008a4

080023f0 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e00c      	b.n	8002420 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	440b      	add	r3, r1
 800240e:	f107 0110 	add.w	r1, r7, #16
 8002412:	440a      	add	r2, r1
 8002414:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002418:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	3301      	adds	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d9ef      	bls.n	8002406 <float2Bytes+0x16>
    }

}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	e00c      	b.n	800245c <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	441a      	add	r2, r3
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	f107 0118 	add.w	r1, r7, #24
 8002450:	440b      	add	r3, r1
 8002452:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	3301      	adds	r3, #1
 800245a:	75fb      	strb	r3, [r7, #23]
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d9ef      	bls.n	8002442 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	613b      	str	r3, [r7, #16]
   return float_variable;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	ee07 3a90 	vmov	s15, r3
}
 800246c:	eeb0 0a67 	vmov.f32	s0, s15
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	460a      	mov	r2, r1
 8002486:	ed87 0a00 	vstr	s0, [r7]
 800248a:	80fb      	strh	r3, [r7, #6]
 800248c:	4613      	mov	r3, r2
 800248e:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8002490:	ed97 0a00 	vldr	s0, [r7]
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <EEPROM_Write_NUM+0x34>)
 8002496:	f7ff ffab 	bl	80023f0 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 800249a:	88b9      	ldrh	r1, [r7, #4]
 800249c:	88f8      	ldrh	r0, [r7, #6]
 800249e:	2304      	movs	r3, #4
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <EEPROM_Write_NUM+0x34>)
 80024a2:	f7ff ff3f 	bl	8002324 <EEPROM_Write>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000056c 	.word	0x2000056c

080024b4 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	88b9      	ldrh	r1, [r7, #4]
 80024ca:	88f8      	ldrh	r0, [r7, #6]
 80024cc:	2304      	movs	r3, #4
 80024ce:	f000 f80d 	bl	80024ec <EEPROM_Read>

	return (Bytes2float(buffer));
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffac 	bl	8002434 <Bytes2float>
 80024dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af04      	add	r7, sp, #16
 80024f2:	60ba      	str	r2, [r7, #8]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	81fb      	strh	r3, [r7, #14]
 80024fa:	460b      	mov	r3, r1
 80024fc:	81bb      	strh	r3, [r7, #12]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002502:	2306      	movs	r3, #6
 8002504:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8002506:	89fb      	ldrh	r3, [r7, #14]
 8002508:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	89bb      	ldrh	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	da00      	bge.n	8002516 <EEPROM_Read+0x2a>
 8002514:	333f      	adds	r3, #63	; 0x3f
 8002516:	119b      	asrs	r3, r3, #6
 8002518:	b29a      	uxth	r2, r3
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	4413      	add	r3, r2
 800251e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8002520:	8b7a      	ldrh	r2, [r7, #26]
 8002522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	b29b      	uxth	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800252c:	2300      	movs	r3, #0
 800252e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	e031      	b.n	800259a <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8002536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	b21a      	sxth	r2, r3
 8002540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	b21b      	sxth	r3, r3
 8002548:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800254a:	89ba      	ldrh	r2, [r7, #12]
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fecd 	bl	80022f0 <bytestowrite>
 8002556:	4603      	mov	r3, r0
 8002558:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800255a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4413      	add	r3, r2
 8002560:	8af9      	ldrh	r1, [r7, #22]
 8002562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002566:	9202      	str	r2, [sp, #8]
 8002568:	8aba      	ldrh	r2, [r7, #20]
 800256a:	9201      	str	r2, [sp, #4]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2302      	movs	r3, #2
 8002570:	460a      	mov	r2, r1
 8002572:	21a0      	movs	r1, #160	; 0xa0
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <EEPROM_Read+0xc0>)
 8002576:	f006 ff0f 	bl	8009398 <HAL_I2C_Mem_Read>
		startPage += 1;
 800257a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800257c:	3301      	adds	r3, #1
 800257e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8002580:	2300      	movs	r3, #0
 8002582:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	8abb      	ldrh	r3, [r7, #20]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800258c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800258e:	8abb      	ldrh	r3, [r7, #20]
 8002590:	4413      	add	r3, r2
 8002592:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	3301      	adds	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	8b3b      	ldrh	r3, [r7, #24]
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbc9      	blt.n	8002536 <EEPROM_Read+0x4a>
	}
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200008a4 	.word	0x200008a4

080025b0 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b098      	sub	sp, #96	; 0x60
 80025b4:	af04      	add	r7, sp, #16
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80025ba:	2306      	movs	r3, #6
 80025bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	21ff      	movs	r1, #255	; 0xff
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00d feb2 	bl	801033c <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80025d8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2302      	movs	r3, #2
 80025ee:	21a0      	movs	r1, #160	; 0xa0
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <EEPROM_PageErase+0x54>)
 80025f2:	f006 fdd7 	bl	80091a4 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80025f6:	2005      	movs	r0, #5
 80025f8:	f004 fe5e 	bl	80072b8 <HAL_Delay>
}
 80025fc:	bf00      	nop
 80025fe:	3750      	adds	r7, #80	; 0x50
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200008a4 	.word	0x200008a4

08002608 <convertDegMinToDecDeg>:
char * str;
GPS_t hgps;
extern uint8_t RAW_GPS[512];

double convertDegMinToDecDeg (float degMin)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fd ff94 	bl	8000558 <__aeabi_f2d>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80026a0 <convertDegMinToDecDeg+0x98>
 8002638:	ec43 2b10 	vmov	d0, r2, r3
 800263c:	f012 ff24 	bl	8015488 <fmod>
 8002640:	ed87 0b04 	vstr	d0, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8002644:	ed97 7a01 	vldr	s14, [r7, #4]
 8002648:	eddf 6a17 	vldr	s13, [pc, #92]	; 80026a8 <convertDegMinToDecDeg+0xa0>
 800264c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002658:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fd ff7b 	bl	8000558 <__aeabi_f2d>
 8002662:	4604      	mov	r4, r0
 8002664:	460d      	mov	r5, r1
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <convertDegMinToDecDeg+0xa4>)
 800266c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002670:	f7fe f8f4 	bl	800085c <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd fe0e 	bl	800029c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  return decDeg;
 8002688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800268c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002690:	eeb0 0a47 	vmov.f32	s0, s14
 8002694:	eef0 0a67 	vmov.f32	s1, s15
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bdb0      	pop	{r4, r5, r7, pc}
 800269e:	bf00      	nop
 80026a0:	00000000 	.word	0x00000000
 80026a4:	40590000 	.word	0x40590000
 80026a8:	42c80000 	.word	0x42c80000
 80026ac:	404e0000 	.word	0x404e0000

080026b0 <GPS_Process>:

//$GNGGA,173055.00,3952.20392,N,03244.08852,E,1,06,1.71,1035.5,M,36.0,M,88,01,005,*6C

void GPS_Process(char * nmea_sentence)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b090      	sub	sp, #64	; 0x40
 80026b4:	af0e      	add	r7, sp, #56	; 0x38
 80026b6:	6078      	str	r0, [r7, #4]
	
	// Finds the first occurence of the '"$GPGGA,' string
	str = strstr(RAW_GPS,"$GNGGA,");
 80026b8:	493b      	ldr	r1, [pc, #236]	; (80027a8 <GPS_Process+0xf8>)
 80026ba:	483c      	ldr	r0, [pc, #240]	; (80027ac <GPS_Process+0xfc>)
 80026bc:	f00e fd8b 	bl	80111d6 <strstr>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <GPS_Process+0x100>)
 80026c4:	6013      	str	r3, [r2, #0]
	if(str!=NULL)
 80026c6:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <GPS_Process+0x100>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d062      	beq.n	8002794 <GPS_Process+0xe4>
	{
		//memset(&hgps.GPGGA,0,sizeof(hgps.GPGGA));	
		sscanf(str,"$GNGGA,%2d%2d%2d.%2d,%f,%c,%f,%c,%d,%d,%f,%f,%c,%d,%s,*%2s\r\n",
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <GPS_Process+0x100>)
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <GPS_Process+0x104>)
 80026d4:	930d      	str	r3, [sp, #52]	; 0x34
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <GPS_Process+0x108>)
 80026d8:	930c      	str	r3, [sp, #48]	; 0x30
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <GPS_Process+0x10c>)
 80026dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <GPS_Process+0x110>)
 80026e0:	930a      	str	r3, [sp, #40]	; 0x28
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <GPS_Process+0x114>)
 80026e4:	9309      	str	r3, [sp, #36]	; 0x24
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <GPS_Process+0x118>)
 80026e8:	9308      	str	r3, [sp, #32]
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <GPS_Process+0x11c>)
 80026ec:	9307      	str	r3, [sp, #28]
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <GPS_Process+0x120>)
 80026f0:	9306      	str	r3, [sp, #24]
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <GPS_Process+0x124>)
 80026f4:	9305      	str	r3, [sp, #20]
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <GPS_Process+0x128>)
 80026f8:	9304      	str	r3, [sp, #16]
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <GPS_Process+0x12c>)
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <GPS_Process+0x130>)
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <GPS_Process+0x134>)
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <GPS_Process+0x138>)
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <GPS_Process+0x13c>)
 800270c:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <GPS_Process+0x140>)
 800270e:	4939      	ldr	r1, [pc, #228]	; (80027f4 <GPS_Process+0x144>)
 8002710:	f00e fcf0 	bl	80110f4 <siscanf>
				&hgps.GPGGA.UTC_Hour,&hgps.GPGGA.UTC_Min,&hgps.GPGGA.UTC_Sec,&hgps.GPGGA.UTC_MicroSec,
					&hgps.GPGGA.Latitude,&hgps.GPGGA.NS_Indicator,&hgps.GPGGA.Longitude,&hgps.GPGGA.EW_Indicator,
						&hgps.GPGGA.PositionFixIndicator,&hgps.GPGGA.SatellitesUsed,&hgps.GPGGA.HDOP,&hgps.GPGGA.MSL_Altitude,
							&hgps.GPGGA.MSL_Units,&hgps.GPGGA.AgeofDiffCorr,hgps.GPGGA.DiffRefStationID,hgps.GPGGA.CheckSum);

		if(hgps.GPGGA.NS_Indicator==0) hgps.GPGGA.NS_Indicator='-';
 8002714:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <GPS_Process+0x148>)
 8002716:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <GPS_Process+0x76>
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <GPS_Process+0x148>)
 8002720:	222d      	movs	r2, #45	; 0x2d
 8002722:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
		if(hgps.GPGGA.EW_Indicator==0) hgps.GPGGA.EW_Indicator='-';
 8002726:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <GPS_Process+0x148>)
 8002728:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <GPS_Process+0x88>
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <GPS_Process+0x148>)
 8002732:	222d      	movs	r2, #45	; 0x2d
 8002734:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
		if(hgps.GPGGA.Geoid_Units==0)  hgps.GPGGA.Geoid_Units='-';
 8002738:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <GPS_Process+0x148>)
 800273a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <GPS_Process+0x9a>
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <GPS_Process+0x148>)
 8002744:	222d      	movs	r2, #45	; 0x2d
 8002746:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		if(hgps.GPGGA.MSL_Units==0)    hgps.GPGGA.MSL_Units='-';
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <GPS_Process+0x148>)
 800274c:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <GPS_Process+0xac>
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <GPS_Process+0x148>)
 8002756:	222d      	movs	r2, #45	; 0x2d
 8002758:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		
		hgps.GPGGA.LatitudeDecimal  = convertDegMinToDecDeg(hgps.GPGGA.Latitude);
 800275c:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <GPS_Process+0x148>)
 800275e:	edd3 7a84 	vldr	s15, [r3, #528]	; 0x210
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f7ff ff4f 	bl	8002608 <convertDegMinToDecDeg>
 800276a:	eeb0 7a40 	vmov.f32	s14, s0
 800276e:	eef0 7a60 	vmov.f32	s15, s1
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <GPS_Process+0x148>)
 8002774:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
		hgps.GPGGA.LongitudeDecimal = convertDegMinToDecDeg(hgps.GPGGA.Longitude);
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <GPS_Process+0x148>)
 800277a:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f7ff ff41 	bl	8002608 <convertDegMinToDecDeg>
 8002786:	eeb0 7a40 	vmov.f32	s14, s0
 800278a:	eef0 7a60 	vmov.f32	s15, s1
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <GPS_Process+0x148>)
 8002790:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
	}
	memset(hgps.rxBuffer,0,sizeof(hgps.rxBuffer));
 8002794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002798:	2100      	movs	r1, #0
 800279a:	4817      	ldr	r0, [pc, #92]	; (80027f8 <GPS_Process+0x148>)
 800279c:	f00d fdce 	bl	801033c <memset>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	08016c30 	.word	0x08016c30
 80027ac:	20002e10 	.word	0x20002e10
 80027b0:	200007c0 	.word	0x200007c0
 80027b4:	200007bc 	.word	0x200007bc
 80027b8:	200007b8 	.word	0x200007b8
 80027bc:	200007b6 	.word	0x200007b6
 80027c0:	200007ac 	.word	0x200007ac
 80027c4:	200007a8 	.word	0x200007a8
 80027c8:	200007a4 	.word	0x200007a4
 80027cc:	200007a2 	.word	0x200007a2
 80027d0:	200007a1 	.word	0x200007a1
 80027d4:	200007a0 	.word	0x200007a0
 80027d8:	20000794 	.word	0x20000794
 80027dc:	20000790 	.word	0x20000790
 80027e0:	20000780 	.word	0x20000780
 80027e4:	2000077c 	.word	0x2000077c
 80027e8:	2000077a 	.word	0x2000077a
 80027ec:	20000779 	.word	0x20000779
 80027f0:	20000778 	.word	0x20000778
 80027f4:	08016c38 	.word	0x08016c38
 80027f8:	20000570 	.word	0x20000570

080027fc <MS5611_read_temp>:

/*
 * reading raw temperature of the sensor
 */
uint8_t MS5611_read_temp()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af02      	add	r7, sp, #8
	uint8_t reg = MS6511_ADC_READ;
 8002802:	2300      	movs	r3, #0
 8002804:	73bb      	strb	r3, [r7, #14]
	uint8_t data[5];
	uint8_t cmd;
	uint8_t conv_T;
	cmd = MS5611_CMD_CONVERT_D2_4096; conv_T = 9;
 8002806:	2358      	movs	r3, #88	; 0x58
 8002808:	71fb      	strb	r3, [r7, #7]
 800280a:	2309      	movs	r3, #9
 800280c:	73fb      	strb	r3, [r7, #15]


	HAL_I2C_Master_Transmit(&hi2c1, MS5611_SLAVE_ADDR, &cmd, 1, 100);
 800280e:	1dfa      	adds	r2, r7, #7
 8002810:	2364      	movs	r3, #100	; 0x64
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2301      	movs	r3, #1
 8002816:	21ee      	movs	r1, #238	; 0xee
 8002818:	4813      	ldr	r0, [pc, #76]	; (8002868 <MS5611_read_temp+0x6c>)
 800281a:	f006 f99f 	bl	8008b5c <HAL_I2C_Master_Transmit>
	//while(HAL_I2C_Master_Transmit(&hi2c1, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
	HAL_Delay(conv_T); 														//convertion time
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	4618      	mov	r0, r3
 8002822:	f004 fd49 	bl	80072b8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_SLAVE_ADDR, &reg, 1, 100);
 8002826:	f107 020e 	add.w	r2, r7, #14
 800282a:	2364      	movs	r3, #100	; 0x64
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	21ee      	movs	r1, #238	; 0xee
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <MS5611_read_temp+0x6c>)
 8002834:	f006 f992 	bl	8008b5c <HAL_I2C_Master_Transmit>
	//while(HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, 100) != HAL_OK);//asking for the data
	HAL_I2C_Master_Receive(&hi2c1, MS5611_SLAVE_ADDR, data, 3, 100);
 8002838:	f107 0208 	add.w	r2, r7, #8
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2303      	movs	r3, #3
 8002842:	21ee      	movs	r1, #238	; 0xee
 8002844:	4808      	ldr	r0, [pc, #32]	; (8002868 <MS5611_read_temp+0x6c>)
 8002846:	f006 fa87 	bl	8008d58 <HAL_I2C_Master_Receive>
	//while(HAL_I2C_Master_Receive(&hi2c1, address, data, 3, 100) != HAL_OK);//receive the data

	ms5611_t.D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 800284a:	7a3b      	ldrb	r3, [r7, #8]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	7a7b      	ldrb	r3, [r7, #9]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4313      	orrs	r3, r2
 8002854:	7aba      	ldrb	r2, [r7, #10]
 8002856:	4313      	orrs	r3, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <MS5611_read_temp+0x70>)
 800285c:	619a      	str	r2, [r3, #24]
	return MS5611_OK;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000850 	.word	0x20000850
 800286c:	200007c8 	.word	0x200007c8

08002870 <MS5611_read_press>:

/*
 * reading raw pressure of the sensor
 */
uint8_t MS5611_read_press ()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af02      	add	r7, sp, #8

	uint8_t address = ms5611_t.adress;
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <MS5611_read_press+0x78>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg = MS6511_ADC_READ;
 800287c:	2300      	movs	r3, #0
 800287e:	737b      	strb	r3, [r7, #13]
	uint8_t data[3];
	uint8_t cmd;
	uint8_t conv_T;
	cmd = MS5611_CMD_CONVERT_D1_4096; conv_T = 9;
 8002880:	2348      	movs	r3, #72	; 0x48
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	2309      	movs	r3, #9
 8002886:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, address, &cmd, 1, 100);
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	b299      	uxth	r1, r3
 800288c:	1dfa      	adds	r2, r7, #7
 800288e:	2364      	movs	r3, #100	; 0x64
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2301      	movs	r3, #1
 8002894:	4815      	ldr	r0, [pc, #84]	; (80028ec <MS5611_read_press+0x7c>)
 8002896:	f006 f961 	bl	8008b5c <HAL_I2C_Master_Transmit>


	//while(HAL_I2C_Master_Transmit(&hi2c1, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
	HAL_Delay(conv_T); 														//convertion time
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 fd0b 	bl	80072b8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, 100);
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	b299      	uxth	r1, r3
 80028a6:	f107 020d 	add.w	r2, r7, #13
 80028aa:	2364      	movs	r3, #100	; 0x64
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2301      	movs	r3, #1
 80028b0:	480e      	ldr	r0, [pc, #56]	; (80028ec <MS5611_read_press+0x7c>)
 80028b2:	f006 f953 	bl	8008b5c <HAL_I2C_Master_Transmit>
	//while(HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, 100) != HAL_OK);//asking for the data
	HAL_I2C_Master_Receive(&hi2c1, address, data, 3, 100);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	b299      	uxth	r1, r3
 80028ba:	f107 0208 	add.w	r2, r7, #8
 80028be:	2364      	movs	r3, #100	; 0x64
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2303      	movs	r3, #3
 80028c4:	4809      	ldr	r0, [pc, #36]	; (80028ec <MS5611_read_press+0x7c>)
 80028c6:	f006 fa47 	bl	8008d58 <HAL_I2C_Master_Receive>
	//while(HAL_I2C_Master_Receive(&hi2c1, address, data, 3, 100) != HAL_OK);//receive the data

	ms5611_t.D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 80028ca:	7a3b      	ldrb	r3, [r7, #8]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	7a7b      	ldrb	r3, [r7, #9]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	4313      	orrs	r3, r2
 80028d4:	7aba      	ldrb	r2, [r7, #10]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <MS5611_read_press+0x78>)
 80028dc:	615a      	str	r2, [r3, #20]
	return MS5611_OK;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200007c8 	.word	0x200007c8
 80028ec:	20000850 	.word	0x20000850

080028f0 <MS5611_calculate>:

/*
 * pressure and temperature calculation
 */
uint8_t MS5611_calculate()
{
 80028f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028f4:	b0b8      	sub	sp, #224	; 0xe0
 80028f6:	af00      	add	r7, sp, #0
	int64_t dT = 0,TEMP = 0,T2 = 0,OFF = 0,OFF2 = 0,SENS2 = 0,SENS = 0,PRES = 0;
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

	dT = ms5611_t.D[1] - ((int32_t) (ms5611_t.C[4])<<8);
 8002958:	4b9f      	ldr	r3, [pc, #636]	; (8002bd8 <MS5611_calculate+0x2e8>)
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	4b9e      	ldr	r3, [pc, #632]	; (8002bd8 <MS5611_calculate+0x2e8>)
 800295e:	895b      	ldrh	r3, [r3, #10]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	461a      	mov	r2, r3
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	TEMP = 2000 + ((int32_t) (dT*(ms5611_t.C[5]))>>23);
 800296e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002972:	4b99      	ldr	r3, [pc, #612]	; (8002bd8 <MS5611_calculate+0x2e8>)
 8002974:	899b      	ldrh	r3, [r3, #12]
 8002976:	fb03 f302 	mul.w	r3, r3, r2
 800297a:	15db      	asrs	r3, r3, #23
 800297c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002980:	461a      	mov	r2, r3
 8002982:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002986:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFF = (((int64_t)(ms5611_t.C[1])) << 16) + (((ms5611_t.C[3]) * dT) >> 7);
 800298a:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <MS5611_calculate+0x2e8>)
 800298c:	889b      	ldrh	r3, [r3, #4]
 800298e:	b29a      	uxth	r2, r3
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8002998:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800299c:	4b8e      	ldr	r3, [pc, #568]	; (8002bd8 <MS5611_calculate+0x2e8>)
 800299e:	891b      	ldrh	r3, [r3, #8]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80029aa:	fb03 f001 	mul.w	r0, r3, r1
 80029ae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80029b2:	fb02 f101 	mul.w	r1, r2, r1
 80029b6:	1844      	adds	r4, r0, r1
 80029b8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80029bc:	fba1 0102 	umull	r0, r1, r1, r2
 80029c0:	1863      	adds	r3, r4, r1
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	09c2      	lsrs	r2, r0, #7
 80029ce:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80029d2:	11cb      	asrs	r3, r1, #7
 80029d4:	eb18 0102 	adds.w	r1, r8, r2
 80029d8:	6339      	str	r1, [r7, #48]	; 0x30
 80029da:	eb49 0303 	adc.w	r3, r9, r3
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
 80029e0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80029e4:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS = (((int64_t)(ms5611_t.C[0])) << 15) + (((ms5611_t.C[2]) * dT) >> 8);
 80029e8:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <MS5611_calculate+0x2e8>)
 80029ea:	885b      	ldrh	r3, [r3, #2]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f04f 0800 	mov.w	r8, #0
 80029f6:	f04f 0900 	mov.w	r9, #0
 80029fa:	ea4f 39c3 	mov.w	r9, r3, lsl #15
 80029fe:	ea49 4952 	orr.w	r9, r9, r2, lsr #17
 8002a02:	ea4f 38c2 	mov.w	r8, r2, lsl #15
 8002a06:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <MS5611_calculate+0x2e8>)
 8002a08:	88db      	ldrh	r3, [r3, #6]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002a14:	fb03 f001 	mul.w	r0, r3, r1
 8002a18:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002a1c:	fb02 f101 	mul.w	r1, r2, r1
 8002a20:	1844      	adds	r4, r0, r1
 8002a22:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002a26:	fba1 0102 	umull	r0, r1, r1, r2
 8002a2a:	1863      	adds	r3, r4, r1
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	0a02      	lsrs	r2, r0, #8
 8002a38:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a3c:	120b      	asrs	r3, r1, #8
 8002a3e:	eb18 0102 	adds.w	r1, r8, r2
 8002a42:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a44:	eb49 0303 	adc.w	r3, r9, r3
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002a4e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8



	if(TEMP < 2000) {
 8002a52:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002a56:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	4282      	cmp	r2, r0
 8002a60:	418b      	sbcs	r3, r1
 8002a62:	f2c0 8171 	blt.w	8002d48 <MS5611_calculate+0x458>
		T2 = ( dT*dT )>>31;
 8002a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a6e:	fb03 f102 	mul.w	r1, r3, r2
 8002a72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a7a:	fb03 f302 	mul.w	r3, r3, r2
 8002a7e:	18ca      	adds	r2, r1, r3
 8002a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a84:	fba3 0103 	umull	r0, r1, r3, r3
 8002a88:	1853      	adds	r3, r2, r1
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	0fc2      	lsrs	r2, r0, #31
 8002a96:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002a9a:	17cb      	asrs	r3, r1, #31
 8002a9c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8002aa0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002aa4:	f5b2 65fa 	subs.w	r5, r2, #2000	; 0x7d0
 8002aa8:	f143 36ff 	adc.w	r6, r3, #4294967295
 8002aac:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002ab0:	f5b2 6afa 	subs.w	sl, r2, #2000	; 0x7d0
 8002ab4:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002ab8:	fb0a f206 	mul.w	r2, sl, r6
 8002abc:	fb05 f30b 	mul.w	r3, r5, fp
 8002ac0:	4413      	add	r3, r2
 8002ac2:	fba5 450a 	umull	r4, r5, r5, sl
 8002ac6:	442b      	add	r3, r5
 8002ac8:	461d      	mov	r5, r3
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002adc:	0090      	lsls	r0, r2, #2
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	1911      	adds	r1, r2, r4
 8002ae4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002ae8:	416b      	adcs	r3, r5
 8002aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aee:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002af2:	462b      	mov	r3, r5
 8002af4:	0fdb      	lsrs	r3, r3, #31
 8002af6:	461a      	mov	r2, r3
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	4621      	mov	r1, r4
 8002afe:	1851      	adds	r1, r2, r1
 8002b00:	6239      	str	r1, [r7, #32]
 8002b02:	4629      	mov	r1, r5
 8002b04:	eb43 0101 	adc.w	r1, r3, r1
 8002b08:	6279      	str	r1, [r7, #36]	; 0x24
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b16:	4621      	mov	r1, r4
 8002b18:	084a      	lsrs	r2, r1, #1
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002b20:	4629      	mov	r1, r5
 8002b22:	104b      	asrs	r3, r1, #1
 8002b24:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 8002b28:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002b2c:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8002b30:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8002b34:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b3c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002b40:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8002b44:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002b48:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002b4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b50:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002b54:	4623      	mov	r3, r4
 8002b56:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002b5a:	464a      	mov	r2, r9
 8002b5c:	fb03 f202 	mul.w	r2, r3, r2
 8002b60:	4643      	mov	r3, r8
 8002b62:	4629      	mov	r1, r5
 8002b64:	fb03 f301 	mul.w	r3, r3, r1
 8002b68:	4413      	add	r3, r2
 8002b6a:	4642      	mov	r2, r8
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	fba2 4501 	umull	r4, r5, r2, r1
 8002b72:	442b      	add	r3, r5
 8002b74:	461d      	mov	r5, r3
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0099      	lsls	r1, r3, #2
 8002b84:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b88:	0090      	lsls	r0, r2, #2
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	1911      	adds	r1, r2, r4
 8002b90:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002b94:	416b      	adcs	r3, r5
 8002b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b9a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	f173 0100 	sbcs.w	r1, r3, #0
 8002ba4:	da02      	bge.n	8002bac <MS5611_calculate+0x2bc>
 8002ba6:	3203      	adds	r2, #3
 8002ba8:	f143 0300 	adc.w	r3, r3, #0
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	0890      	lsrs	r0, r2, #2
 8002bb6:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8002bba:	1099      	asrs	r1, r3, #2
 8002bbc:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8


		if (TEMP < -1500) {
 8002bc0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <MS5611_calculate+0x2ec>)
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	4290      	cmp	r0, r2
 8002bcc:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bd0:	f280 80cc 	bge.w	8002d6c <MS5611_calculate+0x47c>
 8002bd4:	e004      	b.n	8002be0 <MS5611_calculate+0x2f0>
 8002bd6:	bf00      	nop
 8002bd8:	200007c8 	.word	0x200007c8
 8002bdc:	fffffa24 	.word	0xfffffa24
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 8002be0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002be4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	1884      	adds	r4, r0, r2
 8002bee:	67bc      	str	r4, [r7, #120]	; 0x78
 8002bf0:	eb41 0303 	adc.w	r3, r1, r3
 8002bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bf6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002bfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	1884      	adds	r4, r0, r2
 8002c04:	673c      	str	r4, [r7, #112]	; 0x70
 8002c06:	eb41 0303 	adc.w	r3, r1, r3
 8002c0a:	677b      	str	r3, [r7, #116]	; 0x74
 8002c0c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002c10:	4623      	mov	r3, r4
 8002c12:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c16:	464a      	mov	r2, r9
 8002c18:	fb03 f202 	mul.w	r2, r3, r2
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	4629      	mov	r1, r5
 8002c20:	fb03 f301 	mul.w	r3, r3, r1
 8002c24:	4413      	add	r3, r2
 8002c26:	4642      	mov	r2, r8
 8002c28:	4621      	mov	r1, r4
 8002c2a:	fba2 4501 	umull	r4, r5, r2, r1
 8002c2e:	442b      	add	r3, r5
 8002c30:	461d      	mov	r5, r3
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	00d9      	lsls	r1, r3, #3
 8002c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c44:	00d0      	lsls	r0, r2, #3
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	1b11      	subs	r1, r2, r4
 8002c4c:	66b9      	str	r1, [r7, #104]	; 0x68
 8002c4e:	eb63 0305 	sbc.w	r3, r3, r5
 8002c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c54:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002c58:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	61b9      	str	r1, [r7, #24]
 8002c62:	4629      	mov	r1, r5
 8002c64:	eb43 0101 	adc.w	r1, r3, r1
 8002c68:	61f9      	str	r1, [r7, #28]
 8002c6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002c6e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 8002c72:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002c76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	1884      	adds	r4, r0, r2
 8002c80:	663c      	str	r4, [r7, #96]	; 0x60
 8002c82:	eb41 0303 	adc.w	r3, r1, r3
 8002c86:	667b      	str	r3, [r7, #100]	; 0x64
 8002c88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002c8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	1884      	adds	r4, r0, r2
 8002c96:	65bc      	str	r4, [r7, #88]	; 0x58
 8002c98:	eb41 0303 	adc.w	r3, r1, r3
 8002c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c9e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ca8:	464a      	mov	r2, r9
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	4643      	mov	r3, r8
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	fb03 f301 	mul.w	r3, r3, r1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4642      	mov	r2, r8
 8002cba:	4621      	mov	r1, r4
 8002cbc:	fba2 4501 	umull	r4, r5, r2, r1
 8002cc0:	442b      	add	r3, r5
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	1891      	adds	r1, r2, r2
 8002cca:	6139      	str	r1, [r7, #16]
 8002ccc:	415b      	adcs	r3, r3
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd4:	1912      	adds	r2, r2, r4
 8002cd6:	eb45 0303 	adc.w	r3, r5, r3
 8002cda:	f04f 0000 	mov.w	r0, #0
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	0099      	lsls	r1, r3, #2
 8002ce4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ce8:	0090      	lsls	r0, r2, #2
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	1b11      	subs	r1, r2, r4
 8002cf0:	6539      	str	r1, [r7, #80]	; 0x50
 8002cf2:	eb63 0305 	sbc.w	r3, r3, r5
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	0fdb      	lsrs	r3, r3, #31
 8002d00:	461a      	mov	r2, r3
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	4621      	mov	r1, r4
 8002d08:	1851      	adds	r1, r2, r1
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	eb43 0101 	adc.w	r1, r3, r1
 8002d12:	60f9      	str	r1, [r7, #12]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d20:	4621      	mov	r1, r4
 8002d22:	084a      	lsrs	r2, r1, #1
 8002d24:	4629      	mov	r1, r5
 8002d26:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	104b      	asrs	r3, r1, #1
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002d36:	1814      	adds	r4, r2, r0
 8002d38:	603c      	str	r4, [r7, #0]
 8002d3a:	414b      	adcs	r3, r1
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d42:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 8002d46:	e011      	b.n	8002d6c <MS5611_calculate+0x47c>
		}
	}
	else {
		T2 = 0;
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		OFF2 = 0;
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		SENS2 = 0;
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	}

	ms5611_t.dT = dT;
 8002d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d70:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <MS5611_calculate+0x544>)
 8002d72:	61d3      	str	r3, [r2, #28]
	ms5611_t.OFF = OFF - OFF2;
 8002d74:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d78:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002d7c:	1a84      	subs	r4, r0, r2
 8002d7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d80:	eb61 0303 	sbc.w	r3, r1, r3
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <MS5611_calculate+0x544>)
 8002d88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002d8c:	e9c3 1208 	strd	r1, r2, [r3, #32]
	ms5611_t.TEMP = TEMP - T2;
 8002d90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <MS5611_calculate+0x544>)
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
	ms5611_t.SENS = SENS - SENS2;
 8002da0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002da4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002da8:	1a84      	subs	r4, r0, r2
 8002daa:	643c      	str	r4, [r7, #64]	; 0x40
 8002dac:	eb61 0303 	sbc.w	r3, r1, r3
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <MS5611_calculate+0x544>)
 8002db4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002db8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	PRES = ((((int32_t)(ms5611_t.D[0]) * (ms5611_t.SENS))>>21) - (ms5611_t.OFF))>>15;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <MS5611_calculate+0x544>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <MS5611_calculate+0x544>)
 8002dc8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002dcc:	fb02 f501 	mul.w	r5, r2, r1
 8002dd0:	fb00 f403 	mul.w	r4, r0, r3
 8002dd4:	442c      	add	r4, r5
 8002dd6:	fba0 0102 	umull	r0, r1, r0, r2
 8002dda:	1863      	adds	r3, r4, r1
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	0d42      	lsrs	r2, r0, #21
 8002de8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8002dec:	154b      	asrs	r3, r1, #21
 8002dee:	4911      	ldr	r1, [pc, #68]	; (8002e34 <MS5611_calculate+0x544>)
 8002df0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8002df4:	1a14      	subs	r4, r2, r0
 8002df6:	63bc      	str	r4, [r7, #56]	; 0x38
 8002df8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	0bca      	lsrs	r2, r1, #15
 8002e0e:	4629      	mov	r1, r5
 8002e10:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002e14:	4629      	mov	r1, r5
 8002e16:	13cb      	asrs	r3, r1, #15
 8002e18:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

	ms5611_t.P = PRES;
 8002e1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <MS5611_calculate+0x544>)
 8002e22:	6353      	str	r3, [r2, #52]	; 0x34
	return MS5611_OK;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37e0      	adds	r7, #224	; 0xe0
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	200007c8 	.word	0x200007c8

08002e38 <MS5611_readAlt>:
	ms5611_t.D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
	return MS5611_OK;
}

float MS5611_readAlt(float press)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	ed87 0a01 	vstr	s0, [r7, #4]
	float altitude;
	altitude= 44330*(1-pow(press/100/1012,0.1903));
 8002e42:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e46:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002ec0 <MS5611_readAlt+0x88>
 8002e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e4e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002ec4 <MS5611_readAlt+0x8c>
 8002e52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e56:	ee16 0a90 	vmov	r0, s13
 8002e5a:	f7fd fb7d 	bl	8000558 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002eb0 <MS5611_readAlt+0x78>
 8002e66:	ec43 2b10 	vmov	d0, r2, r3
 8002e6a:	f012 fb49 	bl	8015500 <pow>
 8002e6e:	ec53 2b10 	vmov	r2, r3, d0
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	4914      	ldr	r1, [pc, #80]	; (8002ec8 <MS5611_readAlt+0x90>)
 8002e78:	f7fd fa0e 	bl	8000298 <__aeabi_dsub>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	a30c      	add	r3, pc, #48	; (adr r3, 8002eb8 <MS5611_readAlt+0x80>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd fbbd 	bl	8000608 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd feaf 	bl	8000bf8 <__aeabi_d2f>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60fb      	str	r3, [r7, #12]
	return altitude;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	ee07 3a90 	vmov	s15, r3
}
 8002ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	1a36e2eb 	.word	0x1a36e2eb
 8002eb4:	3fc85bc0 	.word	0x3fc85bc0
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40e5a540 	.word	0x40e5a540
 8002ec0:	42c80000 	.word	0x42c80000
 8002ec4:	447d0000 	.word	0x447d0000
 8002ec8:	3ff00000 	.word	0x3ff00000

08002ecc <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0a6      	sub	sp, #152	; 0x98
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002ed6:	edc7 0a08 	vstr	s1, [r7, #32]
 8002eda:	ed87 1a07 	vstr	s2, [r7, #28]
 8002ede:	edc7 1a06 	vstr	s3, [r7, #24]
 8002ee2:	ed87 2a05 	vstr	s4, [r7, #20]
 8002ee6:	edc7 2a04 	vstr	s5, [r7, #16]
 8002eea:	ed87 3a03 	vstr	s6, [r7, #12]
 8002eee:	edc7 3a02 	vstr	s7, [r7, #8]
 8002ef2:	ed87 4a01 	vstr	s8, [r7, #4]
	float halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8002ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002efa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	d11c      	bne.n	8002f3e <MahonyAHRSupdate+0x72>
 8002f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	d115      	bne.n	8002f3e <MahonyAHRSupdate+0x72>
 8002f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d10e      	bne.n	8002f3e <MahonyAHRSupdate+0x72>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8002f20:	edd7 2a04 	vldr	s5, [r7, #16]
 8002f24:	ed97 2a05 	vldr	s4, [r7, #20]
 8002f28:	edd7 1a06 	vldr	s3, [r7, #24]
 8002f2c:	ed97 1a07 	vldr	s2, [r7, #28]
 8002f30:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f34:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f38:	f000 fbe8 	bl	800370c <MahonyAHRSupdateIMU>
		return;
 8002f3c:	e3cc      	b.n	80036d8 <MahonyAHRSupdate+0x80c>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002f3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	d10e      	bne.n	8002f6a <MahonyAHRSupdate+0x9e>
 8002f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	d107      	bne.n	8002f6a <MahonyAHRSupdate+0x9e>
 8002f5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	f000 82c5 	beq.w	80034f4 <MahonyAHRSupdate+0x628>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f6e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8e:	f000 fe2b 	bl	8003be8 <invSqrt>
 8002f92:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		ax *= recipNorm;
 8002f96:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f9a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa2:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8002fa6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002faa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;     
 8002fb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8002fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	f000 fdfd 	bl	8003be8 <invSqrt>
 8002fee:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		mx *= recipNorm;
 8002ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ff6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8003002:	ed97 7a02 	vldr	s14, [r7, #8]
 8003006:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;   
 8003012:	ed97 7a01 	vldr	s14, [r7, #4]
 8003016:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	edc7 7a01 	vstr	s15, [r7, #4]

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
 8003022:	4bf1      	ldr	r3, [pc, #964]	; (80033e8 <MahonyAHRSupdate+0x51c>)
 8003024:	ed93 7a00 	vldr	s14, [r3]
 8003028:	4bef      	ldr	r3, [pc, #956]	; (80033e8 <MahonyAHRSupdate+0x51c>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
        q0q1 = q0 * q1;
 8003036:	4bec      	ldr	r3, [pc, #944]	; (80033e8 <MahonyAHRSupdate+0x51c>)
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4beb      	ldr	r3, [pc, #940]	; (80033ec <MahonyAHRSupdate+0x520>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        q0q2 = q0 * q2;
 800304a:	4be7      	ldr	r3, [pc, #924]	; (80033e8 <MahonyAHRSupdate+0x51c>)
 800304c:	ed93 7a00 	vldr	s14, [r3]
 8003050:	4be7      	ldr	r3, [pc, #924]	; (80033f0 <MahonyAHRSupdate+0x524>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
        q0q3 = q0 * q3;
 800305e:	4be2      	ldr	r3, [pc, #904]	; (80033e8 <MahonyAHRSupdate+0x51c>)
 8003060:	ed93 7a00 	vldr	s14, [r3]
 8003064:	4be3      	ldr	r3, [pc, #908]	; (80033f4 <MahonyAHRSupdate+0x528>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        q1q1 = q1 * q1;
 8003072:	4bde      	ldr	r3, [pc, #888]	; (80033ec <MahonyAHRSupdate+0x520>)
 8003074:	ed93 7a00 	vldr	s14, [r3]
 8003078:	4bdc      	ldr	r3, [pc, #880]	; (80033ec <MahonyAHRSupdate+0x520>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        q1q2 = q1 * q2;
 8003086:	4bd9      	ldr	r3, [pc, #868]	; (80033ec <MahonyAHRSupdate+0x520>)
 8003088:	ed93 7a00 	vldr	s14, [r3]
 800308c:	4bd8      	ldr	r3, [pc, #864]	; (80033f0 <MahonyAHRSupdate+0x524>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        q1q3 = q1 * q3;
 800309a:	4bd4      	ldr	r3, [pc, #848]	; (80033ec <MahonyAHRSupdate+0x520>)
 800309c:	ed93 7a00 	vldr	s14, [r3]
 80030a0:	4bd4      	ldr	r3, [pc, #848]	; (80033f4 <MahonyAHRSupdate+0x528>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        q2q2 = q2 * q2;
 80030ae:	4bd0      	ldr	r3, [pc, #832]	; (80033f0 <MahonyAHRSupdate+0x524>)
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4bce      	ldr	r3, [pc, #824]	; (80033f0 <MahonyAHRSupdate+0x524>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        q2q3 = q2 * q3;
 80030c2:	4bcb      	ldr	r3, [pc, #812]	; (80033f0 <MahonyAHRSupdate+0x524>)
 80030c4:	ed93 7a00 	vldr	s14, [r3]
 80030c8:	4bca      	ldr	r3, [pc, #808]	; (80033f4 <MahonyAHRSupdate+0x528>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        q3q3 = q3 * q3;   
 80030d6:	4bc7      	ldr	r3, [pc, #796]	; (80033f4 <MahonyAHRSupdate+0x528>)
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	4bc5      	ldr	r3, [pc, #788]	; (80033f4 <MahonyAHRSupdate+0x528>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        // Reference direction of Earth's magnetic field
        hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 80030ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80030fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003106:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800310a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800310e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003112:	edd7 7a02 	vldr	s15, [r7, #8]
 8003116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8003122:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003126:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800312a:	edd7 7a01 	vldr	s15, [r7, #4]
 800312e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800313a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 800313e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003142:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314a:	edd7 7a03 	vldr	s15, [r7, #12]
 800314e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003152:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003156:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800315a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800315e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003162:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003166:	edd7 7a02 	vldr	s15, [r7, #8]
 800316a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003172:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8003176:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800317a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800317e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800318e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        bx = sqrt(hx * hx + hy * hy);
 8003192:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003196:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800319a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800319e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	ee17 0a90 	vmov	r0, s15
 80031aa:	f7fd f9d5 	bl	8000558 <__aeabi_f2d>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	ec43 2b10 	vmov	d0, r2, r3
 80031b6:	f012 fa51 	bl	801565c <sqrt>
 80031ba:	ec53 2b10 	vmov	r2, r3, d0
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fd fd19 	bl	8000bf8 <__aeabi_d2f>
 80031c6:	4603      	mov	r3, r0
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
        bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 80031ca:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80031ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80031d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031de:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80031e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80031fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80031fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003202:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003206:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800320a:	edd7 7a01 	vldr	s15, [r7, #4]
 800320e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800321a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 800321e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003222:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		halfvy = q0q1 + q2q3;
 800322e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8003232:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		halfvz = q0q0 - 0.5f + q3q3;
 800323e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003242:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800324a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8003256:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800325a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800325e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003262:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800326a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800326e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003272:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8003276:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800327a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800327e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 800328e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003292:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800329a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800329e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80032a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80032aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);  
 80032be:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80032c2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80032c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80032ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80032d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80032e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 80032f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80032fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003302:	edd7 6a04 	vldr	s13, [r7, #16]
 8003306:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800330a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800330e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003312:	edd7 6a02 	vldr	s13, [r7, #8]
 8003316:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800331a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800331e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003322:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003326:	ee66 7a27 	vmul.f32	s15, s12, s15
 800332a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800332e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003332:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 8003336:	ed97 7a04 	vldr	s14, [r7, #16]
 800333a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003342:	edd7 6a06 	vldr	s13, [r7, #24]
 8003346:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800334a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003352:	edd7 6a01 	vldr	s13, [r7, #4]
 8003356:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800335a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800335e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003362:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003366:	ee66 7a27 	vmul.f32	s15, s12, s15
 800336a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 8003376:	ed97 7a06 	vldr	s14, [r7, #24]
 800337a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800337e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003382:	edd7 6a05 	vldr	s13, [r7, #20]
 8003386:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800338a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003392:	edd7 6a03 	vldr	s13, [r7, #12]
 8003396:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800339a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80033a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <MahonyAHRSupdate+0x52c>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	dd63      	ble.n	800348e <MahonyAHRSupdate+0x5c2>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <MahonyAHRSupdate+0x52c>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80033fc <MahonyAHRSupdate+0x530>
 80033d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <MahonyAHRSupdate+0x534>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	e00d      	b.n	8003404 <MahonyAHRSupdate+0x538>
 80033e8:	20000004 	.word	0x20000004
 80033ec:	20000248 	.word	0x20000248
 80033f0:	2000024c 	.word	0x2000024c
 80033f4:	20000250 	.word	0x20000250
 80033f8:	20000244 	.word	0x20000244
 80033fc:	3dcccccd 	.word	0x3dcccccd
 8003400:	20000254 	.word	0x20000254
 8003404:	4bb6      	ldr	r3, [pc, #728]	; (80036e0 <MahonyAHRSupdate+0x814>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 800340a:	4bb6      	ldr	r3, [pc, #728]	; (80036e4 <MahonyAHRSupdate+0x818>)
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80036e8 <MahonyAHRSupdate+0x81c>
 800341c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003420:	4bb2      	ldr	r3, [pc, #712]	; (80036ec <MahonyAHRSupdate+0x820>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	4bb0      	ldr	r3, [pc, #704]	; (80036ec <MahonyAHRSupdate+0x820>)
 800342c:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8003430:	4bac      	ldr	r3, [pc, #688]	; (80036e4 <MahonyAHRSupdate+0x818>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80036e8 <MahonyAHRSupdate+0x81c>
 8003442:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003446:	4baa      	ldr	r3, [pc, #680]	; (80036f0 <MahonyAHRSupdate+0x824>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	4ba7      	ldr	r3, [pc, #668]	; (80036f0 <MahonyAHRSupdate+0x824>)
 8003452:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8003456:	4ba2      	ldr	r3, [pc, #648]	; (80036e0 <MahonyAHRSupdate+0x814>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			gy += integralFBy;
 8003468:	4ba0      	ldr	r3, [pc, #640]	; (80036ec <MahonyAHRSupdate+0x820>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003476:	edc7 7a08 	vstr	s15, [r7, #32]
			gz += integralFBz;
 800347a:	4b9d      	ldr	r3, [pc, #628]	; (80036f0 <MahonyAHRSupdate+0x824>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ed97 7a07 	vldr	s14, [r7, #28]
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	edc7 7a07 	vstr	s15, [r7, #28]
 800348c:	e00b      	b.n	80034a6 <MahonyAHRSupdate+0x5da>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 800348e:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <MahonyAHRSupdate+0x814>)
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003496:	4b95      	ldr	r3, [pc, #596]	; (80036ec <MahonyAHRSupdate+0x820>)
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 800349e:	4b94      	ldr	r3, [pc, #592]	; (80036f0 <MahonyAHRSupdate+0x824>)
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80034a6:	4b93      	ldr	r3, [pc, #588]	; (80036f4 <MahonyAHRSupdate+0x828>)
 80034a8:	ed93 7a00 	vldr	s14, [r3]
 80034ac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		gy += twoKp * halfey;
 80034c0:	4b8c      	ldr	r3, [pc, #560]	; (80036f4 <MahonyAHRSupdate+0x828>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80034d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d6:	edc7 7a08 	vstr	s15, [r7, #32]
		gz += twoKp * halfez;
 80034da:	4b86      	ldr	r3, [pc, #536]	; (80036f4 <MahonyAHRSupdate+0x828>)
 80034dc:	ed93 7a00 	vldr	s14, [r3]
 80034e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 80034f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034f8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80036f8 <MahonyAHRSupdate+0x82c>
 80034fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003500:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	gy *= (0.5f * (1.0f / sampleFreq));
 8003504:	edd7 7a08 	vldr	s15, [r7, #32]
 8003508:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80036f8 <MahonyAHRSupdate+0x82c>
 800350c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003510:	edc7 7a08 	vstr	s15, [r7, #32]
	gz *= (0.5f * (1.0f / sampleFreq));
 8003514:	edd7 7a07 	vldr	s15, [r7, #28]
 8003518:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80036f8 <MahonyAHRSupdate+0x82c>
 800351c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003520:	edc7 7a07 	vstr	s15, [r7, #28]
	qa = q0;
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <MahonyAHRSupdate+0x830>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
	qb = q1;
 800352a:	4b75      	ldr	r3, [pc, #468]	; (8003700 <MahonyAHRSupdate+0x834>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
	qc = q2;
 8003530:	4b74      	ldr	r3, [pc, #464]	; (8003704 <MahonyAHRSupdate+0x838>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8003536:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800353a:	eeb1 7a67 	vneg.f32	s14, s15
 800353e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003546:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800354a:	edd7 7a08 	vldr	s15, [r7, #32]
 800354e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <MahonyAHRSupdate+0x83c>)
 8003558:	edd3 6a00 	vldr	s13, [r3]
 800355c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003564:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003568:	4b64      	ldr	r3, [pc, #400]	; (80036fc <MahonyAHRSupdate+0x830>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	4b62      	ldr	r3, [pc, #392]	; (80036fc <MahonyAHRSupdate+0x830>)
 8003574:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8003578:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800357c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003584:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003588:	edd7 7a07 	vldr	s15, [r7, #28]
 800358c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003594:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <MahonyAHRSupdate+0x83c>)
 8003596:	edd3 6a00 	vldr	s13, [r3]
 800359a:	edd7 7a08 	vldr	s15, [r7, #32]
 800359e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <MahonyAHRSupdate+0x834>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <MahonyAHRSupdate+0x834>)
 80035b2:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 80035b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80035ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80035be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80035c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80035ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035d2:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <MahonyAHRSupdate+0x83c>)
 80035d4:	edd3 6a00 	vldr	s13, [r3]
 80035d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <MahonyAHRSupdate+0x838>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ee:	4b45      	ldr	r3, [pc, #276]	; (8003704 <MahonyAHRSupdate+0x838>)
 80035f0:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx); 
 80035f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80035f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80035fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003600:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003604:	edd7 7a08 	vldr	s15, [r7, #32]
 8003608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003610:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003614:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <MahonyAHRSupdate+0x83c>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <MahonyAHRSupdate+0x83c>)
 800362c:	edc3 7a00 	vstr	s15, [r3]
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <MahonyAHRSupdate+0x830>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <MahonyAHRSupdate+0x830>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003640:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <MahonyAHRSupdate+0x834>)
 8003642:	edd3 6a00 	vldr	s13, [r3]
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <MahonyAHRSupdate+0x834>)
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <MahonyAHRSupdate+0x838>)
 8003656:	edd3 6a00 	vldr	s13, [r3]
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <MahonyAHRSupdate+0x838>)
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <MahonyAHRSupdate+0x83c>)
 800366a:	edd3 6a00 	vldr	s13, [r3]
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <MahonyAHRSupdate+0x83c>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	eeb0 0a67 	vmov.f32	s0, s15
 8003680:	f000 fab2 	bl	8003be8 <invSqrt>
 8003684:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	q0 *= recipNorm;
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <MahonyAHRSupdate+0x830>)
 800368a:	ed93 7a00 	vldr	s14, [r3]
 800368e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <MahonyAHRSupdate+0x830>)
 8003698:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <MahonyAHRSupdate+0x834>)
 800369e:	ed93 7a00 	vldr	s14, [r3]
 80036a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <MahonyAHRSupdate+0x834>)
 80036ac:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <MahonyAHRSupdate+0x838>)
 80036b2:	ed93 7a00 	vldr	s14, [r3]
 80036b6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80036ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <MahonyAHRSupdate+0x838>)
 80036c0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <MahonyAHRSupdate+0x83c>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <MahonyAHRSupdate+0x83c>)
 80036d4:	edc3 7a00 	vstr	s15, [r3]
}
 80036d8:	3798      	adds	r7, #152	; 0x98
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000254 	.word	0x20000254
 80036e4:	20000244 	.word	0x20000244
 80036e8:	3dcccccd 	.word	0x3dcccccd
 80036ec:	20000258 	.word	0x20000258
 80036f0:	2000025c 	.word	0x2000025c
 80036f4:	20000000 	.word	0x20000000
 80036f8:	3d4ccccd 	.word	0x3d4ccccd
 80036fc:	20000004 	.word	0x20000004
 8003700:	20000248 	.word	0x20000248
 8003704:	2000024c 	.word	0x2000024c
 8003708:	20000250 	.word	0x20000250

0800370c <MahonyAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	; 0x40
 8003710:	af00      	add	r7, sp, #0
 8003712:	ed87 0a05 	vstr	s0, [r7, #20]
 8003716:	edc7 0a04 	vstr	s1, [r7, #16]
 800371a:	ed87 1a03 	vstr	s2, [r7, #12]
 800371e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003722:	ed87 2a01 	vstr	s4, [r7, #4]
 8003726:	edc7 2a00 	vstr	s5, [r7]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800372a:	edd7 7a02 	vldr	s15, [r7, #8]
 800372e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d10e      	bne.n	8003756 <MahonyAHRSupdateIMU+0x4a>
 8003738:	edd7 7a01 	vldr	s15, [r7, #4]
 800373c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	d107      	bne.n	8003756 <MahonyAHRSupdateIMU+0x4a>
 8003746:	edd7 7a00 	vldr	s15, [r7]
 800374a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	f000 8140 	beq.w	80039d6 <MahonyAHRSupdateIMU+0x2ca>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003756:	edd7 7a02 	vldr	s15, [r7, #8]
 800375a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800375e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003762:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800376a:	edd7 7a00 	vldr	s15, [r7]
 800376e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003776:	eeb0 0a67 	vmov.f32	s0, s15
 800377a:	f000 fa35 	bl	8003be8 <invSqrt>
 800377e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		ax *= recipNorm;
 8003782:	ed97 7a02 	vldr	s14, [r7, #8]
 8003786:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8003792:	ed97 7a01 	vldr	s14, [r7, #4]
 8003796:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;        
 80037a2:	ed97 7a00 	vldr	s14, [r7]
 80037a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a00 	vstr	s15, [r7]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 80037b2:	4b66      	ldr	r3, [pc, #408]	; (800394c <MahonyAHRSupdateIMU+0x240>)
 80037b4:	ed93 7a00 	vldr	s14, [r3]
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <MahonyAHRSupdateIMU+0x244>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <MahonyAHRSupdateIMU+0x248>)
 80037c4:	edd3 6a00 	vldr	s13, [r3]
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <MahonyAHRSupdateIMU+0x24c>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		halfvy = q0 * q1 + q2 * q3;
 80037da:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <MahonyAHRSupdateIMU+0x248>)
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <MahonyAHRSupdateIMU+0x240>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <MahonyAHRSupdateIMU+0x24c>)
 80037ec:	edd3 6a00 	vldr	s13, [r3]
 80037f0:	4b57      	ldr	r3, [pc, #348]	; (8003950 <MahonyAHRSupdateIMU+0x244>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <MahonyAHRSupdateIMU+0x248>)
 8003804:	ed93 7a00 	vldr	s14, [r3]
 8003808:	4b52      	ldr	r3, [pc, #328]	; (8003954 <MahonyAHRSupdateIMU+0x248>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003816:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <MahonyAHRSupdateIMU+0x244>)
 800381c:	edd3 6a00 	vldr	s13, [r3]
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <MahonyAHRSupdateIMU+0x244>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8003832:	ed97 7a01 	vldr	s14, [r7, #4]
 8003836:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800383a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800383e:	edd7 6a00 	vldr	s13, [r7]
 8003842:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		halfey = (az * halfvx - ax * halfvz);
 8003852:	ed97 7a00 	vldr	s14, [r7]
 8003856:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800385a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003862:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfez = (ax * halfvy - ay * halfvx);
 8003872:	ed97 7a02 	vldr	s14, [r7, #8]
 8003876:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800387a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003882:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800388e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <MahonyAHRSupdateIMU+0x250>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a0:	dd66      	ble.n	8003970 <MahonyAHRSupdateIMU+0x264>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <MahonyAHRSupdateIMU+0x250>)
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003960 <MahonyAHRSupdateIMU+0x254>
 80038b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <MahonyAHRSupdateIMU+0x258>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <MahonyAHRSupdateIMU+0x258>)
 80038c4:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <MahonyAHRSupdateIMU+0x250>)
 80038ca:	ed93 7a00 	vldr	s14, [r3]
 80038ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003960 <MahonyAHRSupdateIMU+0x254>
 80038da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <MahonyAHRSupdateIMU+0x25c>)
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <MahonyAHRSupdateIMU+0x25c>)
 80038ea:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <MahonyAHRSupdateIMU+0x250>)
 80038f0:	ed93 7a00 	vldr	s14, [r3]
 80038f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003960 <MahonyAHRSupdateIMU+0x254>
 8003900:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <MahonyAHRSupdateIMU+0x260>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <MahonyAHRSupdateIMU+0x260>)
 8003910:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <MahonyAHRSupdateIMU+0x258>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	ed97 7a05 	vldr	s14, [r7, #20]
 800391e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003922:	edc7 7a05 	vstr	s15, [r7, #20]
			gy += integralFBy;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <MahonyAHRSupdateIMU+0x25c>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003934:	edc7 7a04 	vstr	s15, [r7, #16]
			gz += integralFBz;
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <MahonyAHRSupdateIMU+0x260>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003946:	edc7 7a03 	vstr	s15, [r7, #12]
 800394a:	e01d      	b.n	8003988 <MahonyAHRSupdateIMU+0x27c>
 800394c:	20000248 	.word	0x20000248
 8003950:	20000250 	.word	0x20000250
 8003954:	20000004 	.word	0x20000004
 8003958:	2000024c 	.word	0x2000024c
 800395c:	20000244 	.word	0x20000244
 8003960:	3dcccccd 	.word	0x3dcccccd
 8003964:	20000254 	.word	0x20000254
 8003968:	20000258 	.word	0x20000258
 800396c:	2000025c 	.word	0x2000025c
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8003970:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <MahonyAHRSupdateIMU+0x4b8>)
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003978:	4b93      	ldr	r3, [pc, #588]	; (8003bc8 <MahonyAHRSupdateIMU+0x4bc>)
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003980:	4b92      	ldr	r3, [pc, #584]	; (8003bcc <MahonyAHRSupdateIMU+0x4c0>)
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8003988:	4b91      	ldr	r3, [pc, #580]	; (8003bd0 <MahonyAHRSupdateIMU+0x4c4>)
 800398a:	ed93 7a00 	vldr	s14, [r3]
 800398e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	ed97 7a05 	vldr	s14, [r7, #20]
 800399a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399e:	edc7 7a05 	vstr	s15, [r7, #20]
		gy += twoKp * halfey;
 80039a2:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <MahonyAHRSupdateIMU+0x4c4>)
 80039a4:	ed93 7a00 	vldr	s14, [r3]
 80039a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80039b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b8:	edc7 7a04 	vstr	s15, [r7, #16]
		gz += twoKp * halfez;
 80039bc:	4b84      	ldr	r3, [pc, #528]	; (8003bd0 <MahonyAHRSupdateIMU+0x4c4>)
 80039be:	ed93 7a00 	vldr	s14, [r3]
 80039c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 80039d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039da:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003bd4 <MahonyAHRSupdateIMU+0x4c8>
 80039de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039e2:	edc7 7a05 	vstr	s15, [r7, #20]
	gy *= (0.5f * (1.0f / sampleFreq));
 80039e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80039ea:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003bd4 <MahonyAHRSupdateIMU+0x4c8>
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	edc7 7a04 	vstr	s15, [r7, #16]
	gz *= (0.5f * (1.0f / sampleFreq));
 80039f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003bd4 <MahonyAHRSupdateIMU+0x4c8>
 80039fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a02:	edc7 7a03 	vstr	s15, [r7, #12]
	qa = q0;
 8003a06:	4b74      	ldr	r3, [pc, #464]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	623b      	str	r3, [r7, #32]
	qb = q1;
 8003a0c:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61fb      	str	r3, [r7, #28]
	qc = q2;
 8003a12:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61bb      	str	r3, [r7, #24]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8003a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a1c:	eeb1 7a67 	vneg.f32	s14, s15
 8003a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a28:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003a3a:	edd3 6a00 	vldr	s13, [r3]
 8003a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a54:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003a56:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8003a5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a66:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a76:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003a78:	edd3 6a00 	vldr	s13, [r3]
 8003a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a88:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a92:	4b52      	ldr	r3, [pc, #328]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003a94:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8003a98:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003ab6:	edd3 6a00 	vldr	s13, [r3]
 8003aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003ad2:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx); 
 8003ad6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af2:	edd7 6a06 	vldr	s13, [r7, #24]
 8003af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003b14:	ed93 7a00 	vldr	s14, [r3]
 8003b18:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003b24:	edd3 6a00 	vldr	s13, [r3]
 8003b28:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003b38:	edd3 6a00 	vldr	s13, [r3]
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003b4c:	edd3 6a00 	vldr	s13, [r3]
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	f000 f841 	bl	8003be8 <invSqrt>
 8003b66:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 *= recipNorm;
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003b6c:	ed93 7a00 	vldr	s14, [r3]
 8003b70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <MahonyAHRSupdateIMU+0x4cc>)
 8003b7a:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MahonyAHRSupdateIMU+0x4d0>)
 8003b8e:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003b94:	ed93 7a00 	vldr	s14, [r3]
 8003b98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MahonyAHRSupdateIMU+0x4d4>)
 8003ba2:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003ba8:	ed93 7a00 	vldr	s14, [r3]
 8003bac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <MahonyAHRSupdateIMU+0x4d8>)
 8003bb6:	edc3 7a00 	vstr	s15, [r3]
}
 8003bba:	bf00      	nop
 8003bbc:	3740      	adds	r7, #64	; 0x40
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000254 	.word	0x20000254
 8003bc8:	20000258 	.word	0x20000258
 8003bcc:	2000025c 	.word	0x2000025c
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	3d4ccccd 	.word	0x3d4ccccd
 8003bd8:	20000004 	.word	0x20000004
 8003bdc:	20000248 	.word	0x20000248
 8003be0:	2000024c 	.word	0x2000024c
 8003be4:	20000250 	.word	0x20000250

08003be8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfe:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003c06:	f107 0310 	add.w	r3, r7, #16
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	105a      	asrs	r2, r3, #1
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <invSqrt+0x74>)
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003c18:	f107 030c 	add.w	r3, r7, #12
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003c20:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	ee07 3a90 	vmov	s15, r3
}
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	5f3759df 	.word	0x5f3759df

08003c60 <setMotor>:
#include "Motor.h"

Motor setMotor(TIM_HandleTypeDef * htim, uint8_t channel)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71fb      	strb	r3, [r7, #7]
	Motor mot;

	mot.htim = htim;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	613b      	str	r3, [r7, #16]
	mot.channel = channel;
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	753b      	strb	r3, [r7, #20]

	return mot;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f107 0310 	add.w	r3, r7, #16
 8003c7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c82:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <startMotor>:

void startMotor(Motor mt)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	463b      	mov	r3, r7
 8003c9a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_TIM_PWM_Start(mt.htim, mt.channel);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	793a      	ldrb	r2, [r7, #4]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f007 fc01 	bl	800b4ac <HAL_TIM_PWM_Start>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <setMotorThrottle>:
{
	HAL_TIM_PWM_Stop(mt.htim, mt.channel);
}

void setMotorThrottle(Motor mt, uint16_t thr)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(mt.htim,mt.channel,thr);
 8003cc4:	7b3b      	ldrb	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <setMotorThrottle+0x22>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003cd2:	e013      	b.n	8003cfc <setMotorThrottle+0x4a>
	__HAL_TIM_SET_COMPARE(mt.htim,mt.channel,thr);
 8003cd4:	7b3b      	ldrb	r3, [r7, #12]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d104      	bne.n	8003ce4 <setMotorThrottle+0x32>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003ce2:	e00b      	b.n	8003cfc <setMotorThrottle+0x4a>
	__HAL_TIM_SET_COMPARE(mt.htim,mt.channel,thr);
 8003ce4:	7b3b      	ldrb	r3, [r7, #12]
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d104      	bne.n	8003cf4 <setMotorThrottle+0x42>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003cf2:	e003      	b.n	8003cfc <setMotorThrottle+0x4a>
	__HAL_TIM_SET_COMPARE(mt.htim,mt.channel,thr);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <resetPID>:

/* Resets the PID controller
 * PID_Obj : Pointer of the PID object
 */
void resetPID(PID_Object * PID_Obj)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	PID_Obj->Kp = 0;
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
	PID_Obj->Ki = 0;
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID_Obj->Kd = 0;
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9c1 2304 	strd	r2, r3, [r1, #16]

	PID_Obj->desired_value = 0;
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_Obj->real_value = 0;
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID_Obj->error = 0;
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID_Obj->previousError = 0;
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID_Obj->lastUpdate = 0;
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <initPID>:

/* Initializes the PID
 * Sets constants, min/max values, sample time
 */
void initPID(PID_Object * PID_Obj,double kp,double ki,double kd,double outMin,double outMax,double dv,uint16_t sampletime)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b08f      	sub	sp, #60	; 0x3c
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6378      	str	r0, [r7, #52]	; 0x34
 8003d94:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8003d98:	ed87 1b08 	vstr	d1, [r7, #32]
 8003d9c:	ed87 2b06 	vstr	d2, [r7, #24]
 8003da0:	ed87 3b04 	vstr	d3, [r7, #16]
 8003da4:	ed87 4b02 	vstr	d4, [r7, #8]
 8003da8:	ed87 5b00 	vstr	d5, [r7]
 8003dac:	460b      	mov	r3, r1
 8003dae:	867b      	strh	r3, [r7, #50]	; 0x32
	PID_Obj->Kp = kp;
 8003db0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db6:	e9c1 2300 	strd	r2, r3, [r1]
	PID_Obj->Ki = ki;
 8003dba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID_Obj->Kd = kd;
 8003dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dca:	e9c1 2304 	strd	r2, r3, [r1, #16]

	PID_Obj->outputMax = outMax;
 8003dce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	PID_Obj->outputMin = outMin;
 8003dd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dde:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	PID_Obj->outSum = 0;
 8003de2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	PID_Obj->error = 0;
 8003df0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID_Obj->previousError= 0;
 8003dfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID_Obj->sampleTime = sampletime;
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	PID_Obj->lastUpdate = 0;
 8003e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	PID_Obj->desired_value = dv;
 8003e22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e28:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8003e2c:	bf00      	nop
 8003e2e:	373c      	adds	r7, #60	; 0x3c
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <computePID>:
/* Computes the PID output
 * PID_Obj : Pointer of the PID object
 * input : Measured feedback value
 */
void computePID(PID_Object * PID_Obj,double real_value)
{
 8003e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e3c:	b088      	sub	sp, #32
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	ed87 0b00 	vstr	d0, [r7]
	PID_Obj->real_value = real_value;
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uint32_t now = HAL_GetTick();
 8003e50:	f003 fa26 	bl	80072a0 <HAL_GetTick>
 8003e54:	61f8      	str	r0, [r7, #28]
	uint32_t dt = now - PID_Obj->lastUpdate;
 8003e56:	69f8      	ldr	r0, [r7, #28]
 8003e58:	f7fc fb5c 	bl	8000514 <__aeabi_ui2d>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003e62:	f7fc fa19 	bl	8000298 <__aeabi_dsub>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fea3 	bl	8000bb8 <__aeabi_d2uiz>
 8003e72:	4603      	mov	r3, r0
 8003e74:	61bb      	str	r3, [r7, #24]

	if(dt >= PID_Obj->sampleTime)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4293      	cmp	r3, r2
 8003e82:	f0c0 80b6 	bcc.w	8003ff2 <computePID+0x1ba>
	{
		PID_Obj->error = PID_Obj->desired_value - PID_Obj->real_value;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e92:	f7fc fa01 	bl	8000298 <__aeabi_dsub>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		double dError = (PID_Obj->error - PID_Obj->previousError);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003eac:	f7fc f9f4 	bl	8000298 <__aeabi_dsub>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PID_Obj->outSum += PID_Obj->Ki * PID_Obj->error;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003eca:	f7fc fb9d 	bl	8000608 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	f7fc f9e1 	bl	800029c <__adddf3>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		if(PID_Obj->outSum > PID_Obj->outputMax) PID_Obj->outSum = PID_Obj->outputMax;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003ef0:	f7fc fe1a 	bl	8000b28 <__aeabi_dcmpgt>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <computePID+0xce>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		if(PID_Obj->outSum < PID_Obj->outputMin) PID_Obj->outSum = PID_Obj->outputMin;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003f12:	f7fc fdeb 	bl	8000aec <__aeabi_dcmplt>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <computePID+0xf0>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		PID_Obj->Output = (PID_Obj->Kp * PID_Obj->error) + (PID_Obj->outSum) + (PID_Obj->Kd * dError / dt);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f34:	f7fc fb68 	bl	8000608 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003f46:	f7fc f9a9 	bl	800029c <__adddf3>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f5c:	f7fc fb54 	bl	8000608 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4690      	mov	r8, r2
 8003f66:	4699      	mov	r9, r3
 8003f68:	69b8      	ldr	r0, [r7, #24]
 8003f6a:	f7fc fad3 	bl	8000514 <__aeabi_ui2d>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4640      	mov	r0, r8
 8003f74:	4649      	mov	r1, r9
 8003f76:	f7fc fc71 	bl	800085c <__aeabi_ddiv>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc f98b 	bl	800029c <__adddf3>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		if(PID_Obj->Output > PID_Obj->outputMax) PID_Obj->Output = PID_Obj->outputMax;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003f9c:	f7fc fdc4 	bl	8000b28 <__aeabi_dcmpgt>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <computePID+0x17a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if(PID_Obj->Output < PID_Obj->outputMin) PID_Obj->Output = PID_Obj->outputMin;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003fbe:	f7fc fd95 	bl	8000aec <__aeabi_dcmplt>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <computePID+0x19c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


		PID_Obj->lastUpdate = now;
 8003fd4:	69f8      	ldr	r0, [r7, #28]
 8003fd6:	f7fc fa9d 	bl	8000514 <__aeabi_ui2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		PID_Obj->previousError = PID_Obj->error;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	e9c1 2308 	strd	r2, r3, [r1, #32]

		return;
 8003ff0:	e000      	b.n	8003ff4 <computePID+0x1bc>
	}
	else
	{
		return;
 8003ff2:	bf00      	nop
	}
}
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003ffc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004002:	463b      	mov	r3, r7
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800400e:	4b21      	ldr	r3, [pc, #132]	; (8004094 <MX_ADC1_Init+0x98>)
 8004010:	4a21      	ldr	r2, [pc, #132]	; (8004098 <MX_ADC1_Init+0x9c>)
 8004012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <MX_ADC1_Init+0x98>)
 8004016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800401a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <MX_ADC1_Init+0x98>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <MX_ADC1_Init+0x98>)
 8004024:	2200      	movs	r2, #0
 8004026:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <MX_ADC1_Init+0x98>)
 800402a:	2201      	movs	r2, #1
 800402c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800402e:	4b19      	ldr	r3, [pc, #100]	; (8004094 <MX_ADC1_Init+0x98>)
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <MX_ADC1_Init+0x98>)
 8004038:	2200      	movs	r2, #0
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <MX_ADC1_Init+0x98>)
 800403e:	4a17      	ldr	r2, [pc, #92]	; (800409c <MX_ADC1_Init+0xa0>)
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <MX_ADC1_Init+0x98>)
 8004044:	2200      	movs	r2, #0
 8004046:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <MX_ADC1_Init+0x98>)
 800404a:	2201      	movs	r2, #1
 800404c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <MX_ADC1_Init+0x98>)
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <MX_ADC1_Init+0x98>)
 8004058:	2201      	movs	r2, #1
 800405a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <MX_ADC1_Init+0x98>)
 800405e:	f003 f94f 	bl	8007300 <HAL_ADC_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004068:	f002 fb5e 	bl	8006728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800406c:	2304      	movs	r3, #4
 800406e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004070:	2301      	movs	r3, #1
 8004072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004078:	463b      	mov	r3, r7
 800407a:	4619      	mov	r1, r3
 800407c:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_ADC1_Init+0x98>)
 800407e:	f003 fb95 	bl	80077ac <HAL_ADC_ConfigChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004088:	f002 fb4e 	bl	8006728 <Error_Handler>
  }

}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000808 	.word	0x20000808
 8004098:	40012000 	.word	0x40012000
 800409c:	0f000001 	.word	0x0f000001

080040a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_ADC_MspInit+0x8c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d12f      	bne.n	8004122 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6453      	str	r3, [r2, #68]	; 0x44
 80040d2:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_ADC_MspInit+0x90>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040fa:	2310      	movs	r3, #16
 80040fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040fe:	2303      	movs	r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <HAL_ADC_MspInit+0x94>)
 800410e:	f004 fa29 	bl	8008564 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	2100      	movs	r1, #0
 8004116:	2012      	movs	r0, #18
 8004118:	f003 fe5b 	bl	8007dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800411c:	2012      	movs	r0, #18
 800411e:	f003 fe74 	bl	8007e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004122:	bf00      	nop
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40012000 	.word	0x40012000
 8004130:	40023800 	.word	0x40023800
 8004134:	40020000 	.word	0x40020000

08004138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <MX_DMA_Init+0x3c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <MX_DMA_Init+0x3c>)
 8004148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800414c:	6313      	str	r3, [r2, #48]	; 0x30
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <MX_DMA_Init+0x3c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2010      	movs	r0, #16
 8004160:	f003 fe37 	bl	8007dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004164:	2010      	movs	r0, #16
 8004166:	f003 fe50 	bl	8007e0a <HAL_NVIC_EnableIRQ>

}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800

08004178 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800417c:	2200      	movs	r2, #0
 800417e:	2102      	movs	r1, #2
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <SELECT+0x14>)
 8004182:	f004 fb73 	bl	800886c <HAL_GPIO_WritePin>
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40020400 	.word	0x40020400

08004190 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8004194:	2201      	movs	r2, #1
 8004196:	2102      	movs	r1, #2
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <DESELECT+0x14>)
 800419a:	f004 fb67 	bl	800886c <HAL_GPIO_WritePin>
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40020400 	.word	0x40020400

080041a8 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80041b2:	bf00      	nop
 80041b4:	4808      	ldr	r0, [pc, #32]	; (80041d8 <SPI_TxByte+0x30>)
 80041b6:	f007 f869 	bl	800b28c <HAL_SPI_GetState>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d1f9      	bne.n	80041b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80041c0:	1df9      	adds	r1, r7, #7
 80041c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c6:	2201      	movs	r2, #1
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <SPI_TxByte+0x30>)
 80041ca:	f006 fd89 	bl	800ace0 <HAL_SPI_Transmit>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20003010 	.word	0x20003010

080041dc <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80041e2:	23ff      	movs	r3, #255	; 0xff
 80041e4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80041ea:	bf00      	nop
 80041ec:	4809      	ldr	r0, [pc, #36]	; (8004214 <SPI_RxByte+0x38>)
 80041ee:	f007 f84d 	bl	800b28c <HAL_SPI_GetState>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d1f9      	bne.n	80041ec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80041f8:	1dba      	adds	r2, r7, #6
 80041fa:	1df9      	adds	r1, r7, #7
 80041fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2301      	movs	r3, #1
 8004204:	4803      	ldr	r0, [pc, #12]	; (8004214 <SPI_RxByte+0x38>)
 8004206:	f006 fe9f 	bl	800af48 <HAL_SPI_TransmitReceive>
  
  return data;
 800420a:	79bb      	ldrb	r3, [r7, #6]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20003010 	.word	0x20003010

08004218 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004220:	f7ff ffdc 	bl	80041dc <SPI_RxByte>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	701a      	strb	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <SD_ReadyWait+0x34>)
 800423c:	2232      	movs	r2, #50	; 0x32
 800423e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8004240:	f7ff ffcc 	bl	80041dc <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8004244:	f7ff ffca 	bl	80041dc <SPI_RxByte>
 8004248:	4603      	mov	r3, r0
 800424a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	2bff      	cmp	r3, #255	; 0xff
 8004250:	d004      	beq.n	800425c <SD_ReadyWait+0x28>
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SD_ReadyWait+0x34>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f3      	bne.n	8004244 <SD_ReadyWait+0x10>
  
  return res;
 800425c:	79fb      	ldrb	r3, [r7, #7]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20003068 	.word	0x20003068

0800426c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8004272:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004276:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8004278:	f7ff ff8a 	bl	8004190 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e005      	b.n	800428e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004282:	20ff      	movs	r0, #255	; 0xff
 8004284:	f7ff ff90 	bl	80041a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	3301      	adds	r3, #1
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b09      	cmp	r3, #9
 8004292:	ddf6      	ble.n	8004282 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8004294:	f7ff ff70 	bl	8004178 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80042ac:	2395      	movs	r3, #149	; 0x95
 80042ae:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e009      	b.n	80042ca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80042b6:	1d3a      	adds	r2, r7, #4
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff72 	bl	80041a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	ddf2      	ble.n	80042b6 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80042d0:	e002      	b.n	80042d8 <SD_PowerOn+0x6c>
  {
    Count--;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80042d8:	f7ff ff80 	bl	80041dc <SPI_RxByte>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d002      	beq.n	80042e8 <SD_PowerOn+0x7c>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f4      	bne.n	80042d2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80042e8:	f7ff ff52 	bl	8004190 <DESELECT>
  SPI_TxByte(0XFF);
 80042ec:	20ff      	movs	r0, #255	; 0xff
 80042ee:	f7ff ff5b 	bl	80041a8 <SPI_TxByte>
  
  PowerFlag = 1;
 80042f2:	4b03      	ldr	r3, [pc, #12]	; (8004300 <SD_PowerOn+0x94>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000261 	.word	0x20000261

08004304 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <SD_PowerOff+0x14>)
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000261 	.word	0x20000261

0800431c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <SD_CheckPower+0x14>)
 8004322:	781b      	ldrb	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000261 	.word	0x20000261

08004334 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <SD_RxDataBlock+0x68>)
 8004340:	220a      	movs	r2, #10
 8004342:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8004344:	f7ff ff4a 	bl	80041dc <SPI_RxByte>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2bff      	cmp	r3, #255	; 0xff
 8004350:	d104      	bne.n	800435c <SD_RxDataBlock+0x28>
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <SD_RxDataBlock+0x68>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f3      	bne.n	8004344 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2bfe      	cmp	r3, #254	; 0xfe
 8004360:	d001      	beq.n	8004366 <SD_RxDataBlock+0x32>
    return FALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	e016      	b.n	8004394 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff53 	bl	8004218 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff4d 	bl	8004218 <SPI_RxBytePtr>
  } while(btr -= 2);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3b02      	subs	r3, #2
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ed      	bne.n	8004366 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800438a:	f7ff ff27 	bl	80041dc <SPI_RxByte>
  SPI_RxByte();
 800438e:	f7ff ff25 	bl	80041dc <SPI_RxByte>
  
  return TRUE;
 8004392:	2301      	movs	r3, #1
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20003069 	.word	0x20003069

080043a0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80043b0:	f7ff ff40 	bl	8004234 <SD_ReadyWait>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2bff      	cmp	r3, #255	; 0xff
 80043b8:	d001      	beq.n	80043be <SD_TxDataBlock+0x1e>
    return FALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e040      	b.n	8004440 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fef1 	bl	80041a8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	2bfd      	cmp	r3, #253	; 0xfd
 80043ca:	d031      	beq.n	8004430 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fee5 	bl	80041a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fede 	bl	80041a8 <SPI_TxByte>
    } while (--wc);
 80043ec:	7bbb      	ldrb	r3, [r7, #14]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	73bb      	strb	r3, [r7, #14]
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1eb      	bne.n	80043d0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80043f8:	f7ff fef0 	bl	80041dc <SPI_RxByte>
    SPI_RxByte();
 80043fc:	f7ff feee 	bl	80041dc <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8004400:	e00b      	b.n	800441a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8004402:	f7ff feeb 	bl	80041dc <SPI_RxByte>
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2b05      	cmp	r3, #5
 8004412:	d006      	beq.n	8004422 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8004414:	7b7b      	ldrb	r3, [r7, #13]
 8004416:	3301      	adds	r3, #1
 8004418:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800441a:	7b7b      	ldrb	r3, [r7, #13]
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d9f0      	bls.n	8004402 <SD_TxDataBlock+0x62>
 8004420:	e000      	b.n	8004424 <SD_TxDataBlock+0x84>
        break;
 8004422:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8004424:	bf00      	nop
 8004426:	f7ff fed9 	bl	80041dc <SPI_RxByte>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0fa      	beq.n	8004426 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2b05      	cmp	r3, #5
 8004438:	d101      	bne.n	800443e <SD_TxDataBlock+0x9e>
    return TRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004454:	f7ff feee 	bl	8004234 <SD_ReadyWait>
 8004458:	4603      	mov	r3, r0
 800445a:	2bff      	cmp	r3, #255	; 0xff
 800445c:	d001      	beq.n	8004462 <SD_SendCmd+0x1a>
    return 0xFF;
 800445e:	23ff      	movs	r3, #255	; 0xff
 8004460:	e040      	b.n	80044e4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fe9f 	bl	80041a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fe99 	bl	80041a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fe93 	bl	80041a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fe8d 	bl	80041a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fe88 	bl	80041a8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d101      	bne.n	80044a6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80044a2:	2395      	movs	r3, #149	; 0x95
 80044a4:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	2b48      	cmp	r3, #72	; 0x48
 80044aa:	d101      	bne.n	80044b0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80044ac:	2387      	movs	r3, #135	; 0x87
 80044ae:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fe78 	bl	80041a8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b4c      	cmp	r3, #76	; 0x4c
 80044bc:	d101      	bne.n	80044c2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80044be:	f7ff fe8d 	bl	80041dc <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80044c2:	230a      	movs	r3, #10
 80044c4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80044c6:	f7ff fe89 	bl	80041dc <SPI_RxByte>
 80044ca:	4603      	mov	r3, r0
 80044cc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80044ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da05      	bge.n	80044e2 <SD_SendCmd+0x9a>
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	3b01      	subs	r3, #1
 80044da:	73bb      	strb	r3, [r7, #14]
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f1      	bne.n	80044c6 <SD_SendCmd+0x7e>
  
  return res;
 80044e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0d5      	b.n	80046ac <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8004500:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <SD_disk_initialize+0x1c8>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <SD_disk_initialize+0x2a>
    return Stat;        
 800450e:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <SD_disk_initialize+0x1c8>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e0ca      	b.n	80046ac <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8004516:	f7ff fea9 	bl	800426c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800451a:	f7ff fe2d 	bl	8004178 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8004522:	2100      	movs	r1, #0
 8004524:	2040      	movs	r0, #64	; 0x40
 8004526:	f7ff ff8f 	bl	8004448 <SD_SendCmd>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 80a5 	bne.w	800467c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8004532:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <SD_disk_initialize+0x1cc>)
 8004534:	2264      	movs	r2, #100	; 0x64
 8004536:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8004538:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800453c:	2048      	movs	r0, #72	; 0x48
 800453e:	f7ff ff83 	bl	8004448 <SD_SendCmd>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d158      	bne.n	80045fa <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8004548:	2300      	movs	r3, #0
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e00c      	b.n	8004568 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800454e:	7bfc      	ldrb	r4, [r7, #15]
 8004550:	f7ff fe44 	bl	80041dc <SPI_RxByte>
 8004554:	4603      	mov	r3, r0
 8004556:	461a      	mov	r2, r3
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	4423      	add	r3, r4
 800455e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3301      	adds	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d9ef      	bls.n	800454e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800456e:	7abb      	ldrb	r3, [r7, #10]
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 8083 	bne.w	800467c <SD_disk_initialize+0x190>
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	2baa      	cmp	r3, #170	; 0xaa
 800457a:	d17f      	bne.n	800467c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800457c:	2100      	movs	r1, #0
 800457e:	2077      	movs	r0, #119	; 0x77
 8004580:	f7ff ff62 	bl	8004448 <SD_SendCmd>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d807      	bhi.n	800459a <SD_disk_initialize+0xae>
 800458a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800458e:	2069      	movs	r0, #105	; 0x69
 8004590:	f7ff ff5a 	bl	8004448 <SD_SendCmd>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <SD_disk_initialize+0x1cc>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1eb      	bne.n	800457c <SD_disk_initialize+0x90>
 80045a4:	e000      	b.n	80045a8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80045a6:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80045a8:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <SD_disk_initialize+0x1cc>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d064      	beq.n	800467c <SD_disk_initialize+0x190>
 80045b2:	2100      	movs	r1, #0
 80045b4:	207a      	movs	r0, #122	; 0x7a
 80045b6:	f7ff ff47 	bl	8004448 <SD_SendCmd>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d15d      	bne.n	800467c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	e00c      	b.n	80045e0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80045c6:	7bfc      	ldrb	r4, [r7, #15]
 80045c8:	f7ff fe08 	bl	80041dc <SPI_RxByte>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	4423      	add	r3, r4
 80045d6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	3301      	adds	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d9ef      	bls.n	80045c6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80045e6:	7a3b      	ldrb	r3, [r7, #8]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <SD_disk_initialize+0x108>
 80045f0:	2306      	movs	r3, #6
 80045f2:	e000      	b.n	80045f6 <SD_disk_initialize+0x10a>
 80045f4:	2302      	movs	r3, #2
 80045f6:	73bb      	strb	r3, [r7, #14]
 80045f8:	e040      	b.n	800467c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80045fa:	2100      	movs	r1, #0
 80045fc:	2077      	movs	r0, #119	; 0x77
 80045fe:	f7ff ff23 	bl	8004448 <SD_SendCmd>
 8004602:	4603      	mov	r3, r0
 8004604:	2b01      	cmp	r3, #1
 8004606:	d808      	bhi.n	800461a <SD_disk_initialize+0x12e>
 8004608:	2100      	movs	r1, #0
 800460a:	2069      	movs	r0, #105	; 0x69
 800460c:	f7ff ff1c 	bl	8004448 <SD_SendCmd>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d801      	bhi.n	800461a <SD_disk_initialize+0x12e>
 8004616:	2302      	movs	r3, #2
 8004618:	e000      	b.n	800461c <SD_disk_initialize+0x130>
 800461a:	2301      	movs	r3, #1
 800461c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800461e:	7bbb      	ldrb	r3, [r7, #14]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d10e      	bne.n	8004642 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004624:	2100      	movs	r1, #0
 8004626:	2077      	movs	r0, #119	; 0x77
 8004628:	f7ff ff0e 	bl	8004448 <SD_SendCmd>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d80e      	bhi.n	8004650 <SD_disk_initialize+0x164>
 8004632:	2100      	movs	r1, #0
 8004634:	2069      	movs	r0, #105	; 0x69
 8004636:	f7ff ff07 	bl	8004448 <SD_SendCmd>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8004640:	e00d      	b.n	800465e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8004642:	2100      	movs	r1, #0
 8004644:	2041      	movs	r0, #65	; 0x41
 8004646:	f7ff feff 	bl	8004448 <SD_SendCmd>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <SD_disk_initialize+0x1cc>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e1      	bne.n	800461e <SD_disk_initialize+0x132>
 800465a:	e000      	b.n	800465e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800465c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <SD_disk_initialize+0x1cc>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <SD_disk_initialize+0x18c>
 8004668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800466c:	2050      	movs	r0, #80	; 0x50
 800466e:	f7ff feeb 	bl	8004448 <SD_SendCmd>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800467c:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <SD_disk_initialize+0x1d0>)
 800467e:	7bbb      	ldrb	r3, [r7, #14]
 8004680:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8004682:	f7ff fd85 	bl	8004190 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8004686:	f7ff fda9 	bl	80041dc <SPI_RxByte>
  
  if (type) 
 800468a:	7bbb      	ldrb	r3, [r7, #14]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <SD_disk_initialize+0x1c8>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <SD_disk_initialize+0x1c8>)
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e001      	b.n	80046a6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80046a2:	f7ff fe2f 	bl	8004304 <SD_PowerOff>
  }
  
  return Stat;
 80046a6:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <SD_disk_initialize+0x1c8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	20000008 	.word	0x20000008
 80046b8:	20003069 	.word	0x20003069
 80046bc:	20000260 	.word	0x20000260

080046c0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80046d0:	2301      	movs	r3, #1
 80046d2:	e002      	b.n	80046da <SD_disk_status+0x1a>
  
  return Stat;
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <SD_disk_status+0x28>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000008 	.word	0x20000008

080046ec <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <SD_disk_read+0x1c>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <SD_disk_read+0x20>
    return RES_PARERR;
 8004708:	2304      	movs	r3, #4
 800470a:	e051      	b.n	80047b0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800470c:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <SD_disk_read+0xcc>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800471a:	2303      	movs	r3, #3
 800471c:	e048      	b.n	80047b0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <SD_disk_read+0xd0>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	025b      	lsls	r3, r3, #9
 800472e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8004730:	f7ff fd22 	bl	8004178 <SELECT>
  
  if (count == 1) 
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d111      	bne.n	800475e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	2051      	movs	r0, #81	; 0x51
 800473e:	f7ff fe83 	bl	8004448 <SD_SendCmd>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d129      	bne.n	800479c <SD_disk_read+0xb0>
 8004748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800474c:	68b8      	ldr	r0, [r7, #8]
 800474e:	f7ff fdf1 	bl	8004334 <SD_RxDataBlock>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d021      	beq.n	800479c <SD_disk_read+0xb0>
      count = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	e01e      	b.n	800479c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	2052      	movs	r0, #82	; 0x52
 8004762:	f7ff fe71 	bl	8004448 <SD_SendCmd>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d117      	bne.n	800479c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800476c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	f7ff fddf 	bl	8004334 <SD_RxDataBlock>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004782:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ed      	bne.n	800476c <SD_disk_read+0x80>
 8004790:	e000      	b.n	8004794 <SD_disk_read+0xa8>
          break;
 8004792:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8004794:	2100      	movs	r1, #0
 8004796:	204c      	movs	r0, #76	; 0x4c
 8004798:	f7ff fe56 	bl	8004448 <SD_SendCmd>
    }
  }
  
  DESELECT();
 800479c:	f7ff fcf8 	bl	8004190 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80047a0:	f7ff fd1c 	bl	80041dc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000008 	.word	0x20000008
 80047bc:	20000260 	.word	0x20000260

080047c0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <SD_disk_write+0x1c>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <SD_disk_write+0x20>
    return RES_PARERR;
 80047dc:	2304      	movs	r3, #4
 80047de:	e06b      	b.n	80048b8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <SD_disk_write+0x100>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e062      	b.n	80048b8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <SD_disk_write+0x100>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <SD_disk_write+0x44>
    return RES_WRPRT;
 8004800:	2302      	movs	r3, #2
 8004802:	e059      	b.n	80048b8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <SD_disk_write+0x104>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8004816:	f7ff fcaf 	bl	8004178 <SELECT>
  
  if (count == 1) 
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d110      	bne.n	8004842 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	2058      	movs	r0, #88	; 0x58
 8004824:	f7ff fe10 	bl	8004448 <SD_SendCmd>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d13a      	bne.n	80048a4 <SD_disk_write+0xe4>
 800482e:	21fe      	movs	r1, #254	; 0xfe
 8004830:	68b8      	ldr	r0, [r7, #8]
 8004832:	f7ff fdb5 	bl	80043a0 <SD_TxDataBlock>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d033      	beq.n	80048a4 <SD_disk_write+0xe4>
      count = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	e030      	b.n	80048a4 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <SD_disk_write+0x104>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800484e:	2100      	movs	r1, #0
 8004850:	2077      	movs	r0, #119	; 0x77
 8004852:	f7ff fdf9 	bl	8004448 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	2057      	movs	r0, #87	; 0x57
 800485a:	f7ff fdf5 	bl	8004448 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	2059      	movs	r0, #89	; 0x59
 8004862:	f7ff fdf1 	bl	8004448 <SD_SendCmd>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d11b      	bne.n	80048a4 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800486c:	21fc      	movs	r1, #252	; 0xfc
 800486e:	68b8      	ldr	r0, [r7, #8]
 8004870:	f7ff fd96 	bl	80043a0 <SD_TxDataBlock>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004880:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ee      	bne.n	800486c <SD_disk_write+0xac>
 800488e:	e000      	b.n	8004892 <SD_disk_write+0xd2>
          break;
 8004890:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8004892:	21fd      	movs	r1, #253	; 0xfd
 8004894:	2000      	movs	r0, #0
 8004896:	f7ff fd83 	bl	80043a0 <SD_TxDataBlock>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <SD_disk_write+0xe4>
      {        
        count = 1;
 80048a0:	2301      	movs	r3, #1
 80048a2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80048a4:	f7ff fc74 	bl	8004190 <DESELECT>
  SPI_RxByte();
 80048a8:	f7ff fc98 	bl	80041dc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000008 	.word	0x20000008
 80048c4:	20000260 	.word	0x20000260

080048c8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b08b      	sub	sp, #44	; 0x2c
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	603a      	str	r2, [r7, #0]
 80048d2:	71fb      	strb	r3, [r7, #7]
 80048d4:	460b      	mov	r3, r1
 80048d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80048e2:	2304      	movs	r3, #4
 80048e4:	e11b      	b.n	8004b1e <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80048ec:	79bb      	ldrb	r3, [r7, #6]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d129      	bne.n	8004946 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d017      	beq.n	800492a <SD_disk_ioctl+0x62>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	dc1f      	bgt.n	800493e <SD_disk_ioctl+0x76>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <SD_disk_ioctl+0x40>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00b      	beq.n	800491e <SD_disk_ioctl+0x56>
 8004906:	e01a      	b.n	800493e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8004908:	f7ff fd08 	bl	800431c <SD_CheckPower>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8004912:	f7ff fcf7 	bl	8004304 <SD_PowerOff>
      res = RES_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800491c:	e0fd      	b.n	8004b1a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800491e:	f7ff fca5 	bl	800426c <SD_PowerOn>
      res = RES_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004928:	e0f7      	b.n	8004b1a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	1c5c      	adds	r4, r3, #1
 800492e:	f7ff fcf5 	bl	800431c <SD_CheckPower>
 8004932:	4603      	mov	r3, r0
 8004934:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800493c:	e0ed      	b.n	8004b1a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800493e:	2304      	movs	r3, #4
 8004940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004944:	e0e9      	b.n	8004b1a <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8004946:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <SD_disk_ioctl+0x260>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8004954:	2303      	movs	r3, #3
 8004956:	e0e2      	b.n	8004b1e <SD_disk_ioctl+0x256>
    
    SELECT();
 8004958:	f7ff fc0e 	bl	8004178 <SELECT>
    
    switch (ctrl) 
 800495c:	79bb      	ldrb	r3, [r7, #6]
 800495e:	2b0d      	cmp	r3, #13
 8004960:	f200 80cc 	bhi.w	8004afc <SD_disk_ioctl+0x234>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <SD_disk_ioctl+0xa4>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004a67 	.word	0x08004a67
 8004970:	080049a5 	.word	0x080049a5
 8004974:	08004a57 	.word	0x08004a57
 8004978:	08004afd 	.word	0x08004afd
 800497c:	08004afd 	.word	0x08004afd
 8004980:	08004afd 	.word	0x08004afd
 8004984:	08004afd 	.word	0x08004afd
 8004988:	08004afd 	.word	0x08004afd
 800498c:	08004afd 	.word	0x08004afd
 8004990:	08004afd 	.word	0x08004afd
 8004994:	08004afd 	.word	0x08004afd
 8004998:	08004a79 	.word	0x08004a79
 800499c:	08004a9d 	.word	0x08004a9d
 80049a0:	08004ac1 	.word	0x08004ac1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80049a4:	2100      	movs	r1, #0
 80049a6:	2049      	movs	r0, #73	; 0x49
 80049a8:	f7ff fd4e 	bl	8004448 <SD_SendCmd>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80a8 	bne.w	8004b04 <SD_disk_ioctl+0x23c>
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	2110      	movs	r1, #16
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fcba 	bl	8004334 <SD_RxDataBlock>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 809e 	beq.w	8004b04 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80049c8:	7b3b      	ldrb	r3, [r7, #12]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10e      	bne.n	80049f0 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049d2:	7d7b      	ldrb	r3, [r7, #21]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	7d3b      	ldrb	r3, [r7, #20]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4413      	add	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	029a      	lsls	r2, r3, #10
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e02e      	b.n	8004a4e <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049f0:	7c7b      	ldrb	r3, [r7, #17]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	7dbb      	ldrb	r3, [r7, #22]
 80049fa:	09db      	lsrs	r3, r3, #7
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	7d7b      	ldrb	r3, [r7, #21]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0306 	and.w	r3, r3, #6
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3302      	adds	r3, #2
 8004a14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a18:	7d3b      	ldrb	r3, [r7, #20]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	7cbb      	ldrb	r3, [r7, #18]
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a40:	8bfa      	ldrh	r2, [r7, #30]
 8004a42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a46:	3b09      	subs	r3, #9
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8004a54:	e056      	b.n	8004b04 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004a64:	e055      	b.n	8004b12 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8004a66:	f7ff fbe5 	bl	8004234 <SD_ReadyWait>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2bff      	cmp	r3, #255	; 0xff
 8004a6e:	d14b      	bne.n	8004b08 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004a76:	e047      	b.n	8004b08 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2049      	movs	r0, #73	; 0x49
 8004a7c:	f7ff fce4 	bl	8004448 <SD_SendCmd>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d142      	bne.n	8004b0c <SD_disk_ioctl+0x244>
 8004a86:	2110      	movs	r1, #16
 8004a88:	6a38      	ldr	r0, [r7, #32]
 8004a8a:	f7ff fc53 	bl	8004334 <SD_RxDataBlock>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d03b      	beq.n	8004b0c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004a9a:	e037      	b.n	8004b0c <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	204a      	movs	r0, #74	; 0x4a
 8004aa0:	f7ff fcd2 	bl	8004448 <SD_SendCmd>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d132      	bne.n	8004b10 <SD_disk_ioctl+0x248>
 8004aaa:	2110      	movs	r1, #16
 8004aac:	6a38      	ldr	r0, [r7, #32]
 8004aae:	f7ff fc41 	bl	8004334 <SD_RxDataBlock>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02b      	beq.n	8004b10 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004abe:	e027      	b.n	8004b10 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	207a      	movs	r0, #122	; 0x7a
 8004ac4:	f7ff fcc0 	bl	8004448 <SD_SendCmd>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d116      	bne.n	8004afc <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ad4:	e00b      	b.n	8004aee <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8004ad6:	6a3c      	ldr	r4, [r7, #32]
 8004ad8:	1c63      	adds	r3, r4, #1
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	f7ff fb7e 	bl	80041dc <SPI_RxByte>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d9ef      	bls.n	8004ad6 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b02:	e006      	b.n	8004b12 <SD_disk_ioctl+0x24a>
      break;
 8004b04:	bf00      	nop
 8004b06:	e004      	b.n	8004b12 <SD_disk_ioctl+0x24a>
      break;
 8004b08:	bf00      	nop
 8004b0a:	e002      	b.n	8004b12 <SD_disk_ioctl+0x24a>
      break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <SD_disk_ioctl+0x24a>
      break;
 8004b10:	bf00      	nop
    }
    
    DESELECT();
 8004b12:	f7ff fb3d 	bl	8004190 <DESELECT>
    SPI_RxByte();
 8004b16:	f7ff fb61 	bl	80041dc <SPI_RxByte>
  }
  
  return res;
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	372c      	adds	r7, #44	; 0x2c
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000008 	.word	0x20000008

08004b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	4b3c      	ldr	r3, [pc, #240]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4a3b      	ldr	r2, [pc, #236]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6313      	str	r3, [r2, #48]	; 0x30
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4b35      	ldr	r3, [pc, #212]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6e:	4b32      	ldr	r3, [pc, #200]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <MX_GPIO_Init+0x10c>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bb8:	4820      	ldr	r0, [pc, #128]	; (8004c3c <MX_GPIO_Init+0x110>)
 8004bba:	f003 fe57 	bl	800886c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f241 0102 	movw	r1, #4098	; 0x1002
 8004bc4:	481e      	ldr	r0, [pc, #120]	; (8004c40 <MX_GPIO_Init+0x114>)
 8004bc6:	f003 fe51 	bl	800886c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bd0:	481c      	ldr	r0, [pc, #112]	; (8004c44 <MX_GPIO_Init+0x118>)
 8004bd2:	f003 fe4b 	bl	800886c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	2300      	movs	r3, #0
 8004be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4619      	mov	r1, r3
 8004bee:	4813      	ldr	r0, [pc, #76]	; (8004c3c <MX_GPIO_Init+0x110>)
 8004bf0:	f003 fcb8 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8004bf4:	f241 0302 	movw	r3, #4098	; 0x1002
 8004bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <MX_GPIO_Init+0x114>)
 8004c0e:	f003 fca9 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <MX_GPIO_Init+0x118>)
 8004c2c:	f003 fc9a 	bl	8008564 <HAL_GPIO_Init>

}
 8004c30:	bf00      	nop
 8004c32:	3728      	adds	r7, #40	; 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	40020400 	.word	0x40020400
 8004c44:	40020000 	.word	0x40020000

08004c48 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <MX_I2C1_Init+0x54>)
 8004c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <MX_I2C1_Init+0x58>)
 8004c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c84:	4804      	ldr	r0, [pc, #16]	; (8004c98 <MX_I2C1_Init+0x50>)
 8004c86:	f003 fe25 	bl	80088d4 <HAL_I2C_Init>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c90:	f001 fd4a 	bl	8006728 <Error_Handler>
  }

}
 8004c94:	bf00      	nop
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000850 	.word	0x20000850
 8004c9c:	40005400 	.word	0x40005400
 8004ca0:	000186a0 	.word	0x000186a0

08004ca4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <MX_I2C2_Init+0x54>)
 8004cac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <MX_I2C2_Init+0x58>)
 8004cb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004ce0:	4804      	ldr	r0, [pc, #16]	; (8004cf4 <MX_I2C2_Init+0x50>)
 8004ce2:	f003 fdf7 	bl	80088d4 <HAL_I2C_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004cec:	f001 fd1c 	bl	8006728 <Error_Handler>
  }

}
 8004cf0:	bf00      	nop
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200008a4 	.word	0x200008a4
 8004cf8:	40005800 	.word	0x40005800
 8004cfc:	000186a0 	.word	0x000186a0

08004d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 031c 	add.w	r3, r7, #28
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <HAL_I2C_MspInit+0x108>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d12c      	bne.n	8004d7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d3e:	23c0      	movs	r3, #192	; 0xc0
 8004d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d42:	2312      	movs	r3, #18
 8004d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d46:	2301      	movs	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d4e:	2304      	movs	r3, #4
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d52:	f107 031c 	add.w	r3, r7, #28
 8004d56:	4619      	mov	r1, r3
 8004d58:	482d      	ldr	r0, [pc, #180]	; (8004e10 <HAL_I2C_MspInit+0x110>)
 8004d5a:	f003 fc03 	bl	8008564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004d7a:	e041      	b.n	8004e00 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_I2C_MspInit+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d13c      	bne.n	8004e00 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da8:	2312      	movs	r3, #18
 8004daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dac:	2301      	movs	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db0:	2303      	movs	r3, #3
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004db4:	2304      	movs	r3, #4
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db8:	f107 031c 	add.w	r3, r7, #28
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4814      	ldr	r0, [pc, #80]	; (8004e10 <HAL_I2C_MspInit+0x110>)
 8004dc0:	f003 fbd0 	bl	8008564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dc8:	2312      	movs	r3, #18
 8004dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004dd4:	2309      	movs	r3, #9
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd8:	f107 031c 	add.w	r3, r7, #28
 8004ddc:	4619      	mov	r1, r3
 8004dde:	480c      	ldr	r0, [pc, #48]	; (8004e10 <HAL_I2C_MspInit+0x110>)
 8004de0:	f003 fbc0 	bl	8008564 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_I2C_MspInit+0x10c>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	3730      	adds	r7, #48	; 0x30
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40005400 	.word	0x40005400
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40020400 	.word	0x40020400
 8004e14:	40005800 	.word	0x40005800

08004e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e1e:	f002 f9d9 	bl	80071d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e22:	f000 f85d 	bl	8004ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004e26:	f7ff fe81 	bl	8004b2c <MX_GPIO_Init>
	MX_DMA_Init();
 8004e2a:	f7ff f985 	bl	8004138 <MX_DMA_Init>
	MX_ADC1_Init();
 8004e2e:	f7ff f8e5 	bl	8003ffc <MX_ADC1_Init>
	MX_I2C1_Init();
 8004e32:	f7ff ff09 	bl	8004c48 <MX_I2C1_Init>

	MX_I2C2_Init();
 8004e36:	f7ff ff35 	bl	8004ca4 <MX_I2C2_Init>
	MX_SPI1_Init();
 8004e3a:	f001 fc7d 	bl	8006738 <MX_SPI1_Init>
	MX_TIM1_Init();
 8004e3e:	f001 fee7 	bl	8006c10 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8004e42:	f002 f891 	bl	8006f68 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8004e46:	f008 f85f 	bl	800cf08 <MX_FATFS_Init>
	MX_TIM3_Init();
 8004e4a:	f001 ff8d 	bl	8006d68 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8004e4e:	f002 f8b5 	bl	8006fbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int k = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
  for(i=0; i<255; i++)
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <main+0xb4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e024      	b.n	8004ea8 <main+0x90>
  {
	  i2c_status = HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 10);
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <main+0xb4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b299      	uxth	r1, r3
 8004e64:	230a      	movs	r3, #10
 8004e66:	2201      	movs	r2, #1
 8004e68:	4819      	ldr	r0, [pc, #100]	; (8004ed0 <main+0xb8>)
 8004e6a:	f004 fcbb 	bl	80097e4 <HAL_I2C_IsDeviceReady>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <main+0xbc>)
 8004e74:	701a      	strb	r2, [r3, #0]
	  if(!i2c_status)
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <main+0xbc>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <main+0x86>
	  {
		  address[k] = i;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <main+0xb4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b2d9      	uxtb	r1, r3
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <main+0xc0>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
		  k++;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3301      	adds	r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
		  i++;
 8004e94:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <main+0xb4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <main+0xb4>)
 8004e9c:	6013      	str	r3, [r2, #0]
  for(i=0; i<255; i++)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <main+0xb4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <main+0xb4>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <main+0xb4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2bfe      	cmp	r3, #254	; 0xfe
 8004eae:	ddd6      	ble.n	8004e5e <main+0x46>

	  }
  }

  id = BMX160_Read_ID();
 8004eb0:	f7fc fd94 	bl	80019dc <BMX160_Read_ID>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <main+0xc4>)
 8004eba:	701a      	strb	r2, [r3, #0]
  SW_INIT();
 8004ebc:	f000 f95e 	bl	800517c <SW_INIT>
	  //sprintf(XBee_Buffer2,"13245, %.1f", 11.5);
	 // HAL_UART_Transmit_IT(&huart1, (uint8_t*)XBee_Buffer2, strlen(XBee_Buffer2));
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 GET_DATA();
 8004ec0:	f000 fe02 	bl	8005ac8 <GET_DATA>
	 PID_LOOP();
 8004ec4:	f001 f8c6 	bl	8006054 <PID_LOOP>
	 GET_DATA();
 8004ec8:	e7fa      	b.n	8004ec0 <main+0xa8>
 8004eca:	bf00      	nop
 8004ecc:	200002bc 	.word	0x200002bc
 8004ed0:	200008a4 	.word	0x200008a4
 8004ed4:	20000262 	.word	0x20000262
 8004ed8:	20000a90 	.word	0x20000a90
 8004edc:	20001c74 	.word	0x20001c74

08004ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b094      	sub	sp, #80	; 0x50
 8004ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ee6:	f107 0320 	add.w	r3, r7, #32
 8004eea:	2230      	movs	r2, #48	; 0x30
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f00b fa24 	bl	801033c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f20:	2300      	movs	r3, #0
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <SystemClock_Config+0xcc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <SystemClock_Config+0xcc>)
 8004f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <SystemClock_Config+0xcc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f40:	2301      	movs	r3, #1
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f44:	2310      	movs	r3, #16
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f50:	2308      	movs	r3, #8
 8004f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004f54:	2364      	movs	r3, #100	; 0x64
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f60:	f107 0320 	add.w	r3, r7, #32
 8004f64:	4618      	mov	r0, r3
 8004f66:	f005 fa17 	bl	800a398 <HAL_RCC_OscConfig>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f70:	f001 fbda 	bl	8006728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f74:	230f      	movs	r3, #15
 8004f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f8a:	f107 030c 	add.w	r3, r7, #12
 8004f8e:	2103      	movs	r1, #3
 8004f90:	4618      	mov	r0, r3
 8004f92:	f005 fc71 	bl	800a878 <HAL_RCC_ClockConfig>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f9c:	f001 fbc4 	bl	8006728 <Error_Handler>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3750      	adds	r7, #80	; 0x50
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40007000 	.word	0x40007000

08004fb0 <SENSOR_INIT>:

/* USER CODE BEGIN 4 */

void SENSOR_INIT(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	BMX160_Begin();
 8004fb4:	f7fc fd30 	bl	8001a18 <BMX160_Begin>
	BMP388_Init();
 8004fb8:	f7fc f876 	bl	80010a8 <BMP388_Init>
	BMP388_readData(&BMP388_T, &BMP388_P);
 8004fbc:	4917      	ldr	r1, [pc, #92]	; (800501c <SENSOR_INIT+0x6c>)
 8004fbe:	4818      	ldr	r0, [pc, #96]	; (8005020 <SENSOR_INIT+0x70>)
 8004fc0:	f7fc fab8 	bl	8001534 <BMP388_readData>
	BMP388_refAlt = BMP388_readAltitude(BMP388_P, 1013);
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <SENSOR_INIT+0x6c>)
 8004fc6:	ed93 7b00 	vldr	d7, [r3]
 8004fca:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8005024 <SENSOR_INIT+0x74>
 8004fce:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd2:	eef0 0a67 	vmov.f32	s1, s15
 8004fd6:	f7fc fc57 	bl	8001888 <BMP388_readAltitude>
 8004fda:	ee10 3a10 	vmov	r3, s0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb faba 	bl	8000558 <__aeabi_f2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	490f      	ldr	r1, [pc, #60]	; (8005028 <SENSOR_INIT+0x78>)
 8004fea:	e9c1 2300 	strd	r2, r3, [r1]
	BMX160_getEulerAngles(&ROLL, &PITCH, &YAW);
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <SENSOR_INIT+0x7c>)
 8004ff0:	490f      	ldr	r1, [pc, #60]	; (8005030 <SENSOR_INIT+0x80>)
 8004ff2:	4810      	ldr	r0, [pc, #64]	; (8005034 <SENSOR_INIT+0x84>)
 8004ff4:	f7fc ff98 	bl	8001f28 <BMX160_getEulerAngles>
	//MS5611_init();
	/*rtc.sec = 0;
	rtc.min = 56;
	rtc.hour = 19;
	DS3231_setTime(rtc);*/
	DS3231_getTime();
 8004ff8:	f7fd f922 	bl	8002240 <DS3231_getTime>

	// GPS Start
	HAL_UART_Receive_DMA(&huart2, RAW_GPS, 512);
 8004ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005000:	490d      	ldr	r1, [pc, #52]	; (8005038 <SENSOR_INIT+0x88>)
 8005002:	480e      	ldr	r0, [pc, #56]	; (800503c <SENSOR_INIT+0x8c>)
 8005004:	f007 f882 	bl	800c10c <HAL_UART_Receive_DMA>


	// XBee Command Start
	HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 8005008:	2201      	movs	r2, #1
 800500a:	490d      	ldr	r1, [pc, #52]	; (8005040 <SENSOR_INIT+0x90>)
 800500c:	480d      	ldr	r0, [pc, #52]	; (8005044 <SENSOR_INIT+0x94>)
 800500e:	f007 f827 	bl	800c060 <HAL_UART_Receive_IT>

	// ADC init
	HAL_ADC_Start_IT(&hadc1);
 8005012:	480d      	ldr	r0, [pc, #52]	; (8005048 <SENSOR_INIT+0x98>)
 8005014:	f002 f9b8 	bl	8007388 <HAL_ADC_Start_IT>
}
 8005018:	bf00      	nop
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000290 	.word	0x20000290
 8005020:	20000288 	.word	0x20000288
 8005024:	447d4000 	.word	0x447d4000
 8005028:	200002a8 	.word	0x200002a8
 800502c:	20000028 	.word	0x20000028
 8005030:	20000020 	.word	0x20000020
 8005034:	20000018 	.word	0x20000018
 8005038:	20002e10 	.word	0x20002e10
 800503c:	2000318c 	.word	0x2000318c
 8005040:	20001c98 	.word	0x20001c98
 8005044:	2000314c 	.word	0x2000314c
 8005048:	20000808 	.word	0x20000808

0800504c <MOTOR_INIT>:

void MOTOR_INIT(void)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
	mt1 = setMotor(&htim1, TIM_CHANNEL_1);
 8005052:	4c27      	ldr	r4, [pc, #156]	; (80050f0 <MOTOR_INIT+0xa4>)
 8005054:	463b      	mov	r3, r7
 8005056:	2200      	movs	r2, #0
 8005058:	4926      	ldr	r1, [pc, #152]	; (80050f4 <MOTOR_INIT+0xa8>)
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fe00 	bl	8003c60 <setMotor>
 8005060:	4622      	mov	r2, r4
 8005062:	463b      	mov	r3, r7
 8005064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005068:	e882 0003 	stmia.w	r2, {r0, r1}
	startMotor(mt1);
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <MOTOR_INIT+0xa4>)
 800506e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005072:	f7fe fe0e 	bl	8003c92 <startMotor>
	setMotorThrottle(mt1, 1000);
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <MOTOR_INIT+0xa4>)
 8005078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800507c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005080:	f7fe fe17 	bl	8003cb2 <setMotorThrottle>
	mt2 = setMotor(&htim1, TIM_CHANNEL_4);
 8005084:	4c1c      	ldr	r4, [pc, #112]	; (80050f8 <MOTOR_INIT+0xac>)
 8005086:	463b      	mov	r3, r7
 8005088:	220c      	movs	r2, #12
 800508a:	491a      	ldr	r1, [pc, #104]	; (80050f4 <MOTOR_INIT+0xa8>)
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fde7 	bl	8003c60 <setMotor>
 8005092:	4622      	mov	r2, r4
 8005094:	463b      	mov	r3, r7
 8005096:	e893 0003 	ldmia.w	r3, {r0, r1}
 800509a:	e882 0003 	stmia.w	r2, {r0, r1}
	startMotor(mt2);
 800509e:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <MOTOR_INIT+0xac>)
 80050a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050a4:	f7fe fdf5 	bl	8003c92 <startMotor>
	setMotorThrottle(mt2, 1000);
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <MOTOR_INIT+0xac>)
 80050aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050b2:	f7fe fdfe 	bl	8003cb2 <setMotorThrottle>
	servo = setMotor(&htim3, TIM_CHANNEL_1);
 80050b6:	4c11      	ldr	r4, [pc, #68]	; (80050fc <MOTOR_INIT+0xb0>)
 80050b8:	463b      	mov	r3, r7
 80050ba:	2200      	movs	r2, #0
 80050bc:	4910      	ldr	r1, [pc, #64]	; (8005100 <MOTOR_INIT+0xb4>)
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fdce 	bl	8003c60 <setMotor>
 80050c4:	4622      	mov	r2, r4
 80050c6:	463b      	mov	r3, r7
 80050c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050cc:	e882 0003 	stmia.w	r2, {r0, r1}
	startMotor(servo);
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <MOTOR_INIT+0xb0>)
 80050d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050d6:	f7fe fddc 	bl	8003c92 <startMotor>
	setMotorThrottle(servo, 1000);
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <MOTOR_INIT+0xb0>)
 80050dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050e4:	f7fe fde5 	bl	8003cb2 <setMotorThrottle>

}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd90      	pop	{r4, r7, pc}
 80050f0:	20001c6c 	.word	0x20001c6c
 80050f4:	200030ac 	.word	0x200030ac
 80050f8:	20001cb8 	.word	0x20001cb8
 80050fc:	20001c88 	.word	0x20001c88
 8005100:	2000306c 	.word	0x2000306c

08005104 <CHECK_START_STATUS>:


uint8_t CHECK_START_STATUS(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
	uint8_t rByte=0;
 800510a:	2300      	movs	r3, #0
 800510c:	71fb      	strb	r3, [r7, #7]
	EEPROM_Read(0, EEPROM_OFFSET_RESET, &rByte, 1);
 800510e:	1dfa      	adds	r2, r7, #7
 8005110:	2301      	movs	r3, #1
 8005112:	210a      	movs	r1, #10
 8005114:	2000      	movs	r0, #0
 8005116:	f7fd f9e9 	bl	80024ec <EEPROM_Read>
	return rByte;
 800511a:	79fb      	ldrb	r3, [r7, #7]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <WRITE_START_STATUS>:

void WRITE_START_STATUS(uint8_t STATUS)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
	EEPROM_Write(0, EEPROM_OFFSET_RESET, &STATUS, 1);
 800512e:	1dfa      	adds	r2, r7, #7
 8005130:	2301      	movs	r3, #1
 8005132:	210a      	movs	r1, #10
 8005134:	2000      	movs	r0, #0
 8005136:	f7fd f8f5 	bl	8002324 <EEPROM_Write>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <EEPROM_WRITE_REF_ALT>:

void EEPROM_WRITE_REF_ALT(double ref)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	ed87 0b00 	vstr	d0, [r7]
	EEPROM_Write_NUM(0, EEPROM_OFFSET_REF_ALT, (float)ref);
 800514c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005150:	f7fb fd52 	bl	8000bf8 <__aeabi_d2f>
 8005154:	4603      	mov	r3, r0
 8005156:	ee00 3a10 	vmov	s0, r3
 800515a:	210f      	movs	r1, #15
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd f98d 	bl	800247c <EEPROM_Write_NUM>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <WAIT_START>:

void WAIT_START(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
	while(0)
 800516e:	bf00      	nop
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			GCS_Command = 0;
			break;
		}
	}
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <SW_INIT>:

void SW_INIT(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
	DS3231_setTime(rtc);

	while(1);*/


	SD_Mount();
 8005182:	f001 f965 	bl	8006450 <SD_Mount>
	uint8_t _code_status = CHECK_START_STATUS();
 8005186:	f7ff ffbd 	bl	8005104 <CHECK_START_STATUS>
 800518a:	4603      	mov	r3, r0
 800518c:	73fb      	strb	r3, [r7, #15]


	if(_code_status == 1)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 80af 	bne.w	80052f4 <SW_INIT+0x178>
	{
		// Yazılım uçuş sırasında resetlendiyse
		EEPROM_Read(0, EEPROM_OFFSET_STATE, &CURRENT_STATE, 1);
 8005196:	2301      	movs	r3, #1
 8005198:	4a97      	ldr	r2, [pc, #604]	; (80053f8 <SW_INIT+0x27c>)
 800519a:	2105      	movs	r1, #5
 800519c:	2000      	movs	r0, #0
 800519e:	f7fd f9a5 	bl	80024ec <EEPROM_Read>
		CHECK_SATELLITE_STATE(CURRENT_STATE);
 80051a2:	4b95      	ldr	r3, [pc, #596]	; (80053f8 <SW_INIT+0x27c>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f9ac 	bl	8005504 <CHECK_SATELLITE_STATE>
		CHECK_STATE();
 80051ac:	f000 fa20 	bl	80055f0 <CHECK_STATE>
		BMP388_refAlt = EEPROM_Read_NUM(0, EEPROM_OFFSET_REF_ALT);
 80051b0:	210f      	movs	r1, #15
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fd f97e 	bl	80024b4 <EEPROM_Read_NUM>
 80051b8:	ee10 3a10 	vmov	r3, s0
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fb f9cb 	bl	8000558 <__aeabi_f2d>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	498d      	ldr	r1, [pc, #564]	; (80053fc <SW_INIT+0x280>)
 80051c8:	e9c1 2300 	strd	r2, r3, [r1]
		PACKAGE_COUNT = EEPROM_Read_NUM(0, EEPROM_OFFSET_PACKAGE);
 80051cc:	2100      	movs	r1, #0
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fd f970 	bl	80024b4 <EEPROM_Read_NUM>
 80051d4:	eef0 7a40 	vmov.f32	s15, s0
 80051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051dc:	ee17 3a90 	vmov	r3, s15
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	4b87      	ldr	r3, [pc, #540]	; (8005400 <SW_INIT+0x284>)
 80051e4:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i<20; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e02b      	b.n	8005244 <SW_INIT+0xc8>
		{
			if(i>=10)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	dd13      	ble.n	800521a <SW_INIT+0x9e>
			{
				PRESS_ROTATING_MEM[i] = EEPROM_Read_NUM(2, (i-10)*4);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	3b0a      	subs	r3, #10
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	2002      	movs	r0, #2
 8005200:	f7fd f958 	bl	80024b4 <EEPROM_Read_NUM>
 8005204:	eef0 7a40 	vmov.f32	s15, s0
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 1a90 	vmov	r1, s15
 8005210:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <SW_INIT+0x288>)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005218:	e011      	b.n	800523e <SW_INIT+0xc2>
			}
			else
			{
				PRESS_ROTATING_MEM[i] = EEPROM_Read_NUM(1, i*4);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	b29b      	uxth	r3, r3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	b29b      	uxth	r3, r3
 8005222:	4619      	mov	r1, r3
 8005224:	2001      	movs	r0, #1
 8005226:	f7fd f945 	bl	80024b4 <EEPROM_Read_NUM>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005232:	ee17 1a90 	vmov	r1, s15
 8005236:	4a73      	ldr	r2, [pc, #460]	; (8005404 <SW_INIT+0x288>)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i<20; i++)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3301      	adds	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b13      	cmp	r3, #19
 8005248:	ddd0      	ble.n	80051ec <SW_INIT+0x70>
			}

		}

		sprintf(VIDEO_STATE,"HAYIR");
 800524a:	496f      	ldr	r1, [pc, #444]	; (8005408 <SW_INIT+0x28c>)
 800524c:	486f      	ldr	r0, [pc, #444]	; (800540c <SW_INIT+0x290>)
 800524e:	f00b ff31 	bl	80110b4 <siprintf>
		SENSOR_INIT();
 8005252:	f7ff fead 	bl	8004fb0 <SENSOR_INIT>
		MOTOR_INIT();
 8005256:	f7ff fef9 	bl	800504c <MOTOR_INIT>
		PRESS_TOTAL_AVG = EEPROM_Read_NUM(0, EEPROM_OFFSET_PRESS_TOTAL_AVG);
 800525a:	2114      	movs	r1, #20
 800525c:	2000      	movs	r0, #0
 800525e:	f7fd f929 	bl	80024b4 <EEPROM_Read_NUM>
 8005262:	eef0 7a40 	vmov.f32	s15, s0
 8005266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800526a:	ee17 2a90 	vmov	r2, s15
 800526e:	4b68      	ldr	r3, [pc, #416]	; (8005410 <SW_INIT+0x294>)
 8005270:	601a      	str	r2, [r3, #0]
		ACTUAL_PRESSURE_FAST = EEPROM_Read_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_FAST);
 8005272:	2119      	movs	r1, #25
 8005274:	2000      	movs	r0, #0
 8005276:	f7fd f91d 	bl	80024b4 <EEPROM_Read_NUM>
 800527a:	eef0 7a40 	vmov.f32	s15, s0
 800527e:	4b65      	ldr	r3, [pc, #404]	; (8005414 <SW_INIT+0x298>)
 8005280:	edc3 7a00 	vstr	s15, [r3]
		ACTUAL_PRESSURE_SLOW = EEPROM_Read_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_SLOW);
 8005284:	2123      	movs	r1, #35	; 0x23
 8005286:	2000      	movs	r0, #0
 8005288:	f7fd f914 	bl	80024b4 <EEPROM_Read_NUM>
 800528c:	eef0 7a40 	vmov.f32	s15, s0
 8005290:	4b61      	ldr	r3, [pc, #388]	; (8005418 <SW_INIT+0x29c>)
 8005292:	edc3 7a00 	vstr	s15, [r3]
		ACTUAL_PRESSURE_DIFF = EEPROM_Read_NUM(0, EEPROM_OFFSET_ACTUAL_PRESSURE_DIFF);
 8005296:	2128      	movs	r1, #40	; 0x28
 8005298:	2000      	movs	r0, #0
 800529a:	f7fd f90b 	bl	80024b4 <EEPROM_Read_NUM>
 800529e:	eef0 7a40 	vmov.f32	s15, s0
 80052a2:	4b5e      	ldr	r3, [pc, #376]	; (800541c <SW_INIT+0x2a0>)
 80052a4:	edc3 7a00 	vstr	s15, [r3]
		PRESS_MEM_LOCATION = EEPROM_Read_NUM(0, EEPROM_OFFSET_PRESS_MEM_LOC);
 80052a8:	212d      	movs	r1, #45	; 0x2d
 80052aa:	2000      	movs	r0, #0
 80052ac:	f7fd f902 	bl	80024b4 <EEPROM_Read_NUM>
 80052b0:	eef0 7a40 	vmov.f32	s15, s0
 80052b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80052bc:	793b      	ldrb	r3, [r7, #4]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	4b57      	ldr	r3, [pc, #348]	; (8005420 <SW_INIT+0x2a4>)
 80052c2:	701a      	strb	r2, [r3, #0]
		ACTUAL_PRESSURE = EEPROM_Read_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_LOC);
 80052c4:	2132      	movs	r1, #50	; 0x32
 80052c6:	2000      	movs	r0, #0
 80052c8:	f7fd f8f4 	bl	80024b4 <EEPROM_Read_NUM>
 80052cc:	eef0 7a40 	vmov.f32	s15, s0
 80052d0:	4b54      	ldr	r3, [pc, #336]	; (8005424 <SW_INIT+0x2a8>)
 80052d2:	edc3 7a00 	vstr	s15, [r3]
		BAROMETER_COUNTER = EEPROM_Read_NUM(0, EEPROM_OFFSET_BAROMETER_CNT);
 80052d6:	2137      	movs	r1, #55	; 0x37
 80052d8:	2000      	movs	r0, #0
 80052da:	f7fd f8eb 	bl	80024b4 <EEPROM_Read_NUM>
 80052de:	eef0 7a40 	vmov.f32	s15, s0
 80052e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80052ea:	793b      	ldrb	r3, [r7, #4]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <SW_INIT+0x2ac>)
 80052f0:	701a      	strb	r2, [r3, #0]
		EEPROM_WRITE_REF_ALT(MS5611_refAlt);

		WAIT_START();
	}

}
 80052f2:	e07c      	b.n	80053ee <SW_INIT+0x272>
		SENSOR_INIT();
 80052f4:	f7ff fe5c 	bl	8004fb0 <SENSOR_INIT>
		MOTOR_INIT();
 80052f8:	f7ff fea8 	bl	800504c <MOTOR_INIT>
		EEPROM_PageErase(0);
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7fd f957 	bl	80025b0 <EEPROM_PageErase>
		EEPROM_PageErase(1);
 8005302:	2001      	movs	r0, #1
 8005304:	f7fd f954 	bl	80025b0 <EEPROM_PageErase>
		EEPROM_PageErase(2);
 8005308:	2002      	movs	r0, #2
 800530a:	f7fd f951 	bl	80025b0 <EEPROM_PageErase>
		sprintf(VIDEO_STATE,"HAYIR");
 800530e:	493e      	ldr	r1, [pc, #248]	; (8005408 <SW_INIT+0x28c>)
 8005310:	483e      	ldr	r0, [pc, #248]	; (800540c <SW_INIT+0x290>)
 8005312:	f00b fecf 	bl	80110b4 <siprintf>
		MS5611_refAlt = ACTUAL_ALTITUDE;
 8005316:	4b45      	ldr	r3, [pc, #276]	; (800542c <SW_INIT+0x2b0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a45      	ldr	r2, [pc, #276]	; (8005430 <SW_INIT+0x2b4>)
 800531c:	6013      	str	r3, [r2, #0]
		READ_BAROMETER();
 800531e:	f000 ff17 	bl	8006150 <READ_BAROMETER>
		for(int n = 0; n<20; n++)
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e02b      	b.n	8005380 <SW_INIT+0x204>
			if(n>=10)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b09      	cmp	r3, #9
 800532c:	dd13      	ble.n	8005356 <SW_INIT+0x1da>
				EEPROM_Write_NUM(2, (n-10)*4, PRESS_ROTATING_MEM[n]);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3b0a      	subs	r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	b29a      	uxth	r2, r3
 8005338:	4932      	ldr	r1, [pc, #200]	; (8005404 <SW_INIT+0x288>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005348:	eeb0 0a67 	vmov.f32	s0, s15
 800534c:	4611      	mov	r1, r2
 800534e:	2002      	movs	r0, #2
 8005350:	f7fd f894 	bl	800247c <EEPROM_Write_NUM>
 8005354:	e011      	b.n	800537a <SW_INIT+0x1fe>
				EEPROM_Write_NUM(1, n*4, PRESS_ROTATING_MEM[n]);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	b29b      	uxth	r3, r3
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	b29a      	uxth	r2, r3
 800535e:	4929      	ldr	r1, [pc, #164]	; (8005404 <SW_INIT+0x288>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	4611      	mov	r1, r2
 8005374:	2001      	movs	r0, #1
 8005376:	f7fd f881 	bl	800247c <EEPROM_Write_NUM>
		for(int n = 0; n<20; n++)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b13      	cmp	r3, #19
 8005384:	ddd0      	ble.n	8005328 <SW_INIT+0x1ac>
		CODE_RESET = 1;
 8005386:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <SW_INIT+0x2b8>)
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
		CURRENT_STATE = 255;
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <SW_INIT+0x27c>)
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	701a      	strb	r2, [r3, #0]
		PACKAGE_COUNT = 0;
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <SW_INIT+0x284>)
 8005394:	2200      	movs	r2, #0
 8005396:	801a      	strh	r2, [r3, #0]
		WRITE_START_STATUS(CODE_RESET);
 8005398:	4b26      	ldr	r3, [pc, #152]	; (8005434 <SW_INIT+0x2b8>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fec1 	bl	8005124 <WRITE_START_STATUS>
		BMP388_readData(&BMP388_T, &BMP388_P);
 80053a2:	4925      	ldr	r1, [pc, #148]	; (8005438 <SW_INIT+0x2bc>)
 80053a4:	4825      	ldr	r0, [pc, #148]	; (800543c <SW_INIT+0x2c0>)
 80053a6:	f7fc f8c5 	bl	8001534 <BMP388_readData>
		BMP388_refAlt = BMP388_readAltitude(BMP388_P, 1012);
 80053aa:	4b23      	ldr	r3, [pc, #140]	; (8005438 <SW_INIT+0x2bc>)
 80053ac:	ed93 7b00 	vldr	d7, [r3]
 80053b0:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8005440 <SW_INIT+0x2c4>
 80053b4:	eeb0 0a47 	vmov.f32	s0, s14
 80053b8:	eef0 0a67 	vmov.f32	s1, s15
 80053bc:	f7fc fa64 	bl	8001888 <BMP388_readAltitude>
 80053c0:	ee10 3a10 	vmov	r3, s0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fb f8c7 	bl	8000558 <__aeabi_f2d>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	490b      	ldr	r1, [pc, #44]	; (80053fc <SW_INIT+0x280>)
 80053d0:	e9c1 2300 	strd	r2, r3, [r1]
		EEPROM_WRITE_REF_ALT(MS5611_refAlt);
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <SW_INIT+0x2b4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fb f8bd 	bl	8000558 <__aeabi_f2d>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	ec43 2b10 	vmov	d0, r2, r3
 80053e6:	f7ff feac 	bl	8005142 <EEPROM_WRITE_REF_ALT>
		WAIT_START();
 80053ea:	f7ff febe 	bl	800516a <WAIT_START>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000009 	.word	0x20000009
 80053fc:	200002a8 	.word	0x200002a8
 8005400:	20000264 	.word	0x20000264
 8005404:	20001c0c 	.word	0x20001c0c
 8005408:	08016c78 	.word	0x08016c78
 800540c:	20002dfc 	.word	0x20002dfc
 8005410:	20001c94 	.word	0x20001c94
 8005414:	20001c68 	.word	0x20001c68
 8005418:	20001c08 	.word	0x20001c08
 800541c:	20001c64 	.word	0x20001c64
 8005420:	20001ae4 	.word	0x20001ae4
 8005424:	20000968 	.word	0x20000968
 8005428:	2000098c 	.word	0x2000098c
 800542c:	20000988 	.word	0x20000988
 8005430:	200002b0 	.word	0x200002b0
 8005434:	20000263 	.word	0x20000263
 8005438:	20000290 	.word	0x20000290
 800543c:	20000288 	.word	0x20000288
 8005440:	447d0000 	.word	0x447d0000
 8005444:	00000000 	.word	0x00000000

08005448 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	ADC_VAL = HAL_ADC_GetValue(hadc);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f002 f98a 	bl	800776a <HAL_ADC_GetValue>
 8005456:	4603      	mov	r3, r0
 8005458:	b29a      	uxth	r2, r3
 800545a:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800545c:	801a      	strh	r2, [r3, #0]
	VOLTAGE = (float)ADC_VAL*3.3/4096*(42.2 + 15)/15 + 0.25;
 800545e:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	ee17 0a90 	vmov	r0, s15
 800546e:	f7fb f873 	bl	8000558 <__aeabi_f2d>
 8005472:	a31b      	add	r3, pc, #108	; (adr r3, 80054e0 <HAL_ADC_ConvCpltCallback+0x98>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fb f8c6 	bl	8000608 <__aeabi_dmul>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <HAL_ADC_ConvCpltCallback+0xac>)
 800548a:	f7fb f9e7 	bl	800085c <__aeabi_ddiv>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	a314      	add	r3, pc, #80	; (adr r3, 80054e8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f7fb f8b4 	bl	8000608 <__aeabi_dmul>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4610      	mov	r0, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80054ae:	f7fb f9d5 	bl	800085c <__aeabi_ddiv>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4610      	mov	r0, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <HAL_ADC_ConvCpltCallback+0xb4>)
 80054c0:	f7fa feec 	bl	800029c <__adddf3>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	f7fb fb94 	bl	8000bf8 <__aeabi_d2f>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a0b      	ldr	r2, [pc, #44]	; (8005500 <HAL_ADC_ConvCpltCallback+0xb8>)
 80054d4:	6013      	str	r3, [r2, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	66666666 	.word	0x66666666
 80054e4:	400a6666 	.word	0x400a6666
 80054e8:	9999999a 	.word	0x9999999a
 80054ec:	404c9999 	.word	0x404c9999
 80054f0:	20001c90 	.word	0x20001c90
 80054f4:	40b00000 	.word	0x40b00000
 80054f8:	402e0000 	.word	0x402e0000
 80054fc:	3fd00000 	.word	0x3fd00000
 8005500:	20001cb0 	.word	0x20001cb0

08005504 <CHECK_SATELLITE_STATE>:

void CHECK_SATELLITE_STATE(uint8_t statu_ctrl)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
	switch(statu_ctrl)
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d850      	bhi.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <CHECK_SATELLITE_STATE+0x18>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005549 	.word	0x08005549
 8005520:	08005553 	.word	0x08005553
 8005524:	0800555d 	.word	0x0800555d
 8005528:	08005567 	.word	0x08005567
 800552c:	08005571 	.word	0x08005571
 8005530:	0800557b 	.word	0x0800557b
 8005534:	08005585 	.word	0x08005585
 8005538:	0800558f 	.word	0x0800558f
 800553c:	08005599 	.word	0x08005599
 8005540:	080055a3 	.word	0x080055a3
 8005544:	080055ad 	.word	0x080055ad
	{
		case STATE_BEKLEME:
			sprintf(CURRENT_STATE_STRING, STATE_BEKLEME_STRING);
 8005548:	491d      	ldr	r1, [pc, #116]	; (80055c0 <CHECK_SATELLITE_STATE+0xbc>)
 800554a:	481e      	ldr	r0, [pc, #120]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 800554c:	f00b fdb2 	bl	80110b4 <siprintf>
			break;
 8005550:	e031      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_YUKSELME:
			sprintf(CURRENT_STATE_STRING, STATE_YUKSELME_STRING);
 8005552:	491d      	ldr	r1, [pc, #116]	; (80055c8 <CHECK_SATELLITE_STATE+0xc4>)
 8005554:	481b      	ldr	r0, [pc, #108]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 8005556:	f00b fdad 	bl	80110b4 <siprintf>
			break;
 800555a:	e02c      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_TASIYICI_INIS:
			sprintf(CURRENT_STATE_STRING, STATE_TASIYICI_INIS_STRING);
 800555c:	491b      	ldr	r1, [pc, #108]	; (80055cc <CHECK_SATELLITE_STATE+0xc8>)
 800555e:	4819      	ldr	r0, [pc, #100]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 8005560:	f00b fda8 	bl	80110b4 <siprintf>
			break;
 8005564:	e027      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_AYRILMA:
			sprintf(CURRENT_STATE_STRING, STATE_AYRILMA_STRING);
 8005566:	491a      	ldr	r1, [pc, #104]	; (80055d0 <CHECK_SATELLITE_STATE+0xcc>)
 8005568:	4816      	ldr	r0, [pc, #88]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 800556a:	f00b fda3 	bl	80110b4 <siprintf>
			break;
 800556e:	e022      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_AKTIF_INIS:
			sprintf(CURRENT_STATE_STRING, STATE_AKTIF_INIS_STRING);
 8005570:	4918      	ldr	r1, [pc, #96]	; (80055d4 <CHECK_SATELLITE_STATE+0xd0>)
 8005572:	4814      	ldr	r0, [pc, #80]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 8005574:	f00b fd9e 	bl	80110b4 <siprintf>
			break;
 8005578:	e01d      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_IRTIFA_SABITLEME:
			sprintf(CURRENT_STATE_STRING, STATE_IRTIFA_SABITLEME_STRING);
 800557a:	4917      	ldr	r1, [pc, #92]	; (80055d8 <CHECK_SATELLITE_STATE+0xd4>)
 800557c:	4811      	ldr	r0, [pc, #68]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 800557e:	f00b fd99 	bl	80110b4 <siprintf>
			break;
 8005582:	e018      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_AKTIF_INIS_2:
			sprintf(CURRENT_STATE_STRING, STATE_AKTIF_INIS_2_STRING);
 8005584:	4915      	ldr	r1, [pc, #84]	; (80055dc <CHECK_SATELLITE_STATE+0xd8>)
 8005586:	480f      	ldr	r0, [pc, #60]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 8005588:	f00b fd94 	bl	80110b4 <siprintf>
			break;
 800558c:	e013      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_LANDING_1:
			sprintf(CURRENT_STATE_STRING, STATE_LANDING_1_STRING);
 800558e:	4914      	ldr	r1, [pc, #80]	; (80055e0 <CHECK_SATELLITE_STATE+0xdc>)
 8005590:	480c      	ldr	r0, [pc, #48]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 8005592:	f00b fd8f 	bl	80110b4 <siprintf>
			break;
 8005596:	e00e      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_LANDING_2:
			sprintf(CURRENT_STATE_STRING, STATE_LANDING_2_STRING);
 8005598:	4912      	ldr	r1, [pc, #72]	; (80055e4 <CHECK_SATELLITE_STATE+0xe0>)
 800559a:	480a      	ldr	r0, [pc, #40]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 800559c:	f00b fd8a 	bl	80110b4 <siprintf>
			break;
 80055a0:	e009      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_LANDING_3:
			sprintf(CURRENT_STATE_STRING, STATE_LANDING_3_STRING);
 80055a2:	4911      	ldr	r1, [pc, #68]	; (80055e8 <CHECK_SATELLITE_STATE+0xe4>)
 80055a4:	4807      	ldr	r0, [pc, #28]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 80055a6:	f00b fd85 	bl	80110b4 <siprintf>
			break;
 80055aa:	e004      	b.n	80055b6 <CHECK_SATELLITE_STATE+0xb2>
		case STATE_SALVAGE:
			sprintf(CURRENT_STATE_STRING, STATE_SALVAGE_STRING);
 80055ac:	490f      	ldr	r1, [pc, #60]	; (80055ec <CHECK_SATELLITE_STATE+0xe8>)
 80055ae:	4805      	ldr	r0, [pc, #20]	; (80055c4 <CHECK_SATELLITE_STATE+0xc0>)
 80055b0:	f00b fd80 	bl	80110b4 <siprintf>
			break;
 80055b4:	bf00      	nop
	}

}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	08016c80 	.word	0x08016c80
 80055c4:	20001ae8 	.word	0x20001ae8
 80055c8:	08016c88 	.word	0x08016c88
 80055cc:	08016c94 	.word	0x08016c94
 80055d0:	08016ca4 	.word	0x08016ca4
 80055d4:	08016cac 	.word	0x08016cac
 80055d8:	08016cb8 	.word	0x08016cb8
 80055dc:	08016ccc 	.word	0x08016ccc
 80055e0:	08016cdc 	.word	0x08016cdc
 80055e4:	08016ce8 	.word	0x08016ce8
 80055e8:	08016cf4 	.word	0x08016cf4
 80055ec:	08016d00 	.word	0x08016d00

080055f0 <CHECK_STATE>:

// Statü geçişlerini kontrol eder. Ayrılma ve aktif iniş kontrolleri için statü kontrollerini de gerçekleştirir.
void CHECK_STATE(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	// Statü geçişleri
	if(STATE_TRANSITION_BEKLEME)
 80055f4:	4bc2      	ldr	r3, [pc, #776]	; (8005900 <CHECK_STATE+0x310>)
 80055f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	4bc1      	ldr	r3, [pc, #772]	; (8005904 <CHECK_STATE+0x314>)
 8005600:	f7fb fa7e 	bl	8000b00 <__aeabi_dcmple>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <CHECK_STATE+0x2e>
 800560a:	4bbf      	ldr	r3, [pc, #764]	; (8005908 <CHECK_STATE+0x318>)
 800560c:	edd3 7a00 	vldr	s15, [r3]
 8005610:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561c:	d81a      	bhi.n	8005654 <CHECK_STATE+0x64>
 800561e:	4bbb      	ldr	r3, [pc, #748]	; (800590c <CHECK_STATE+0x31c>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2bff      	cmp	r3, #255	; 0xff
 8005624:	d116      	bne.n	8005654 <CHECK_STATE+0x64>
	{
		CURRENT_STATE = STATE_BEKLEME;
 8005626:	4bb9      	ldr	r3, [pc, #740]	; (800590c <CHECK_STATE+0x31c>)
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_BEKLEME_STRING);
 800562c:	49b8      	ldr	r1, [pc, #736]	; (8005910 <CHECK_STATE+0x320>)
 800562e:	48b9      	ldr	r0, [pc, #740]	; (8005914 <CHECK_STATE+0x324>)
 8005630:	f00b fd40 	bl	80110b4 <siprintf>
		initPID(&V_PID, 5, 0.01, 0, -200, 200, DESIRED_SPEED_AKTIF_INIS, 20);
 8005634:	2114      	movs	r1, #20
 8005636:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8005890 <CHECK_STATE+0x2a0>
 800563a:	ed9f 4b97 	vldr	d4, [pc, #604]	; 8005898 <CHECK_STATE+0x2a8>
 800563e:	ed9f 3b98 	vldr	d3, [pc, #608]	; 80058a0 <CHECK_STATE+0x2b0>
 8005642:	ed9f 2b99 	vldr	d2, [pc, #612]	; 80058a8 <CHECK_STATE+0x2b8>
 8005646:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 80058b0 <CHECK_STATE+0x2c0>
 800564a:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 80058b8 <CHECK_STATE+0x2c8>
 800564e:	48b2      	ldr	r0, [pc, #712]	; (8005918 <CHECK_STATE+0x328>)
 8005650:	f7fe fb9c 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_YUKSELME)
 8005654:	4baa      	ldr	r3, [pc, #680]	; (8005900 <CHECK_STATE+0x310>)
 8005656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	4ba9      	ldr	r3, [pc, #676]	; (8005904 <CHECK_STATE+0x314>)
 8005660:	f7fb fa58 	bl	8000b14 <__aeabi_dcmpge>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <CHECK_STATE+0x90>
 800566a:	4ba8      	ldr	r3, [pc, #672]	; (800590c <CHECK_STATE+0x31c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <CHECK_STATE+0x90>
	{
		CURRENT_STATE = STATE_YUKSELME;
 8005672:	4ba6      	ldr	r3, [pc, #664]	; (800590c <CHECK_STATE+0x31c>)
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_YUKSELME_STRING);
 8005678:	49a8      	ldr	r1, [pc, #672]	; (800591c <CHECK_STATE+0x32c>)
 800567a:	48a6      	ldr	r0, [pc, #664]	; (8005914 <CHECK_STATE+0x324>)
 800567c:	f00b fd1a 	bl	80110b4 <siprintf>
	}

	if(STATE_TRANSITION_TASIYICI_INIS)
 8005680:	4ba7      	ldr	r3, [pc, #668]	; (8005920 <CHECK_STATE+0x330>)
 8005682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005686:	4b9e      	ldr	r3, [pc, #632]	; (8005900 <CHECK_STATE+0x310>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f7fa fe04 	bl	8000298 <__aeabi_dsub>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	f7fb fa42 	bl	8000b28 <__aeabi_dcmpgt>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <CHECK_STATE+0xd0>
 80056aa:	4b98      	ldr	r3, [pc, #608]	; (800590c <CHECK_STATE+0x31c>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d106      	bne.n	80056c0 <CHECK_STATE+0xd0>
	{
		CURRENT_STATE = STATE_TASIYICI_INIS;
 80056b2:	4b96      	ldr	r3, [pc, #600]	; (800590c <CHECK_STATE+0x31c>)
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_TASIYICI_INIS_STRING);
 80056b8:	499a      	ldr	r1, [pc, #616]	; (8005924 <CHECK_STATE+0x334>)
 80056ba:	4896      	ldr	r0, [pc, #600]	; (8005914 <CHECK_STATE+0x324>)
 80056bc:	f00b fcfa 	bl	80110b4 <siprintf>

	}

	if(STATE_TRANSITION_AYRILMA)
 80056c0:	4b8f      	ldr	r3, [pc, #572]	; (8005900 <CHECK_STATE+0x310>)
 80056c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056c6:	a37e      	add	r3, pc, #504	; (adr r3, 80058c0 <CHECK_STATE+0x2d0>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fb fa18 	bl	8000b00 <__aeabi_dcmple>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d015      	beq.n	8005702 <CHECK_STATE+0x112>
 80056d6:	4b8a      	ldr	r3, [pc, #552]	; (8005900 <CHECK_STATE+0x310>)
 80056d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056dc:	a37a      	add	r3, pc, #488	; (adr r3, 80058c8 <CHECK_STATE+0x2d8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fb fa17 	bl	8000b14 <__aeabi_dcmpge>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <CHECK_STATE+0x112>
 80056ec:	4b87      	ldr	r3, [pc, #540]	; (800590c <CHECK_STATE+0x31c>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d106      	bne.n	8005702 <CHECK_STATE+0x112>
	{
		CURRENT_STATE = STATE_AYRILMA;
 80056f4:	4b85      	ldr	r3, [pc, #532]	; (800590c <CHECK_STATE+0x31c>)
 80056f6:	2203      	movs	r2, #3
 80056f8:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_AYRILMA_STRING);
 80056fa:	498b      	ldr	r1, [pc, #556]	; (8005928 <CHECK_STATE+0x338>)
 80056fc:	4885      	ldr	r0, [pc, #532]	; (8005914 <CHECK_STATE+0x324>)
 80056fe:	f00b fcd9 	bl	80110b4 <siprintf>
	}

	if(STATE_TRANSITION_AKTIF_INIS)
 8005702:	4b82      	ldr	r3, [pc, #520]	; (800590c <CHECK_STATE+0x31c>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d11a      	bne.n	8005740 <CHECK_STATE+0x150>
 800570a:	4b88      	ldr	r3, [pc, #544]	; (800592c <CHECK_STATE+0x33c>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d116      	bne.n	8005740 <CHECK_STATE+0x150>
	{
		CURRENT_STATE = STATE_AKTIF_INIS;
 8005712:	4b7e      	ldr	r3, [pc, #504]	; (800590c <CHECK_STATE+0x31c>)
 8005714:	2204      	movs	r2, #4
 8005716:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_AKTIF_INIS_STRING);
 8005718:	4985      	ldr	r1, [pc, #532]	; (8005930 <CHECK_STATE+0x340>)
 800571a:	487e      	ldr	r0, [pc, #504]	; (8005914 <CHECK_STATE+0x324>)
 800571c:	f00b fcca 	bl	80110b4 <siprintf>
		initPID(&V_PID, 20, 0.01, 0, -500, 500, DESIRED_SPEED_AKTIF_INIS, 20);
 8005720:	2114      	movs	r1, #20
 8005722:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8005890 <CHECK_STATE+0x2a0>
 8005726:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 80058d0 <CHECK_STATE+0x2e0>
 800572a:	ed9f 3b6b 	vldr	d3, [pc, #428]	; 80058d8 <CHECK_STATE+0x2e8>
 800572e:	ed9f 2b5e 	vldr	d2, [pc, #376]	; 80058a8 <CHECK_STATE+0x2b8>
 8005732:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80058b0 <CHECK_STATE+0x2c0>
 8005736:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 80058e0 <CHECK_STATE+0x2f0>
 800573a:	4877      	ldr	r0, [pc, #476]	; (8005918 <CHECK_STATE+0x328>)
 800573c:	f7fe fb26 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_IRTIFA_SABITLEME)
 8005740:	4b72      	ldr	r3, [pc, #456]	; (800590c <CHECK_STATE+0x31c>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d126      	bne.n	8005796 <CHECK_STATE+0x1a6>
 8005748:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <CHECK_STATE+0x310>)
 800574a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	4b78      	ldr	r3, [pc, #480]	; (8005934 <CHECK_STATE+0x344>)
 8005754:	f7fb f9d4 	bl	8000b00 <__aeabi_dcmple>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01b      	beq.n	8005796 <CHECK_STATE+0x1a6>
	{
		CURRENT_STATE = STATE_IRTIFA_SABITLEME;
 800575e:	4b6b      	ldr	r3, [pc, #428]	; (800590c <CHECK_STATE+0x31c>)
 8005760:	2205      	movs	r2, #5
 8005762:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_IRTIFA_SABITLEME_STRING);
 8005764:	4974      	ldr	r1, [pc, #464]	; (8005938 <CHECK_STATE+0x348>)
 8005766:	486b      	ldr	r0, [pc, #428]	; (8005914 <CHECK_STATE+0x324>)
 8005768:	f00b fca4 	bl	80110b4 <siprintf>
		initPID(&V_PID, 25, 0.01, 0, -500, 500, DESIRED_SPEED_IRTIFA_SABITLEME, 20);
 800576c:	2114      	movs	r1, #20
 800576e:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80058a8 <CHECK_STATE+0x2b8>
 8005772:	ed9f 4b57 	vldr	d4, [pc, #348]	; 80058d0 <CHECK_STATE+0x2e0>
 8005776:	ed9f 3b58 	vldr	d3, [pc, #352]	; 80058d8 <CHECK_STATE+0x2e8>
 800577a:	ed9f 2b4b 	vldr	d2, [pc, #300]	; 80058a8 <CHECK_STATE+0x2b8>
 800577e:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80058b0 <CHECK_STATE+0x2c0>
 8005782:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80058e8 <CHECK_STATE+0x2f8>
 8005786:	4864      	ldr	r0, [pc, #400]	; (8005918 <CHECK_STATE+0x328>)
 8005788:	f7fe fb00 	bl	8003d8c <initPID>
		IRTIFA_SABITLEME_TIMER = HAL_GetTick();
 800578c:	f001 fd88 	bl	80072a0 <HAL_GetTick>
 8005790:	4603      	mov	r3, r0
 8005792:	4a6a      	ldr	r2, [pc, #424]	; (800593c <CHECK_STATE+0x34c>)
 8005794:	6013      	str	r3, [r2, #0]
	}

	if(STATE_TRANSITION_AKTIF_INIS_2)
 8005796:	f001 fd83 	bl	80072a0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	4b67      	ldr	r3, [pc, #412]	; (800593c <CHECK_STATE+0x34c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f643 2297 	movw	r2, #14999	; 0x3a97
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d91a      	bls.n	80057e0 <CHECK_STATE+0x1f0>
 80057aa:	4b58      	ldr	r3, [pc, #352]	; (800590c <CHECK_STATE+0x31c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d116      	bne.n	80057e0 <CHECK_STATE+0x1f0>
	{
		CURRENT_STATE = STATE_AKTIF_INIS_2;
 80057b2:	4b56      	ldr	r3, [pc, #344]	; (800590c <CHECK_STATE+0x31c>)
 80057b4:	2206      	movs	r2, #6
 80057b6:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_AKTIF_INIS_2_STRING);
 80057b8:	4961      	ldr	r1, [pc, #388]	; (8005940 <CHECK_STATE+0x350>)
 80057ba:	4856      	ldr	r0, [pc, #344]	; (8005914 <CHECK_STATE+0x324>)
 80057bc:	f00b fc7a 	bl	80110b4 <siprintf>
		initPID(&V_PID, 20, 0.01, 0, -500, 500, DESIRED_SPEED_AKTIF_INIS, 20);
 80057c0:	2114      	movs	r1, #20
 80057c2:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8005890 <CHECK_STATE+0x2a0>
 80057c6:	ed9f 4b42 	vldr	d4, [pc, #264]	; 80058d0 <CHECK_STATE+0x2e0>
 80057ca:	ed9f 3b43 	vldr	d3, [pc, #268]	; 80058d8 <CHECK_STATE+0x2e8>
 80057ce:	ed9f 2b36 	vldr	d2, [pc, #216]	; 80058a8 <CHECK_STATE+0x2b8>
 80057d2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80058b0 <CHECK_STATE+0x2c0>
 80057d6:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80058e0 <CHECK_STATE+0x2f0>
 80057da:	484f      	ldr	r0, [pc, #316]	; (8005918 <CHECK_STATE+0x328>)
 80057dc:	f7fe fad6 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_LANDING_1)
 80057e0:	4b47      	ldr	r3, [pc, #284]	; (8005900 <CHECK_STATE+0x310>)
 80057e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	4b56      	ldr	r3, [pc, #344]	; (8005944 <CHECK_STATE+0x354>)
 80057ec:	f7fb f988 	bl	8000b00 <__aeabi_dcmple>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01a      	beq.n	800582c <CHECK_STATE+0x23c>
 80057f6:	4b45      	ldr	r3, [pc, #276]	; (800590c <CHECK_STATE+0x31c>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d116      	bne.n	800582c <CHECK_STATE+0x23c>
	{
		CURRENT_STATE = STATE_LANDING_1;
 80057fe:	4b43      	ldr	r3, [pc, #268]	; (800590c <CHECK_STATE+0x31c>)
 8005800:	2207      	movs	r2, #7
 8005802:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_LANDING_1_STRING);
 8005804:	4950      	ldr	r1, [pc, #320]	; (8005948 <CHECK_STATE+0x358>)
 8005806:	4843      	ldr	r0, [pc, #268]	; (8005914 <CHECK_STATE+0x324>)
 8005808:	f00b fc54 	bl	80110b4 <siprintf>
		initPID(&V_PID, 20, 0.01, 0, -500, 500, DESIRED_SPEED_LANDING_1, 20);
 800580c:	2114      	movs	r1, #20
 800580e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80058f0 <CHECK_STATE+0x300>
 8005812:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80058d0 <CHECK_STATE+0x2e0>
 8005816:	ed9f 3b30 	vldr	d3, [pc, #192]	; 80058d8 <CHECK_STATE+0x2e8>
 800581a:	ed9f 2b23 	vldr	d2, [pc, #140]	; 80058a8 <CHECK_STATE+0x2b8>
 800581e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80058b0 <CHECK_STATE+0x2c0>
 8005822:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80058e0 <CHECK_STATE+0x2f0>
 8005826:	483c      	ldr	r0, [pc, #240]	; (8005918 <CHECK_STATE+0x328>)
 8005828:	f7fe fab0 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_LANDING_2)
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <CHECK_STATE+0x310>)
 800582e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	4b45      	ldr	r3, [pc, #276]	; (800594c <CHECK_STATE+0x35c>)
 8005838:	f7fb f962 	bl	8000b00 <__aeabi_dcmple>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01a      	beq.n	8005878 <CHECK_STATE+0x288>
 8005842:	4b32      	ldr	r3, [pc, #200]	; (800590c <CHECK_STATE+0x31c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b07      	cmp	r3, #7
 8005848:	d116      	bne.n	8005878 <CHECK_STATE+0x288>
	{
		CURRENT_STATE = STATE_LANDING_2;
 800584a:	4b30      	ldr	r3, [pc, #192]	; (800590c <CHECK_STATE+0x31c>)
 800584c:	2208      	movs	r2, #8
 800584e:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_LANDING_2_STRING);
 8005850:	493f      	ldr	r1, [pc, #252]	; (8005950 <CHECK_STATE+0x360>)
 8005852:	4830      	ldr	r0, [pc, #192]	; (8005914 <CHECK_STATE+0x324>)
 8005854:	f00b fc2e 	bl	80110b4 <siprintf>
		initPID(&V_PID, 25, 0.01, 0, -500, 500, DESIRED_SPEED_LANDING_2, 20);
 8005858:	2114      	movs	r1, #20
 800585a:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80058f8 <CHECK_STATE+0x308>
 800585e:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 80058d0 <CHECK_STATE+0x2e0>
 8005862:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80058d8 <CHECK_STATE+0x2e8>
 8005866:	ed9f 2b10 	vldr	d2, [pc, #64]	; 80058a8 <CHECK_STATE+0x2b8>
 800586a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80058b0 <CHECK_STATE+0x2c0>
 800586e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80058e8 <CHECK_STATE+0x2f8>
 8005872:	4829      	ldr	r0, [pc, #164]	; (8005918 <CHECK_STATE+0x328>)
 8005874:	f7fe fa8a 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_LANDING_3)
 8005878:	4b21      	ldr	r3, [pc, #132]	; (8005900 <CHECK_STATE+0x310>)
 800587a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <CHECK_STATE+0x364>)
 8005884:	f7fb f93c 	bl	8000b00 <__aeabi_dcmple>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d07f      	beq.n	800598e <CHECK_STATE+0x39e>
 800588e:	e063      	b.n	8005958 <CHECK_STATE+0x368>
 8005890:	00000000 	.word	0x00000000
 8005894:	c01c0000 	.word	0xc01c0000
 8005898:	00000000 	.word	0x00000000
 800589c:	40690000 	.word	0x40690000
 80058a0:	00000000 	.word	0x00000000
 80058a4:	c0690000 	.word	0xc0690000
	...
 80058b0:	47ae147b 	.word	0x47ae147b
 80058b4:	3f847ae1 	.word	0x3f847ae1
 80058b8:	00000000 	.word	0x00000000
 80058bc:	40140000 	.word	0x40140000
 80058c0:	00000000 	.word	0x00000000
 80058c4:	407c2000 	.word	0x407c2000
 80058c8:	00000000 	.word	0x00000000
 80058cc:	4075e000 	.word	0x4075e000
 80058d0:	00000000 	.word	0x00000000
 80058d4:	407f4000 	.word	0x407f4000
 80058d8:	00000000 	.word	0x00000000
 80058dc:	c07f4000 	.word	0xc07f4000
 80058e0:	00000000 	.word	0x00000000
 80058e4:	40340000 	.word	0x40340000
 80058e8:	00000000 	.word	0x00000000
 80058ec:	40390000 	.word	0x40390000
 80058f0:	00000000 	.word	0x00000000
 80058f4:	c0140000 	.word	0xc0140000
 80058f8:	00000000 	.word	0x00000000
 80058fc:	c0080000 	.word	0xc0080000
 8005900:	20000298 	.word	0x20000298
 8005904:	40240000 	.word	0x40240000
 8005908:	20001ae0 	.word	0x20001ae0
 800590c:	20000009 	.word	0x20000009
 8005910:	08016c80 	.word	0x08016c80
 8005914:	20001ae8 	.word	0x20001ae8
 8005918:	20000900 	.word	0x20000900
 800591c:	08016c88 	.word	0x08016c88
 8005920:	200002a0 	.word	0x200002a0
 8005924:	08016c94 	.word	0x08016c94
 8005928:	08016ca4 	.word	0x08016ca4
 800592c:	20000266 	.word	0x20000266
 8005930:	08016cac 	.word	0x08016cac
 8005934:	406f4000 	.word	0x406f4000
 8005938:	08016cb8 	.word	0x08016cb8
 800593c:	20000274 	.word	0x20000274
 8005940:	08016ccc 	.word	0x08016ccc
 8005944:	40490000 	.word	0x40490000
 8005948:	08016cdc 	.word	0x08016cdc
 800594c:	403e0000 	.word	0x403e0000
 8005950:	08016ce8 	.word	0x08016ce8
 8005954:	402e0000 	.word	0x402e0000
 8005958:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <CHECK_STATE+0x470>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d116      	bne.n	800598e <CHECK_STATE+0x39e>
	{
		CURRENT_STATE = STATE_LANDING_3;
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <CHECK_STATE+0x470>)
 8005962:	2209      	movs	r2, #9
 8005964:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_LANDING_3_STRING);
 8005966:	493f      	ldr	r1, [pc, #252]	; (8005a64 <CHECK_STATE+0x474>)
 8005968:	483f      	ldr	r0, [pc, #252]	; (8005a68 <CHECK_STATE+0x478>)
 800596a:	f00b fba3 	bl	80110b4 <siprintf>
		initPID(&V_PID, 30, 0.01, 0, -500, 500, DESIRED_SPEED_LANDING_3, 20);
 800596e:	2114      	movs	r1, #20
 8005970:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8005a20 <CHECK_STATE+0x430>
 8005974:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8005a28 <CHECK_STATE+0x438>
 8005978:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8005a30 <CHECK_STATE+0x440>
 800597c:	ed9f 2b2e 	vldr	d2, [pc, #184]	; 8005a38 <CHECK_STATE+0x448>
 8005980:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8005a40 <CHECK_STATE+0x450>
 8005984:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8005a48 <CHECK_STATE+0x458>
 8005988:	4838      	ldr	r0, [pc, #224]	; (8005a6c <CHECK_STATE+0x47c>)
 800598a:	f7fe f9ff 	bl	8003d8c <initPID>
	}

	if(STATE_TRANSITION_SALVAGE)
 800598e:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <CHECK_STATE+0x480>)
 8005990:	edd3 7a00 	vldr	s15, [r3]
 8005994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a0:	d835      	bhi.n	8005a0e <CHECK_STATE+0x41e>
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <CHECK_STATE+0x480>)
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80059ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b4:	db2b      	blt.n	8005a0e <CHECK_STATE+0x41e>
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <CHECK_STATE+0x470>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b09      	cmp	r3, #9
 80059bc:	d127      	bne.n	8005a0e <CHECK_STATE+0x41e>
	{
		CURRENT_STATE = STATE_SALVAGE;
 80059be:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <CHECK_STATE+0x470>)
 80059c0:	220a      	movs	r2, #10
 80059c2:	701a      	strb	r2, [r3, #0]
		sprintf(CURRENT_STATE_STRING, STATE_SALVAGE_STRING);
 80059c4:	492b      	ldr	r1, [pc, #172]	; (8005a74 <CHECK_STATE+0x484>)
 80059c6:	4828      	ldr	r0, [pc, #160]	; (8005a68 <CHECK_STATE+0x478>)
 80059c8:	f00b fb74 	bl	80110b4 <siprintf>
		initPID(&V_PID, 0, 0.00, 0, -200, 200, 0, 20);
 80059cc:	2114      	movs	r1, #20
 80059ce:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8005a38 <CHECK_STATE+0x448>
 80059d2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8005a50 <CHECK_STATE+0x460>
 80059d6:	ed9f 3b20 	vldr	d3, [pc, #128]	; 8005a58 <CHECK_STATE+0x468>
 80059da:	ed9f 2b17 	vldr	d2, [pc, #92]	; 8005a38 <CHECK_STATE+0x448>
 80059de:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8005a38 <CHECK_STATE+0x448>
 80059e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005a38 <CHECK_STATE+0x448>
 80059e6:	4821      	ldr	r0, [pc, #132]	; (8005a6c <CHECK_STATE+0x47c>)
 80059e8:	f7fe f9d0 	bl	8003d8c <initPID>
		resetPID(&V_PID);
 80059ec:	481f      	ldr	r0, [pc, #124]	; (8005a6c <CHECK_STATE+0x47c>)
 80059ee:	f7fe f98b 	bl	8003d08 <resetPID>
		setMotorThrottle(mt1, 1000);
 80059f2:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <CHECK_STATE+0x488>)
 80059f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059fc:	f7fe f959 	bl	8003cb2 <setMotorThrottle>
		setMotorThrottle(mt2, 1000);
 8005a00:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <CHECK_STATE+0x48c>)
 8005a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a0a:	f7fe f952 	bl	8003cb2 <setMotorThrottle>
	}


	// Ayrılma ve motor kontrolleri
	if(CURRENT_STATE == STATE_AYRILMA)
 8005a0e:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <CHECK_STATE+0x470>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d101      	bne.n	8005a1a <CHECK_STATE+0x42a>
	{
		DETACH();
 8005a16:	f000 f833 	bl	8005a80 <DETACH>
	}

}
 8005a1a:	bf00      	nop
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	00000000 	.word	0x00000000
 8005a24:	bff00000 	.word	0xbff00000
 8005a28:	00000000 	.word	0x00000000
 8005a2c:	407f4000 	.word	0x407f4000
 8005a30:	00000000 	.word	0x00000000
 8005a34:	c07f4000 	.word	0xc07f4000
	...
 8005a40:	47ae147b 	.word	0x47ae147b
 8005a44:	3f847ae1 	.word	0x3f847ae1
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	403e0000 	.word	0x403e0000
 8005a50:	00000000 	.word	0x00000000
 8005a54:	40690000 	.word	0x40690000
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	c0690000 	.word	0xc0690000
 8005a60:	20000009 	.word	0x20000009
 8005a64:	08016cf4 	.word	0x08016cf4
 8005a68:	20001ae8 	.word	0x20001ae8
 8005a6c:	20000900 	.word	0x20000900
 8005a70:	20001ae0 	.word	0x20001ae0
 8005a74:	08016d00 	.word	0x08016d00
 8005a78:	20001c6c 	.word	0x20001c6c
 8005a7c:	20001cb8 	.word	0x20001cb8

08005a80 <DETACH>:

void DETACH(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	DETACH_CONTROL = 1;
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <DETACH+0x1c>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
	setMotorThrottle(servo, 2000);
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <DETACH+0x20>)
 8005a8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a94:	f7fe f90d 	bl	8003cb2 <setMotorThrottle>
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000266 	.word	0x20000266
 8005aa0:	20001c88 	.word	0x20001c88

08005aa4 <ATTACH>:

void ATTACH(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
	DETACH_CONTROL = 0;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <ATTACH+0x1c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
	setMotorThrottle(servo, 1000);
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <ATTACH+0x20>)
 8005ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ab8:	f7fe f8fb 	bl	8003cb2 <setMotorThrottle>
}
 8005abc:	bf00      	nop
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000266 	.word	0x20000266
 8005ac4:	20001c88 	.word	0x20001c88

08005ac8 <GET_DATA>:

char * str_xbee;
void GET_DATA(void)
{
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	ed2d 8b0a 	vpush	{d8-d12}
 8005ad0:	b0bf      	sub	sp, #252	; 0xfc
 8005ad2:	af2a      	add	r7, sp, #168	; 0xa8

	if(HAL_GetTick()-LOOP_TIMER_1HZ > 920)
 8005ad4:	f001 fbe4 	bl	80072a0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4bab      	ldr	r3, [pc, #684]	; (8005d88 <GET_DATA+0x2c0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8005ae4:	f240 8247 	bls.w	8005f76 <GET_DATA+0x4ae>
	{
		GPS_Process((char)*RAW_GPS);
 8005ae8:	4ba8      	ldr	r3, [pc, #672]	; (8005d8c <GET_DATA+0x2c4>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fc fddf 	bl	80026b0 <GPS_Process>
		GET_CMD();
 8005af2:	f000 fcc1 	bl	8006478 <GET_CMD>
		PACKAGE_COUNT++;
 8005af6:	4ba6      	ldr	r3, [pc, #664]	; (8005d90 <GET_DATA+0x2c8>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	4ba4      	ldr	r3, [pc, #656]	; (8005d90 <GET_DATA+0x2c8>)
 8005b00:	801a      	strh	r2, [r3, #0]
		BMX160_getEulerAngles(&ROLL, &PITCH, &YAW);
 8005b02:	4aa4      	ldr	r2, [pc, #656]	; (8005d94 <GET_DATA+0x2cc>)
 8005b04:	49a4      	ldr	r1, [pc, #656]	; (8005d98 <GET_DATA+0x2d0>)
 8005b06:	48a5      	ldr	r0, [pc, #660]	; (8005d9c <GET_DATA+0x2d4>)
 8005b08:	f7fc fa0e 	bl	8001f28 <BMX160_getEulerAngles>
		BMP388_readData(&BMP388_T, &BMP388_P);
 8005b0c:	49a4      	ldr	r1, [pc, #656]	; (8005da0 <GET_DATA+0x2d8>)
 8005b0e:	48a5      	ldr	r0, [pc, #660]	; (8005da4 <GET_DATA+0x2dc>)
 8005b10:	f7fb fd10 	bl	8001534 <BMP388_readData>
		BMP388_PREV_ALT = BMP388_ALT;
 8005b14:	4ba4      	ldr	r3, [pc, #656]	; (8005da8 <GET_DATA+0x2e0>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	49a4      	ldr	r1, [pc, #656]	; (8005dac <GET_DATA+0x2e4>)
 8005b1c:	e9c1 2300 	strd	r2, r3, [r1]
		BMP388_ALT = BMP388_readAltitude(BMP388_P, 1013) - BMP388_refAlt;
 8005b20:	4b9f      	ldr	r3, [pc, #636]	; (8005da0 <GET_DATA+0x2d8>)
 8005b22:	ed93 7b00 	vldr	d7, [r3]
 8005b26:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8005db0 <GET_DATA+0x2e8>
 8005b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b2e:	eef0 0a67 	vmov.f32	s1, s15
 8005b32:	f7fb fea9 	bl	8001888 <BMP388_readAltitude>
 8005b36:	ee10 3a10 	vmov	r3, s0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fd0c 	bl	8000558 <__aeabi_f2d>
 8005b40:	4b9c      	ldr	r3, [pc, #624]	; (8005db4 <GET_DATA+0x2ec>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fba7 	bl	8000298 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4996      	ldr	r1, [pc, #600]	; (8005da8 <GET_DATA+0x2e0>)
 8005b50:	e9c1 2300 	strd	r2, r3, [r1]
		BMP388_VELOCITY = BMP388_ALT - BMP388_PREV_ALT;
 8005b54:	4b94      	ldr	r3, [pc, #592]	; (8005da8 <GET_DATA+0x2e0>)
 8005b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b5a:	4b94      	ldr	r3, [pc, #592]	; (8005dac <GET_DATA+0x2e4>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f7fa fb9a 	bl	8000298 <__aeabi_dsub>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4993      	ldr	r1, [pc, #588]	; (8005db8 <GET_DATA+0x2f0>)
 8005b6a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Start_IT(&hadc1);
 8005b6e:	4893      	ldr	r0, [pc, #588]	; (8005dbc <GET_DATA+0x2f4>)
 8005b70:	f001 fc0a 	bl	8007388 <HAL_ADC_Start_IT>
		EEPROM_1HZ();
 8005b74:	f000 fd36 	bl	80065e4 <EEPROM_1HZ>
		DS3231_getTime();
 8005b78:	f7fc fb62 	bl	8002240 <DS3231_getTime>

		if(dataArrived)
 8005b7c:	4b90      	ldr	r3, [pc, #576]	; (8005dc0 <GET_DATA+0x2f8>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 814c 	beq.w	8005e1e <GET_DATA+0x356>
		{

			str_xbee = strstr(xbee_rx_buffer,"395669,");
 8005b86:	498f      	ldr	r1, [pc, #572]	; (8005dc4 <GET_DATA+0x2fc>)
 8005b88:	488f      	ldr	r0, [pc, #572]	; (8005dc8 <GET_DATA+0x300>)
 8005b8a:	f00b fb24 	bl	80111d6 <strstr>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4a8e      	ldr	r2, [pc, #568]	; (8005dcc <GET_DATA+0x304>)
 8005b92:	6013      	str	r3, [r2, #0]
			sscanf(str_xbee,"395669,%f,%f,%f,%f\r\n", &tPressure, &tLatitude, &tLongitude, &tGPSAltitude);
 8005b94:	4b8d      	ldr	r3, [pc, #564]	; (8005dcc <GET_DATA+0x304>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	4b8d      	ldr	r3, [pc, #564]	; (8005dd0 <GET_DATA+0x308>)
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	4b8d      	ldr	r3, [pc, #564]	; (8005dd4 <GET_DATA+0x30c>)
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	4b8d      	ldr	r3, [pc, #564]	; (8005dd8 <GET_DATA+0x310>)
 8005ba2:	4a8e      	ldr	r2, [pc, #568]	; (8005ddc <GET_DATA+0x314>)
 8005ba4:	498e      	ldr	r1, [pc, #568]	; (8005de0 <GET_DATA+0x318>)
 8005ba6:	f00b faa5 	bl	80110f4 <siscanf>
			memset(xbee_rx_buffer,1,256);
 8005baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4885      	ldr	r0, [pc, #532]	; (8005dc8 <GET_DATA+0x300>)
 8005bb2:	f00a fbc3 	bl	801033c <memset>
			tAltitude = BMP388_readAltitude(tPressure, 1013);
 8005bb6:	4b89      	ldr	r3, [pc, #548]	; (8005ddc <GET_DATA+0x314>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fa fccc 	bl	8000558 <__aeabi_f2d>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8005db0 <GET_DATA+0x2e8>
 8005bc8:	ec43 2b10 	vmov	d0, r2, r3
 8005bcc:	f7fb fe5c 	bl	8001888 <BMP388_readAltitude>
 8005bd0:	eef0 7a40 	vmov.f32	s15, s0
 8005bd4:	4b83      	ldr	r3, [pc, #524]	; (8005de4 <GET_DATA+0x31c>)
 8005bd6:	edc3 7a00 	vstr	s15, [r3]
			tAltitude = tAltitude - BMP388_refAlt - 55.0;
 8005bda:	4b82      	ldr	r3, [pc, #520]	; (8005de4 <GET_DATA+0x31c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fcba 	bl	8000558 <__aeabi_f2d>
 8005be4:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <GET_DATA+0x2ec>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fb55 	bl	8000298 <__aeabi_dsub>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	4b7b      	ldr	r3, [pc, #492]	; (8005de8 <GET_DATA+0x320>)
 8005bfc:	f7fa fb4c 	bl	8000298 <__aeabi_dsub>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	f7fa fff6 	bl	8000bf8 <__aeabi_d2f>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4a75      	ldr	r2, [pc, #468]	; (8005de4 <GET_DATA+0x31c>)
 8005c10:	6013      	str	r3, [r2, #0]
			subtraction = tAltitude - BMP388_ALT;
 8005c12:	4b74      	ldr	r3, [pc, #464]	; (8005de4 <GET_DATA+0x31c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fc9e 	bl	8000558 <__aeabi_f2d>
 8005c1c:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <GET_DATA+0x2e0>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fb39 	bl	8000298 <__aeabi_dsub>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f7fa ffe3 	bl	8000bf8 <__aeabi_d2f>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <GET_DATA+0x324>)
 8005c36:	6013      	str	r3, [r2, #0]

			//snprintf(XBee_Buffer,256, "58479,%d,%d/%d/%d\r\n",PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec);



			snprintf(XBee_Buffer,256, "395669,%d,%d:%d:%d,%.1f, %.1f, %.1f,%.1f, %.1f, %.1f,%.1f,%.2f,%f,%f,%.1f,%.1f,%.1f,%.1f,%s,%.0f,%.0f,%.0f,%d,%s\r\n",
 8005c38:	4b55      	ldr	r3, [pc, #340]	; (8005d90 <GET_DATA+0x2c8>)
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
			PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P,tPressure, BMP388_ALT,tAltitude, subtraction,VELOCITY,BMP388_T,VOLTAGE,hgps
 8005c3e:	4b6c      	ldr	r3, [pc, #432]	; (8005df0 <GET_DATA+0x328>)
 8005c40:	789b      	ldrb	r3, [r3, #2]
			snprintf(XBee_Buffer,256, "395669,%d,%d:%d:%d,%.1f, %.1f, %.1f,%.1f, %.1f, %.1f,%.1f,%.2f,%f,%f,%.1f,%.1f,%.1f,%.1f,%s,%.0f,%.0f,%.0f,%d,%s\r\n",
 8005c42:	461e      	mov	r6, r3
			PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P,tPressure, BMP388_ALT,tAltitude, subtraction,VELOCITY,BMP388_T,VOLTAGE,hgps
 8005c44:	4b6a      	ldr	r3, [pc, #424]	; (8005df0 <GET_DATA+0x328>)
 8005c46:	785b      	ldrb	r3, [r3, #1]
			snprintf(XBee_Buffer,256, "395669,%d,%d:%d:%d,%.1f, %.1f, %.1f,%.1f, %.1f, %.1f,%.1f,%.2f,%f,%f,%.1f,%.1f,%.1f,%.1f,%s,%.0f,%.0f,%.0f,%d,%s\r\n",
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
			PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P,tPressure, BMP388_ALT,tAltitude, subtraction,VELOCITY,BMP388_T,VOLTAGE,hgps
 8005c4a:	4b69      	ldr	r3, [pc, #420]	; (8005df0 <GET_DATA+0x328>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
			snprintf(XBee_Buffer,256, "395669,%d,%d:%d:%d,%.1f, %.1f, %.1f,%.1f, %.1f, %.1f,%.1f,%.2f,%f,%f,%.1f,%.1f,%.1f,%.1f,%s,%.0f,%.0f,%.0f,%d,%s\r\n",
 8005c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <GET_DATA+0x2d8>)
 8005c52:	ed93 bb00 	vldr	d11, [r3]
 8005c56:	4b61      	ldr	r3, [pc, #388]	; (8005ddc <GET_DATA+0x314>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fc7c 	bl	8000558 <__aeabi_f2d>
 8005c60:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8005c64:	4b50      	ldr	r3, [pc, #320]	; (8005da8 <GET_DATA+0x2e0>)
 8005c66:	ed93 cb00 	vldr	d12, [r3]
 8005c6a:	4b5e      	ldr	r3, [pc, #376]	; (8005de4 <GET_DATA+0x31c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fc72 	bl	8000558 <__aeabi_f2d>
 8005c74:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8005c78:	4b5c      	ldr	r3, [pc, #368]	; (8005dec <GET_DATA+0x324>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa fc6b 	bl	8000558 <__aeabi_f2d>
 8005c82:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8005c86:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <GET_DATA+0x32c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fa fc64 	bl	8000558 <__aeabi_f2d>
 8005c90:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8005c94:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <GET_DATA+0x2dc>)
 8005c96:	ed93 ab00 	vldr	d10, [r3]
 8005c9a:	4b57      	ldr	r3, [pc, #348]	; (8005df8 <GET_DATA+0x330>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa fc5a 	bl	8000558 <__aeabi_f2d>
 8005ca4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005ca8:	4b54      	ldr	r3, [pc, #336]	; (8005dfc <GET_DATA+0x334>)
 8005caa:	ed93 9b86 	vldr	d9, [r3, #536]	; 0x218
 8005cae:	4b53      	ldr	r3, [pc, #332]	; (8005dfc <GET_DATA+0x334>)
 8005cb0:	ed93 8b8a 	vldr	d8, [r3, #552]	; 0x228
			.GPGGA.LatitudeDecimal,hgps.GPGGA.LongitudeDecimal,hgps.GPGGA.MSL_Altitude,tLatitude, tLongitude, tGPSAltitude,CURRENT_STATE_STRING,
 8005cb4:	4b51      	ldr	r3, [pc, #324]	; (8005dfc <GET_DATA+0x334>)
 8005cb6:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
			snprintf(XBee_Buffer,256, "395669,%d,%d:%d:%d,%.1f, %.1f, %.1f,%.1f, %.1f, %.1f,%.1f,%.2f,%f,%f,%.1f,%.1f,%.1f,%.1f,%s,%.0f,%.0f,%.0f,%d,%s\r\n",
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fa fc4c 	bl	8000558 <__aeabi_f2d>
 8005cc0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005cc4:	4b44      	ldr	r3, [pc, #272]	; (8005dd8 <GET_DATA+0x310>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fc45 	bl	8000558 <__aeabi_f2d>
 8005cce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005cd2:	4b40      	ldr	r3, [pc, #256]	; (8005dd4 <GET_DATA+0x30c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc3e 	bl	8000558 <__aeabi_f2d>
 8005cdc:	e9c7 0100 	strd	r0, r1, [r7]
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <GET_DATA+0x308>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fa fc37 	bl	8000558 <__aeabi_f2d>
 8005cea:	4682      	mov	sl, r0
 8005cec:	468b      	mov	fp, r1
 8005cee:	4b2a      	ldr	r3, [pc, #168]	; (8005d98 <GET_DATA+0x2d0>)
 8005cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cf4:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <GET_DATA+0x2d4>)
 8005cf6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005cfa:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <GET_DATA+0x2cc>)
 8005cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d00:	4b3f      	ldr	r3, [pc, #252]	; (8005e00 <GET_DATA+0x338>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <GET_DATA+0x33c>)
 8005d06:	9329      	str	r3, [sp, #164]	; 0xa4
 8005d08:	9228      	str	r2, [sp, #160]	; 0xa0
 8005d0a:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8005d0e:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 8005d12:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8005d16:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <GET_DATA+0x340>)
 8005d18:	9320      	str	r3, [sp, #128]	; 0x80
 8005d1a:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
 8005d1e:	ed97 7b00 	vldr	d7, [r7]
 8005d22:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005d26:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d2a:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8005d2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005d32:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8005d36:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8005d3a:	ed8d 9b14 	vstr	d9, [sp, #80]	; 0x50
 8005d3e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005d42:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005d46:	ed8d ab10 	vstr	d10, [sp, #64]	; 0x40
 8005d4a:	ed97 7b08 	vldr	d7, [r7, #32]
 8005d4e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005d52:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005d56:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005d5a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005d5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d62:	ed8d cb08 	vstr	d12, [sp, #32]
 8005d66:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005d6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d6e:	ed8d bb04 	vstr	d11, [sp, #16]
 8005d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d74:	9202      	str	r2, [sp, #8]
 8005d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d78:	9201      	str	r2, [sp, #4]
 8005d7a:	9600      	str	r6, [sp, #0]
 8005d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7e:	4a23      	ldr	r2, [pc, #140]	; (8005e0c <GET_DATA+0x344>)
 8005d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d84:	e044      	b.n	8005e10 <GET_DATA+0x348>
 8005d86:	bf00      	nop
 8005d88:	20000278 	.word	0x20000278
 8005d8c:	20002e10 	.word	0x20002e10
 8005d90:	20000264 	.word	0x20000264
 8005d94:	20000028 	.word	0x20000028
 8005d98:	20000020 	.word	0x20000020
 8005d9c:	20000018 	.word	0x20000018
 8005da0:	20000290 	.word	0x20000290
 8005da4:	20000288 	.word	0x20000288
 8005da8:	20000298 	.word	0x20000298
 8005dac:	200002a0 	.word	0x200002a0
 8005db0:	447d4000 	.word	0x447d4000
 8005db4:	200002a8 	.word	0x200002a8
 8005db8:	20002df0 	.word	0x20002df0
 8005dbc:	20000808 	.word	0x20000808
 8005dc0:	200002b7 	.word	0x200002b7
 8005dc4:	08016d0c 	.word	0x08016d0c
 8005dc8:	20001cc0 	.word	0x20001cc0
 8005dcc:	20001afc 	.word	0x20001afc
 8005dd0:	20002df8 	.word	0x20002df8
 8005dd4:	20001ca0 	.word	0x20001ca0
 8005dd8:	20001c80 	.word	0x20001c80
 8005ddc:	20000970 	.word	0x20000970
 8005de0:	08016d14 	.word	0x08016d14
 8005de4:	20000aa0 	.word	0x20000aa0
 8005de8:	404b8000 	.word	0x404b8000
 8005dec:	20001ca4 	.word	0x20001ca4
 8005df0:	20000564 	.word	0x20000564
 8005df4:	20001ae0 	.word	0x20001ae0
 8005df8:	20001cb0 	.word	0x20001cb0
 8005dfc:	20000570 	.word	0x20000570
 8005e00:	200002b8 	.word	0x200002b8
 8005e04:	20002dfc 	.word	0x20002dfc
 8005e08:	20001ae8 	.word	0x20001ae8
 8005e0c:	08016d2c 	.word	0x08016d2c
 8005e10:	4870      	ldr	r0, [pc, #448]	; (8005fd4 <GET_DATA+0x50c>)
 8005e12:	f00b f91b 	bl	801104c <sniprintf>




			//snprintf(XBee_Buffer,256 ,"58479, %d\r\n",10);
			dataArrived = 0;
 8005e16:	4b70      	ldr	r3, [pc, #448]	; (8005fd8 <GET_DATA+0x510>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e087      	b.n	8005f2e <GET_DATA+0x466>

			//memset(xbee_rx_buffer,0,sizeof(xbee_rx_buffer));
		}
		else
		{
			snprintf(XBee_Buffer,256, "395669,%d, %d:%d:%d, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.2f, %f, %f, %.1f, %s, %.0f, %.0f, %.0f, %d, %s\r\n",
 8005e1e:	4b6f      	ldr	r3, [pc, #444]	; (8005fdc <GET_DATA+0x514>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
						PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P, tPressure, BMP388_ALT, tAltitude, subtraction, VELOCITY,BMP388_T,VOLTAGE,hgps
 8005e24:	4b6e      	ldr	r3, [pc, #440]	; (8005fe0 <GET_DATA+0x518>)
 8005e26:	789b      	ldrb	r3, [r3, #2]
			snprintf(XBee_Buffer,256, "395669,%d, %d:%d:%d, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.2f, %f, %f, %.1f, %s, %.0f, %.0f, %.0f, %d, %s\r\n",
 8005e28:	461e      	mov	r6, r3
						PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P, tPressure, BMP388_ALT, tAltitude, subtraction, VELOCITY,BMP388_T,VOLTAGE,hgps
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	; (8005fe0 <GET_DATA+0x518>)
 8005e2c:	785b      	ldrb	r3, [r3, #1]
			snprintf(XBee_Buffer,256, "395669,%d, %d:%d:%d, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.2f, %f, %f, %.1f, %s, %.0f, %.0f, %.0f, %d, %s\r\n",
 8005e2e:	64bb      	str	r3, [r7, #72]	; 0x48
						PACKAGE_COUNT,rtc.hour,rtc.min,rtc.sec,BMP388_P, tPressure, BMP388_ALT, tAltitude, subtraction, VELOCITY,BMP388_T,VOLTAGE,hgps
 8005e30:	4b6b      	ldr	r3, [pc, #428]	; (8005fe0 <GET_DATA+0x518>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
			snprintf(XBee_Buffer,256, "395669,%d, %d:%d:%d, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.2f, %f, %f, %.1f, %s, %.0f, %.0f, %.0f, %d, %s\r\n",
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	4b6b      	ldr	r3, [pc, #428]	; (8005fe4 <GET_DATA+0x51c>)
 8005e38:	ed93 bb00 	vldr	d11, [r3]
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <GET_DATA+0x520>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa fb89 	bl	8000558 <__aeabi_f2d>
 8005e46:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8005e4a:	4b68      	ldr	r3, [pc, #416]	; (8005fec <GET_DATA+0x524>)
 8005e4c:	ed93 cb00 	vldr	d12, [r3]
 8005e50:	4b67      	ldr	r3, [pc, #412]	; (8005ff0 <GET_DATA+0x528>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fa fb7f 	bl	8000558 <__aeabi_f2d>
 8005e5a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8005e5e:	4b65      	ldr	r3, [pc, #404]	; (8005ff4 <GET_DATA+0x52c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa fb78 	bl	8000558 <__aeabi_f2d>
 8005e68:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8005e6c:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <GET_DATA+0x530>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fa fb71 	bl	8000558 <__aeabi_f2d>
 8005e76:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8005e7a:	4b60      	ldr	r3, [pc, #384]	; (8005ffc <GET_DATA+0x534>)
 8005e7c:	ed93 ab00 	vldr	d10, [r3]
 8005e80:	4b5f      	ldr	r3, [pc, #380]	; (8006000 <GET_DATA+0x538>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fa fb67 	bl	8000558 <__aeabi_f2d>
 8005e8a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <GET_DATA+0x53c>)
 8005e90:	ed93 9b86 	vldr	d9, [r3, #536]	; 0x218
 8005e94:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <GET_DATA+0x53c>)
 8005e96:	ed93 8b8a 	vldr	d8, [r3, #552]	; 0x228
						.GPGGA.LatitudeDecimal,hgps.GPGGA.LongitudeDecimal,hgps.GPGGA.MSL_Altitude,CURRENT_STATE_STRING,
 8005e9a:	4b5a      	ldr	r3, [pc, #360]	; (8006004 <GET_DATA+0x53c>)
 8005e9c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
			snprintf(XBee_Buffer,256, "395669,%d, %d:%d:%d, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.1f, %.2f, %f, %f, %.1f, %s, %.0f, %.0f, %.0f, %d, %s\r\n",
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fa fb59 	bl	8000558 <__aeabi_f2d>
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	468b      	mov	fp, r1
 8005eaa:	4b57      	ldr	r3, [pc, #348]	; (8006008 <GET_DATA+0x540>)
 8005eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb0:	4b56      	ldr	r3, [pc, #344]	; (800600c <GET_DATA+0x544>)
 8005eb2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005eb6:	4b56      	ldr	r3, [pc, #344]	; (8006010 <GET_DATA+0x548>)
 8005eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ebc:	4b55      	ldr	r3, [pc, #340]	; (8006014 <GET_DATA+0x54c>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b55      	ldr	r3, [pc, #340]	; (8006018 <GET_DATA+0x550>)
 8005ec2:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ec4:	9222      	str	r2, [sp, #136]	; 0x88
 8005ec6:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8005eca:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8005ece:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8005ed2:	4b52      	ldr	r3, [pc, #328]	; (800601c <GET_DATA+0x554>)
 8005ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed6:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 8005eda:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8005ede:	ed8d 9b14 	vstr	d9, [sp, #80]	; 0x50
 8005ee2:	ed97 7b06 	vldr	d7, [r7, #24]
 8005ee6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005eea:	ed8d ab10 	vstr	d10, [sp, #64]	; 0x40
 8005eee:	ed97 7b08 	vldr	d7, [r7, #32]
 8005ef2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005ef6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005efa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005efe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005f02:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005f06:	ed8d cb08 	vstr	d12, [sp, #32]
 8005f0a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005f0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005f12:	ed8d bb04 	vstr	d11, [sp, #16]
 8005f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1c:	9201      	str	r2, [sp, #4]
 8005f1e:	9600      	str	r6, [sp, #0]
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	4a3f      	ldr	r2, [pc, #252]	; (8006020 <GET_DATA+0x558>)
 8005f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f28:	482a      	ldr	r0, [pc, #168]	; (8005fd4 <GET_DATA+0x50c>)
 8005f2a:	f00b f88f 	bl	801104c <sniprintf>
						PITCH,ROLL,YAW,RotationCount,VIDEO_STATE);
		}


		status = HAL_UART_Transmit_IT(&huart1, (uint8_t*)XBee_Buffer, strlen(XBee_Buffer));
 8005f2e:	4829      	ldr	r0, [pc, #164]	; (8005fd4 <GET_DATA+0x50c>)
 8005f30:	f7fa f956 	bl	80001e0 <strlen>
 8005f34:	4603      	mov	r3, r0
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4926      	ldr	r1, [pc, #152]	; (8005fd4 <GET_DATA+0x50c>)
 8005f3c:	4839      	ldr	r0, [pc, #228]	; (8006024 <GET_DATA+0x55c>)
 8005f3e:	f006 f84a 	bl	800bfd6 <HAL_UART_Transmit_IT>
 8005f42:	4603      	mov	r3, r0
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <GET_DATA+0x560>)
 8005f48:	701a      	strb	r2, [r3, #0]


		SD_write(XBee_Buffer);
 8005f4a:	4822      	ldr	r0, [pc, #136]	; (8005fd4 <GET_DATA+0x50c>)
 8005f4c:	f000 fa48 	bl	80063e0 <SD_write>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f54:	4835      	ldr	r0, [pc, #212]	; (800602c <GET_DATA+0x564>)
 8005f56:	f002 fca2 	bl	800889e <HAL_GPIO_TogglePin>
		if(CURRENT_STATE == STATE_SALVAGE)
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <GET_DATA+0x568>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b0a      	cmp	r3, #10
 8005f60:	d104      	bne.n	8005f6c <GET_DATA+0x4a4>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8005f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f66:	4833      	ldr	r0, [pc, #204]	; (8006034 <GET_DATA+0x56c>)
 8005f68:	f002 fc99 	bl	800889e <HAL_GPIO_TogglePin>
		}
		LOOP_TIMER_1HZ = HAL_GetTick();
 8005f6c:	f001 f998 	bl	80072a0 <HAL_GetTick>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4a31      	ldr	r2, [pc, #196]	; (8006038 <GET_DATA+0x570>)
 8005f74:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick()-LOOP_TIMER_50HZ > 20)
 8005f76:	f001 f993 	bl	80072a0 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	; (800603c <GET_DATA+0x574>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b14      	cmp	r3, #20
 8005f84:	d91f      	bls.n	8005fc6 <GET_DATA+0x4fe>
	{
		CHECK_STATE();
 8005f86:	f7ff fb33 	bl	80055f0 <CHECK_STATE>
		READ_BAROMETER();
 8005f8a:	f000 f8e1 	bl	8006150 <READ_BAROMETER>
		VELOCITY = (ACTUAL_ALTITUDE - PREV_ALTITUDE)*50; //(ACTUAL_PRESSURE - ACTUAL_PREV_PRESS)/11.7*50
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <GET_DATA+0x578>)
 8005f90:	ed93 7a00 	vldr	s14, [r3]
 8005f94:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <GET_DATA+0x57c>)
 8005f96:	edd3 7a00 	vldr	s15, [r3]
 8005f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006048 <GET_DATA+0x580>
 8005fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <GET_DATA+0x530>)
 8005fa8:	edc3 7a00 	vstr	s15, [r3]
		LOOP_TIMER_50HZ = HAL_GetTick();
 8005fac:	f001 f978 	bl	80072a0 <HAL_GetTick>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <GET_DATA+0x574>)
 8005fb4:	6013      	str	r3, [r2, #0]
		PREV_ALTITUDE = ACTUAL_ALTITUDE;
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <GET_DATA+0x578>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a22      	ldr	r2, [pc, #136]	; (8006044 <GET_DATA+0x57c>)
 8005fbc:	6013      	str	r3, [r2, #0]
		ACTUAL_PREV_PRESS = ACTUAL_PRESSURE;
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <GET_DATA+0x584>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a23      	ldr	r2, [pc, #140]	; (8006050 <GET_DATA+0x588>)
 8005fc4:	6013      	str	r3, [r2, #0]

	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3754      	adds	r7, #84	; 0x54
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	ecbd 8b0a 	vpop	{d8-d12}
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	20001b04 	.word	0x20001b04
 8005fd8:	200002b7 	.word	0x200002b7
 8005fdc:	20000264 	.word	0x20000264
 8005fe0:	20000564 	.word	0x20000564
 8005fe4:	20000290 	.word	0x20000290
 8005fe8:	20000970 	.word	0x20000970
 8005fec:	20000298 	.word	0x20000298
 8005ff0:	20000aa0 	.word	0x20000aa0
 8005ff4:	20001ca4 	.word	0x20001ca4
 8005ff8:	20001ae0 	.word	0x20001ae0
 8005ffc:	20000288 	.word	0x20000288
 8006000:	20001cb0 	.word	0x20001cb0
 8006004:	20000570 	.word	0x20000570
 8006008:	20000020 	.word	0x20000020
 800600c:	20000018 	.word	0x20000018
 8006010:	20000028 	.word	0x20000028
 8006014:	200002b8 	.word	0x200002b8
 8006018:	20002dfc 	.word	0x20002dfc
 800601c:	20001ae8 	.word	0x20001ae8
 8006020:	08016da0 	.word	0x08016da0
 8006024:	2000314c 	.word	0x2000314c
 8006028:	20002e0c 	.word	0x20002e0c
 800602c:	40020800 	.word	0x40020800
 8006030:	20000009 	.word	0x20000009
 8006034:	40020400 	.word	0x40020400
 8006038:	20000278 	.word	0x20000278
 800603c:	2000027c 	.word	0x2000027c
 8006040:	20000988 	.word	0x20000988
 8006044:	20001c78 	.word	0x20001c78
 8006048:	42480000 	.word	0x42480000
 800604c:	20000968 	.word	0x20000968
 8006050:	2000096c 	.word	0x2000096c

08006054 <PID_LOOP>:

void PID_LOOP(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
	if(DETACH_CONTROL && CURRENT_STATE < STATE_SALVAGE && CURRENT_STATE > STATE_AYRILMA)
 8006058:	4b33      	ldr	r3, [pc, #204]	; (8006128 <PID_LOOP+0xd4>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d060      	beq.n	8006122 <PID_LOOP+0xce>
 8006060:	4b32      	ldr	r3, [pc, #200]	; (800612c <PID_LOOP+0xd8>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b09      	cmp	r3, #9
 8006066:	d85c      	bhi.n	8006122 <PID_LOOP+0xce>
 8006068:	4b30      	ldr	r3, [pc, #192]	; (800612c <PID_LOOP+0xd8>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d958      	bls.n	8006122 <PID_LOOP+0xce>
	{
		if(MOTOR_CONTROL_1 && !MOTOR_CONTROL_2)
 8006070:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <PID_LOOP+0xdc>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <PID_LOOP+0x3a>
 8006078:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <PID_LOOP+0xe0>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <PID_LOOP+0x3a>
		{
			setMotorThrottle(mt1, CENTER_THROTTLE);
 8006080:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <PID_LOOP+0xe4>)
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	492d      	ldr	r1, [pc, #180]	; (800613c <PID_LOOP+0xe8>)
 8006086:	461a      	mov	r2, r3
 8006088:	c903      	ldmia	r1, {r0, r1}
 800608a:	f7fd fe12 	bl	8003cb2 <setMotorThrottle>
		}

		if(MOTOR_CONTROL_1 && MOTOR_CONTROL_2)
 800608e:	4b28      	ldr	r3, [pc, #160]	; (8006130 <PID_LOOP+0xdc>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d045      	beq.n	8006122 <PID_LOOP+0xce>
 8006096:	4b27      	ldr	r3, [pc, #156]	; (8006134 <PID_LOOP+0xe0>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d041      	beq.n	8006122 <PID_LOOP+0xce>
		{
			computePID(&V_PID,VELOCITY);
 800609e:	4b28      	ldr	r3, [pc, #160]	; (8006140 <PID_LOOP+0xec>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa fa58 	bl	8000558 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	ec43 2b10 	vmov	d0, r2, r3
 80060b0:	4824      	ldr	r0, [pc, #144]	; (8006144 <PID_LOOP+0xf0>)
 80060b2:	f7fd fec1 	bl	8003e38 <computePID>
			THROTTLE = CENTER_THROTTLE + V_PID.Output;
 80060b6:	4b20      	ldr	r3, [pc, #128]	; (8006138 <PID_LOOP+0xe4>)
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa fa3a 	bl	8000534 <__aeabi_i2d>
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <PID_LOOP+0xf0>)
 80060c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80060c6:	f7fa f8e9 	bl	800029c <__adddf3>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fa fd71 	bl	8000bb8 <__aeabi_d2uiz>
 80060d6:	4603      	mov	r3, r0
 80060d8:	b29a      	uxth	r2, r3
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <PID_LOOP+0xf4>)
 80060dc:	801a      	strh	r2, [r3, #0]
			if(THROTTLE >= THROTTLE_MAX) THROTTLE = THROTTLE_MAX;
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <PID_LOOP+0xf4>)
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d303      	bcc.n	80060f2 <PID_LOOP+0x9e>
 80060ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <PID_LOOP+0xf4>)
 80060f0:	801a      	strh	r2, [r3, #0]
			if(THROTTLE <= THROTTLE_MIN) THROTTLE = THROTTLE_MIN;
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <PID_LOOP+0xf4>)
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d803      	bhi.n	8006106 <PID_LOOP+0xb2>
 80060fe:	f240 424c 	movw	r2, #1100	; 0x44c
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <PID_LOOP+0xf4>)
 8006104:	801a      	strh	r2, [r3, #0]
			setMotorThrottle(mt1, THROTTLE);
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <PID_LOOP+0xf4>)
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	490c      	ldr	r1, [pc, #48]	; (800613c <PID_LOOP+0xe8>)
 800610c:	461a      	mov	r2, r3
 800610e:	c903      	ldmia	r1, {r0, r1}
 8006110:	f7fd fdcf 	bl	8003cb2 <setMotorThrottle>
			setMotorThrottle(mt2, THROTTLE);
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <PID_LOOP+0xf4>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	490c      	ldr	r1, [pc, #48]	; (800614c <PID_LOOP+0xf8>)
 800611a:	461a      	mov	r2, r3
 800611c:	c903      	ldmia	r1, {r0, r1}
 800611e:	f7fd fdc8 	bl	8003cb2 <setMotorThrottle>
		}
	}
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000266 	.word	0x20000266
 800612c:	20000009 	.word	0x20000009
 8006130:	20000267 	.word	0x20000267
 8006134:	20000268 	.word	0x20000268
 8006138:	2000000a 	.word	0x2000000a
 800613c:	20001c6c 	.word	0x20001c6c
 8006140:	20001ae0 	.word	0x20001ae0
 8006144:	20000900 	.word	0x20000900
 8006148:	2000000c 	.word	0x2000000c
 800614c:	20001cb8 	.word	0x20001cb8

08006150 <READ_BAROMETER>:

void READ_BAROMETER(void)
{
 8006150:	b5b0      	push	{r4, r5, r7, lr}
 8006152:	af00      	add	r7, sp, #0
	BAROMETER_COUNTER++;
 8006154:	4b65      	ldr	r3, [pc, #404]	; (80062ec <READ_BAROMETER+0x19c>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	4b63      	ldr	r3, [pc, #396]	; (80062ec <READ_BAROMETER+0x19c>)
 800615e:	701a      	strb	r2, [r3, #0]
	MS5611_read_temp();
 8006160:	f7fc fb4c 	bl	80027fc <MS5611_read_temp>
	MS5611_read_press();
 8006164:	f7fc fb84 	bl	8002870 <MS5611_read_press>
	MS5611_calculate();
 8006168:	f7fc fbc2 	bl	80028f0 <MS5611_calculate>
	PRESS_TOTAL_AVG -= PRESS_ROTATING_MEM[PRESS_MEM_LOCATION];
 800616c:	4b60      	ldr	r3, [pc, #384]	; (80062f0 <READ_BAROMETER+0x1a0>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b60      	ldr	r3, [pc, #384]	; (80062f4 <READ_BAROMETER+0x1a4>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	4619      	mov	r1, r3
 8006176:	4b60      	ldr	r3, [pc, #384]	; (80062f8 <READ_BAROMETER+0x1a8>)
 8006178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	4a5c      	ldr	r2, [pc, #368]	; (80062f0 <READ_BAROMETER+0x1a0>)
 8006180:	6013      	str	r3, [r2, #0]
	PRESS_ROTATING_MEM[PRESS_MEM_LOCATION] = ms5611_t.P;
 8006182:	4b5c      	ldr	r3, [pc, #368]	; (80062f4 <READ_BAROMETER+0x1a4>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	4619      	mov	r1, r3
 8006188:	4b5c      	ldr	r3, [pc, #368]	; (80062fc <READ_BAROMETER+0x1ac>)
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	4a5a      	ldr	r2, [pc, #360]	; (80062f8 <READ_BAROMETER+0x1a8>)
 800618e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	PRESS_TOTAL_AVG += PRESS_ROTATING_MEM[PRESS_MEM_LOCATION];
 8006192:	4b58      	ldr	r3, [pc, #352]	; (80062f4 <READ_BAROMETER+0x1a4>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	4b57      	ldr	r3, [pc, #348]	; (80062f8 <READ_BAROMETER+0x1a8>)
 800619a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800619e:	4b54      	ldr	r3, [pc, #336]	; (80062f0 <READ_BAROMETER+0x1a0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4413      	add	r3, r2
 80061a4:	4a52      	ldr	r2, [pc, #328]	; (80062f0 <READ_BAROMETER+0x1a0>)
 80061a6:	6013      	str	r3, [r2, #0]
	PRESS_MEM_LOCATION++;
 80061a8:	4b52      	ldr	r3, [pc, #328]	; (80062f4 <READ_BAROMETER+0x1a4>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <READ_BAROMETER+0x1a4>)
 80061b2:	701a      	strb	r2, [r3, #0]
	if(PRESS_MEM_LOCATION == 20) PRESS_MEM_LOCATION = 0;
 80061b4:	4b4f      	ldr	r3, [pc, #316]	; (80062f4 <READ_BAROMETER+0x1a4>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b14      	cmp	r3, #20
 80061ba:	d102      	bne.n	80061c2 <READ_BAROMETER+0x72>
 80061bc:	4b4d      	ldr	r3, [pc, #308]	; (80062f4 <READ_BAROMETER+0x1a4>)
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
	ACTUAL_PRESSURE_FAST = (float)PRESS_TOTAL_AVG/20.0;
 80061c2:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <READ_BAROMETER+0x1a0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ce:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80061d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061d6:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <READ_BAROMETER+0x1b0>)
 80061d8:	edc3 7a00 	vstr	s15, [r3]
	ACTUAL_PRESSURE_SLOW = ACTUAL_PRESSURE_SLOW*SLOW_FILTER_COEFFICIENT + ACTUAL_PRESSURE_FAST*FAST_FILTER_COEFFICIENT;
 80061dc:	4b49      	ldr	r3, [pc, #292]	; (8006304 <READ_BAROMETER+0x1b4>)
 80061de:	ed93 7a00 	vldr	s14, [r3]
 80061e2:	4b49      	ldr	r3, [pc, #292]	; (8006308 <READ_BAROMETER+0x1b8>)
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ec:	4b44      	ldr	r3, [pc, #272]	; (8006300 <READ_BAROMETER+0x1b0>)
 80061ee:	edd3 6a00 	vldr	s13, [r3]
 80061f2:	4b46      	ldr	r3, [pc, #280]	; (800630c <READ_BAROMETER+0x1bc>)
 80061f4:	edd3 7a00 	vldr	s15, [r3]
 80061f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006200:	4b40      	ldr	r3, [pc, #256]	; (8006304 <READ_BAROMETER+0x1b4>)
 8006202:	edc3 7a00 	vstr	s15, [r3]
	ACTUAL_PRESSURE_DIFF = ACTUAL_PRESSURE_SLOW-ACTUAL_PRESSURE_FAST;
 8006206:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <READ_BAROMETER+0x1b4>)
 8006208:	ed93 7a00 	vldr	s14, [r3]
 800620c:	4b3c      	ldr	r3, [pc, #240]	; (8006300 <READ_BAROMETER+0x1b0>)
 800620e:	edd3 7a00 	vldr	s15, [r3]
 8006212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006216:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <READ_BAROMETER+0x1c0>)
 8006218:	edc3 7a00 	vstr	s15, [r3]
	if (ACTUAL_PRESSURE_DIFF > 8)ACTUAL_PRESSURE_DIFF = 8;
 800621c:	4b3c      	ldr	r3, [pc, #240]	; (8006310 <READ_BAROMETER+0x1c0>)
 800621e:	edd3 7a00 	vldr	s15, [r3]
 8006222:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	dd03      	ble.n	8006238 <READ_BAROMETER+0xe8>
 8006230:	4b37      	ldr	r3, [pc, #220]	; (8006310 <READ_BAROMETER+0x1c0>)
 8006232:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8006236:	601a      	str	r2, [r3, #0]
	if (ACTUAL_PRESSURE_DIFF < -8)ACTUAL_PRESSURE_DIFF = -8;
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <READ_BAROMETER+0x1c0>)
 800623a:	edd3 7a00 	vldr	s15, [r3]
 800623e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8006242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624a:	d503      	bpl.n	8006254 <READ_BAROMETER+0x104>
 800624c:	4b30      	ldr	r3, [pc, #192]	; (8006310 <READ_BAROMETER+0x1c0>)
 800624e:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006252:	601a      	str	r2, [r3, #0]
	if (ACTUAL_PRESSURE_DIFF > 1 || ACTUAL_PRESSURE_DIFF < -1) ACTUAL_PRESSURE_SLOW -= ACTUAL_PRESSURE_DIFF / 6.0;
 8006254:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <READ_BAROMETER+0x1c0>)
 8006256:	edd3 7a00 	vldr	s15, [r3]
 800625a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	dc09      	bgt.n	800627c <READ_BAROMETER+0x12c>
 8006268:	4b29      	ldr	r3, [pc, #164]	; (8006310 <READ_BAROMETER+0x1c0>)
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627a:	d51f      	bpl.n	80062bc <READ_BAROMETER+0x16c>
 800627c:	4b21      	ldr	r3, [pc, #132]	; (8006304 <READ_BAROMETER+0x1b4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f969 	bl	8000558 <__aeabi_f2d>
 8006286:	4604      	mov	r4, r0
 8006288:	460d      	mov	r5, r1
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <READ_BAROMETER+0x1c0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fa f962 	bl	8000558 <__aeabi_f2d>
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <READ_BAROMETER+0x1c4>)
 800629a:	f7fa fadf 	bl	800085c <__aeabi_ddiv>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7f9 fff7 	bl	8000298 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	f7fa fca1 	bl	8000bf8 <__aeabi_d2f>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a12      	ldr	r2, [pc, #72]	; (8006304 <READ_BAROMETER+0x1b4>)
 80062ba:	6013      	str	r3, [r2, #0]
	ACTUAL_PRESSURE = ACTUAL_PRESSURE_SLOW;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <READ_BAROMETER+0x1b4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a15      	ldr	r2, [pc, #84]	; (8006318 <READ_BAROMETER+0x1c8>)
 80062c2:	6013      	str	r3, [r2, #0]
	ACTUAL_ALTITUDE = MS5611_readAlt(ACTUAL_PRESSURE) - MS5611_refAlt;
 80062c4:	4b14      	ldr	r3, [pc, #80]	; (8006318 <READ_BAROMETER+0x1c8>)
 80062c6:	edd3 7a00 	vldr	s15, [r3]
 80062ca:	eeb0 0a67 	vmov.f32	s0, s15
 80062ce:	f7fc fdb3 	bl	8002e38 <MS5611_readAlt>
 80062d2:	eeb0 7a40 	vmov.f32	s14, s0
 80062d6:	4b11      	ldr	r3, [pc, #68]	; (800631c <READ_BAROMETER+0x1cc>)
 80062d8:	edd3 7a00 	vldr	s15, [r3]
 80062dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <READ_BAROMETER+0x1d0>)
 80062e2:	edc3 7a00 	vstr	s15, [r3]

}
 80062e6:	bf00      	nop
 80062e8:	bdb0      	pop	{r4, r5, r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000098c 	.word	0x2000098c
 80062f0:	20001c94 	.word	0x20001c94
 80062f4:	20001ae4 	.word	0x20001ae4
 80062f8:	20001c0c 	.word	0x20001c0c
 80062fc:	200007c8 	.word	0x200007c8
 8006300:	20001c68 	.word	0x20001c68
 8006304:	20001c08 	.word	0x20001c08
 8006308:	20000010 	.word	0x20000010
 800630c:	20000014 	.word	0x20000014
 8006310:	20001c64 	.word	0x20001c64
 8006314:	40180000 	.word	0x40180000
 8006318:	20000968 	.word	0x20000968
 800631c:	200002b0 	.word	0x200002b0
 8006320:	20000988 	.word	0x20000988

08006324 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b22      	ldr	r3, [pc, #136]	; (80063bc <HAL_UART_RxCpltCallback+0x98>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d108      	bne.n	800634a <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_DMA(&huart2, RAW_GPS, 512);
 8006338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633c:	4920      	ldr	r1, [pc, #128]	; (80063c0 <HAL_UART_RxCpltCallback+0x9c>)
 800633e:	481f      	ldr	r0, [pc, #124]	; (80063bc <HAL_UART_RxCpltCallback+0x98>)
 8006340:	f005 fee4 	bl	800c10c <HAL_UART_Receive_DMA>
		GPS_CONTROL = 1;
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <HAL_UART_RxCpltCallback+0xa0>)
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
	}

	if(huart->Instance == huart1.Instance)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <HAL_UART_RxCpltCallback+0xa4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d12d      	bne.n	80063b2 <HAL_UART_RxCpltCallback+0x8e>
	{
		if(rxBuffer != 0) xbee_rx_buffer[rxBufferCounter] = rxBuffer;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_UART_RxCpltCallback+0xa8>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <HAL_UART_RxCpltCallback+0x48>
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_UART_RxCpltCallback+0xa8>)
 8006366:	7819      	ldrb	r1, [r3, #0]
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_UART_RxCpltCallback+0xb0>)
 800636a:	5499      	strb	r1, [r3, r2]
		rxBufferCounter++;
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 8006376:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 8006378:	2201      	movs	r2, #1
 800637a:	4914      	ldr	r1, [pc, #80]	; (80063cc <HAL_UART_RxCpltCallback+0xa8>)
 800637c:	4812      	ldr	r0, [pc, #72]	; (80063c8 <HAL_UART_RxCpltCallback+0xa4>)
 800637e:	f005 fe6f 	bl	800c060 <HAL_UART_Receive_IT>
		if(rxBuffer == 10)
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_UART_RxCpltCallback+0xa8>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b0a      	cmp	r3, #10
 8006388:	d105      	bne.n	8006396 <HAL_UART_RxCpltCallback+0x72>
		{
			rxBufferCounter = 0;
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
			dataArrived = 1;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <HAL_UART_RxCpltCallback+0xb4>)
 8006392:	2201      	movs	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
		}
		if(rxBuffer == 126)
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <HAL_UART_RxCpltCallback+0xa8>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b7e      	cmp	r3, #126	; 0x7e
 800639c:	d109      	bne.n	80063b2 <HAL_UART_RxCpltCallback+0x8e>
		{
			GCS_Command = xbee_rx_buffer[rxBufferCounter-2];
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	3b02      	subs	r3, #2
 80063a4:	4a0b      	ldr	r2, [pc, #44]	; (80063d4 <HAL_UART_RxCpltCallback+0xb0>)
 80063a6:	5cd2      	ldrb	r2, [r2, r3]
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <HAL_UART_RxCpltCallback+0xb8>)
 80063aa:	701a      	strb	r2, [r3, #0]
			rxBufferCounter = 0;
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <HAL_UART_RxCpltCallback+0xac>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000318c 	.word	0x2000318c
 80063c0:	20002e10 	.word	0x20002e10
 80063c4:	200002b4 	.word	0x200002b4
 80063c8:	2000314c 	.word	0x2000314c
 80063cc:	20001c98 	.word	0x20001c98
 80063d0:	200002b6 	.word	0x200002b6
 80063d4:	20001cc0 	.word	0x20001cc0
 80063d8:	200002b7 	.word	0x200002b7
 80063dc:	200002b5 	.word	0x200002b5

080063e0 <SD_write>:

void SD_write(char * str)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	fresult = f_open(&fil, "Telemetri.txt", FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 80063e8:	2213      	movs	r2, #19
 80063ea:	4915      	ldr	r1, [pc, #84]	; (8006440 <SD_write+0x60>)
 80063ec:	4815      	ldr	r0, [pc, #84]	; (8006444 <SD_write+0x64>)
 80063ee:	f009 f81f 	bl	800f430 <f_open>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <SD_write+0x68>)
 80063f8:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil,f_size(&fil));
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <SD_write+0x64>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4619      	mov	r1, r3
 8006400:	4810      	ldr	r0, [pc, #64]	; (8006444 <SD_write+0x64>)
 8006402:	f009 fc1d 	bl	800fc40 <f_lseek>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <SD_write+0x68>)
 800640c:	701a      	strb	r2, [r3, #0]
	//fresult = f_puts(str,&fil);
	fresult = f_write(&fil,str,strlen(str),&bw);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7f9 fee6 	bl	80001e0 <strlen>
 8006414:	4602      	mov	r2, r0
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <SD_write+0x6c>)
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	480a      	ldr	r0, [pc, #40]	; (8006444 <SD_write+0x64>)
 800641c:	f009 f9d4 	bl	800f7c8 <f_write>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <SD_write+0x68>)
 8006426:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8006428:	4806      	ldr	r0, [pc, #24]	; (8006444 <SD_write+0x64>)
 800642a:	f009 fbdf 	bl	800fbec <f_close>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <SD_write+0x68>)
 8006434:	701a      	strb	r2, [r3, #0]
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	08016e14 	.word	0x08016e14
 8006444:	20001dc0 	.word	0x20001dc0
 8006448:	20001cac 	.word	0x20001cac
 800644c:	20001c9c 	.word	0x20001c9c

08006450 <SD_Mount>:

void SD_Mount(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs,"",0);
 8006454:	2200      	movs	r2, #0
 8006456:	4905      	ldr	r1, [pc, #20]	; (800646c <SD_Mount+0x1c>)
 8006458:	4805      	ldr	r0, [pc, #20]	; (8006470 <SD_Mount+0x20>)
 800645a:	f008 ffa3 	bl	800f3a4 <f_mount>
 800645e:	4603      	mov	r3, r0
 8006460:	461a      	mov	r2, r3
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <SD_Mount+0x24>)
 8006464:	701a      	strb	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	08016e24 	.word	0x08016e24
 8006470:	20000aa8 	.word	0x20000aa8
 8006474:	20001cac 	.word	0x20001cac

08006478 <GET_CMD>:

void GET_CMD(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	switch(GCS_Command)
 800647c:	4b43      	ldr	r3, [pc, #268]	; (800658c <GET_CMD+0x114>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	3b41      	subs	r3, #65	; 0x41
 8006482:	2b19      	cmp	r3, #25
 8006484:	d877      	bhi.n	8006576 <GET_CMD+0xfe>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <GET_CMD+0x14>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064f5 	.word	0x080064f5
 8006490:	080064fb 	.word	0x080064fb
 8006494:	08006577 	.word	0x08006577
 8006498:	08006507 	.word	0x08006507
 800649c:	08006577 	.word	0x08006577
 80064a0:	08006577 	.word	0x08006577
 80064a4:	08006577 	.word	0x08006577
 80064a8:	08006577 	.word	0x08006577
 80064ac:	08006577 	.word	0x08006577
 80064b0:	08006577 	.word	0x08006577
 80064b4:	0800657f 	.word	0x0800657f
 80064b8:	08006577 	.word	0x08006577
 80064bc:	08006577 	.word	0x08006577
 80064c0:	08006577 	.word	0x08006577
 80064c4:	08006577 	.word	0x08006577
 80064c8:	08006577 	.word	0x08006577
 80064cc:	08006577 	.word	0x08006577
 80064d0:	08006577 	.word	0x08006577
 80064d4:	08006577 	.word	0x08006577
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006577 	.word	0x08006577
 80064e0:	0800656d 	.word	0x0800656d
 80064e4:	08006577 	.word	0x08006577
 80064e8:	08006577 	.word	0x08006577
 80064ec:	08006577 	.word	0x08006577
 80064f0:	0800652b 	.word	0x0800652b
	{
		// Ayrılma komutu
		case 'A' :
			DETACH();
 80064f4:	f7ff fac4 	bl	8005a80 <DETACH>
			break;
 80064f8:	e042      	b.n	8006580 <GET_CMD+0x108>

		// Birleşme komutu
		case 'B':
			ATTACH();
 80064fa:	f7ff fad3 	bl	8005aa4 <ATTACH>
			break;
 80064fe:	e03f      	b.n	8006580 <GET_CMD+0x108>

		// Motor tahrik
		case 'T':
			TEST_MOTORS();
 8006500:	f000 f856 	bl	80065b0 <TEST_MOTORS>
			break;
 8006504:	e03c      	b.n	8006580 <GET_CMD+0x108>
		case 'D':
			setMotorThrottle(mt1, 1000);
 8006506:	4b22      	ldr	r3, [pc, #136]	; (8006590 <GET_CMD+0x118>)
 8006508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800650c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006510:	f7fd fbcf 	bl	8003cb2 <setMotorThrottle>
			setMotorThrottle(mt2, 1000);
 8006514:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <GET_CMD+0x11c>)
 8006516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800651a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800651e:	f7fd fbc8 	bl	8003cb2 <setMotorThrottle>
			MOTOR_TEST_FLAG = 0;
 8006522:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <GET_CMD+0x120>)
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
			break;
 8006528:	e02a      	b.n	8006580 <GET_CMD+0x108>
		// Sensör kalibrasyonu
		case 'K':
			break;

		case 'Z':
			EEPROM_PageErase(0);
 800652a:	2000      	movs	r0, #0
 800652c:	f7fc f840 	bl	80025b0 <EEPROM_PageErase>
			EEPROM_PageErase(1);
 8006530:	2001      	movs	r0, #1
 8006532:	f7fc f83d 	bl	80025b0 <EEPROM_PageErase>
			EEPROM_PageErase(2);
 8006536:	2002      	movs	r0, #2
 8006538:	f7fc f83a 	bl	80025b0 <EEPROM_PageErase>
			MOTOR_CONTROL_1 = 0;
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <GET_CMD+0x124>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
			MOTOR_CONTROL_2 = 0;
 8006542:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <GET_CMD+0x128>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
			setMotorThrottle(mt1, 1000);
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <GET_CMD+0x118>)
 800654a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800654e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006552:	f7fd fbae 	bl	8003cb2 <setMotorThrottle>
			setMotorThrottle(mt2, 1000);
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <GET_CMD+0x11c>)
 8006558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800655c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006560:	f7fd fba7 	bl	8003cb2 <setMotorThrottle>
			resetPID(&V_PID);
 8006564:	480f      	ldr	r0, [pc, #60]	; (80065a4 <GET_CMD+0x12c>)
 8006566:	f7fd fbcf 	bl	8003d08 <resetPID>
			while(1);
 800656a:	e7fe      	b.n	800656a <GET_CMD+0xf2>
			break;
		// Video aktarımı
		case 'V':
			sprintf(VIDEO_STATE,"EVET");
 800656c:	490e      	ldr	r1, [pc, #56]	; (80065a8 <GET_CMD+0x130>)
 800656e:	480f      	ldr	r0, [pc, #60]	; (80065ac <GET_CMD+0x134>)
 8006570:	f00a fda0 	bl	80110b4 <siprintf>
			break;
 8006574:	e004      	b.n	8006580 <GET_CMD+0x108>
		default: GCS_Command = 0;
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <GET_CMD+0x114>)
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e000      	b.n	8006580 <GET_CMD+0x108>
			break;
 800657e:	bf00      	nop
	}
	GCS_Command = 0;
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <GET_CMD+0x114>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
}
 8006586:	bf00      	nop
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200002b5 	.word	0x200002b5
 8006590:	20001c6c 	.word	0x20001c6c
 8006594:	20001cb8 	.word	0x20001cb8
 8006598:	20000284 	.word	0x20000284
 800659c:	20000267 	.word	0x20000267
 80065a0:	20000268 	.word	0x20000268
 80065a4:	20000900 	.word	0x20000900
 80065a8:	08016e28 	.word	0x08016e28
 80065ac:	20002dfc 	.word	0x20002dfc

080065b0 <TEST_MOTORS>:

void TEST_MOTORS(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
	if(1)
	{
		setMotorThrottle(mt1, 1200);
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <TEST_MOTORS+0x28>)
 80065b6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80065ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065be:	f7fd fb78 	bl	8003cb2 <setMotorThrottle>
		TEST_TIME = HAL_GetTick();
 80065c2:	f000 fe6d 	bl	80072a0 <HAL_GetTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4a04      	ldr	r2, [pc, #16]	; (80065dc <TEST_MOTORS+0x2c>)
 80065ca:	6013      	str	r3, [r2, #0]
		MOTOR_TEST_FLAG = 1;
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <TEST_MOTORS+0x30>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
	}
}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20001c6c 	.word	0x20001c6c
 80065dc:	20000280 	.word	0x20000280
 80065e0:	20000284 	.word	0x20000284

080065e4 <EEPROM_1HZ>:

void EEPROM_1HZ(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
	EEPROM_Write_NUM(0, EEPROM_OFFSET_PACKAGE, (float)PACKAGE_COUNT);
 80065e8:	4b45      	ldr	r3, [pc, #276]	; (8006700 <EEPROM_1HZ+0x11c>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f4:	eeb0 0a67 	vmov.f32	s0, s15
 80065f8:	2100      	movs	r1, #0
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7fb ff3e 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write(0, EEPROM_OFFSET_STATE, &CURRENT_STATE, 1);
 8006600:	2301      	movs	r3, #1
 8006602:	4a40      	ldr	r2, [pc, #256]	; (8006704 <EEPROM_1HZ+0x120>)
 8006604:	2105      	movs	r1, #5
 8006606:	2000      	movs	r0, #0
 8006608:	f7fb fe8c 	bl	8002324 <EEPROM_Write>
	if(PRESS_MEM_LOCATION >= 10)
 800660c:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <EEPROM_1HZ+0x124>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b09      	cmp	r3, #9
 8006612:	d916      	bls.n	8006642 <EEPROM_1HZ+0x5e>
	{
		EEPROM_Write_NUM(2, (PRESS_MEM_LOCATION-10)*4, (float)PRESS_ROTATING_MEM[PRESS_MEM_LOCATION]);
 8006614:	4b3c      	ldr	r3, [pc, #240]	; (8006708 <EEPROM_1HZ+0x124>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	3b0a      	subs	r3, #10
 800661a:	b29b      	uxth	r3, r3
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	b29b      	uxth	r3, r3
 8006620:	4a39      	ldr	r2, [pc, #228]	; (8006708 <EEPROM_1HZ+0x124>)
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	4611      	mov	r1, r2
 8006626:	4a39      	ldr	r2, [pc, #228]	; (800670c <EEPROM_1HZ+0x128>)
 8006628:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800662c:	ee07 2a90 	vmov	s15, r2
 8006630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006634:	eeb0 0a67 	vmov.f32	s0, s15
 8006638:	4619      	mov	r1, r3
 800663a:	2002      	movs	r0, #2
 800663c:	f7fb ff1e 	bl	800247c <EEPROM_Write_NUM>
 8006640:	e014      	b.n	800666c <EEPROM_1HZ+0x88>
	}
	else
	{
		EEPROM_Write_NUM(1, PRESS_MEM_LOCATION*4, (float)PRESS_ROTATING_MEM[PRESS_MEM_LOCATION]);
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <EEPROM_1HZ+0x124>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	b29b      	uxth	r3, r3
 800664c:	4a2e      	ldr	r2, [pc, #184]	; (8006708 <EEPROM_1HZ+0x124>)
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	4611      	mov	r1, r2
 8006652:	4a2e      	ldr	r2, [pc, #184]	; (800670c <EEPROM_1HZ+0x128>)
 8006654:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006658:	ee07 2a90 	vmov	s15, r2
 800665c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006660:	eeb0 0a67 	vmov.f32	s0, s15
 8006664:	4619      	mov	r1, r3
 8006666:	2001      	movs	r0, #1
 8006668:	f7fb ff08 	bl	800247c <EEPROM_Write_NUM>
	}

	EEPROM_Write_NUM(0, EEPROM_OFFSET_PRESS_TOTAL_AVG, (float)PRESS_TOTAL_AVG);
 800666c:	4b28      	ldr	r3, [pc, #160]	; (8006710 <EEPROM_1HZ+0x12c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006678:	eeb0 0a67 	vmov.f32	s0, s15
 800667c:	2114      	movs	r1, #20
 800667e:	2000      	movs	r0, #0
 8006680:	f7fb fefc 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_FAST, (float)ACTUAL_PRESSURE_FAST);
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <EEPROM_1HZ+0x130>)
 8006686:	edd3 7a00 	vldr	s15, [r3]
 800668a:	eeb0 0a67 	vmov.f32	s0, s15
 800668e:	2119      	movs	r1, #25
 8006690:	2000      	movs	r0, #0
 8006692:	f7fb fef3 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_SLOW, (float)ACTUAL_PRESSURE_SLOW);
 8006696:	4b20      	ldr	r3, [pc, #128]	; (8006718 <EEPROM_1HZ+0x134>)
 8006698:	edd3 7a00 	vldr	s15, [r3]
 800669c:	eeb0 0a67 	vmov.f32	s0, s15
 80066a0:	2123      	movs	r1, #35	; 0x23
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7fb feea 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_ACTUAL_PRESSURE_DIFF, (float)ACTUAL_PRESSURE_DIFF);
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <EEPROM_1HZ+0x138>)
 80066aa:	edd3 7a00 	vldr	s15, [r3]
 80066ae:	eeb0 0a67 	vmov.f32	s0, s15
 80066b2:	2128      	movs	r1, #40	; 0x28
 80066b4:	2000      	movs	r0, #0
 80066b6:	f7fb fee1 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_PRESS_MEM_LOC, (float)PRESS_MEM_LOCATION);
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <EEPROM_1HZ+0x124>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ca:	212d      	movs	r1, #45	; 0x2d
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7fb fed5 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_ACTUAL_PRESS_LOC, (float)ACTUAL_PRESSURE);
 80066d2:	4b13      	ldr	r3, [pc, #76]	; (8006720 <EEPROM_1HZ+0x13c>)
 80066d4:	edd3 7a00 	vldr	s15, [r3]
 80066d8:	eeb0 0a67 	vmov.f32	s0, s15
 80066dc:	2132      	movs	r1, #50	; 0x32
 80066de:	2000      	movs	r0, #0
 80066e0:	f7fb fecc 	bl	800247c <EEPROM_Write_NUM>
	EEPROM_Write_NUM(0, EEPROM_OFFSET_BAROMETER_CNT, (float)BAROMETER_COUNTER);
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <EEPROM_1HZ+0x140>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f0:	eeb0 0a67 	vmov.f32	s0, s15
 80066f4:	2137      	movs	r1, #55	; 0x37
 80066f6:	2000      	movs	r0, #0
 80066f8:	f7fb fec0 	bl	800247c <EEPROM_Write_NUM>
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000264 	.word	0x20000264
 8006704:	20000009 	.word	0x20000009
 8006708:	20001ae4 	.word	0x20001ae4
 800670c:	20001c0c 	.word	0x20001c0c
 8006710:	20001c94 	.word	0x20001c94
 8006714:	20001c68 	.word	0x20001c68
 8006718:	20001c08 	.word	0x20001c08
 800671c:	20001c64 	.word	0x20001c64
 8006720:	20000968 	.word	0x20000968
 8006724:	2000098c 	.word	0x2000098c

08006728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800673c:	4b17      	ldr	r3, [pc, #92]	; (800679c <MX_SPI1_Init+0x64>)
 800673e:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <MX_SPI1_Init+0x68>)
 8006740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006742:	4b16      	ldr	r3, [pc, #88]	; (800679c <MX_SPI1_Init+0x64>)
 8006744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <MX_SPI1_Init+0x64>)
 800674c:	2200      	movs	r2, #0
 800674e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006750:	4b12      	ldr	r3, [pc, #72]	; (800679c <MX_SPI1_Init+0x64>)
 8006752:	2200      	movs	r2, #0
 8006754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <MX_SPI1_Init+0x64>)
 8006758:	2200      	movs	r2, #0
 800675a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800675c:	4b0f      	ldr	r3, [pc, #60]	; (800679c <MX_SPI1_Init+0x64>)
 800675e:	2200      	movs	r2, #0
 8006760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <MX_SPI1_Init+0x64>)
 8006764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <MX_SPI1_Init+0x64>)
 800676c:	2220      	movs	r2, #32
 800676e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <MX_SPI1_Init+0x64>)
 8006772:	2200      	movs	r2, #0
 8006774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <MX_SPI1_Init+0x64>)
 8006778:	2200      	movs	r2, #0
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <MX_SPI1_Init+0x64>)
 800677e:	2200      	movs	r2, #0
 8006780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <MX_SPI1_Init+0x64>)
 8006784:	220a      	movs	r2, #10
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006788:	4804      	ldr	r0, [pc, #16]	; (800679c <MX_SPI1_Init+0x64>)
 800678a:	f004 fa45 	bl	800ac18 <HAL_SPI_Init>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006794:	f7ff ffc8 	bl	8006728 <Error_Handler>
  }

}
 8006798:	bf00      	nop
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20003010 	.word	0x20003010
 80067a0:	40013000 	.word	0x40013000

080067a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a19      	ldr	r2, [pc, #100]	; (8006828 <HAL_SPI_MspInit+0x84>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d12b      	bne.n	800681e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067d4:	6453      	str	r3, [r2, #68]	; 0x44
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	4a10      	ldr	r2, [pc, #64]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	6313      	str	r3, [r2, #48]	; 0x30
 80067f2:	4b0e      	ldr	r3, [pc, #56]	; (800682c <HAL_SPI_MspInit+0x88>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80067fe:	23e0      	movs	r3, #224	; 0xe0
 8006800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006802:	2302      	movs	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680a:	2303      	movs	r3, #3
 800680c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800680e:	2305      	movs	r3, #5
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	4619      	mov	r1, r3
 8006818:	4805      	ldr	r0, [pc, #20]	; (8006830 <HAL_SPI_MspInit+0x8c>)
 800681a:	f001 fea3 	bl	8008564 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800681e:	bf00      	nop
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40013000 	.word	0x40013000
 800682c:	40023800 	.word	0x40023800
 8006830:	40020000 	.word	0x40020000

08006834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <HAL_MspInit+0x4c>)
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	4a0f      	ldr	r2, [pc, #60]	; (8006880 <HAL_MspInit+0x4c>)
 8006844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006848:	6453      	str	r3, [r2, #68]	; 0x44
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <HAL_MspInit+0x4c>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	2300      	movs	r3, #0
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_MspInit+0x4c>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a08      	ldr	r2, [pc, #32]	; (8006880 <HAL_MspInit+0x4c>)
 8006860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006864:	6413      	str	r3, [r2, #64]	; 0x40
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_MspInit+0x4c>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800

08006884 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <SDTimer_Handler+0x40>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d006      	beq.n	80068a0 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8006892:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <SDTimer_Handler+0x40>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b2da      	uxtb	r2, r3
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <SDTimer_Handler+0x40>)
 800689e:	701a      	strb	r2, [r3, #0]
	}
	if(Timer2>0)
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <SDTimer_Handler+0x44>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d006      	beq.n	80068b8 <SDTimer_Handler+0x34>
	{
		Timer2--;
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <SDTimer_Handler+0x44>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <SDTimer_Handler+0x44>)
 80068b6:	701a      	strb	r2, [r3, #0]
	}
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20003069 	.word	0x20003069
 80068c8:	20003068 	.word	0x20003068

080068cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068da:	b480      	push	{r7}
 80068dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068de:	e7fe      	b.n	80068de <HardFault_Handler+0x4>

080068e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068e4:	e7fe      	b.n	80068e4 <MemManage_Handler+0x4>

080068e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068e6:	b480      	push	{r7}
 80068e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068ea:	e7fe      	b.n	80068ea <BusFault_Handler+0x4>

080068ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068f0:	e7fe      	b.n	80068f0 <UsageFault_Handler+0x4>

080068f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068f2:	b480      	push	{r7}
 80068f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800690e:	b480      	push	{r7}
 8006910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8006920:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <SysTick_Handler+0xd8>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	3301      	adds	r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b32      	ldr	r3, [pc, #200]	; (80069f4 <SysTick_Handler+0xd8>)
 800692c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt>=10)
 800692e:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <SysTick_Handler+0xd8>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b09      	cmp	r3, #9
 8006936:	d904      	bls.n	8006942 <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8006938:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <SysTick_Handler+0xd8>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800693e:	f7ff ffa1 	bl	8006884 <SDTimer_Handler>
	}

	if(DETACH_CONTROL && (!MOTOR_CONTROL_1 || !MOTOR_CONTROL_2))
 8006942:	4b2d      	ldr	r3, [pc, #180]	; (80069f8 <SysTick_Handler+0xdc>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <SysTick_Handler+0x52>
 800694a:	4b2c      	ldr	r3, [pc, #176]	; (80069fc <SysTick_Handler+0xe0>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <SysTick_Handler+0x3e>
 8006952:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <SysTick_Handler+0xe4>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <SysTick_Handler+0x52>
	{
		MOTOR_CONTROL_TIMER_1++;
 800695a:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <SysTick_Handler+0xe8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <SysTick_Handler+0xe8>)
 8006962:	6013      	str	r3, [r2, #0]
		MOTOR_CONTROL_TIMER_2++;
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <SysTick_Handler+0xec>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a27      	ldr	r2, [pc, #156]	; (8006a08 <SysTick_Handler+0xec>)
 800696c:	6013      	str	r3, [r2, #0]
	}

	if(MOTOR_CONTROL_TIMER_1 >= 1000)
 800696e:	4b25      	ldr	r3, [pc, #148]	; (8006a04 <SysTick_Handler+0xe8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006976:	d302      	bcc.n	800697e <SysTick_Handler+0x62>
	{
		MOTOR_CONTROL_1 = 1;
 8006978:	4b20      	ldr	r3, [pc, #128]	; (80069fc <SysTick_Handler+0xe0>)
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
	}
	if(MOTOR_CONTROL_TIMER_2 >= 2000)
 800697e:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <SysTick_Handler+0xec>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006986:	d302      	bcc.n	800698e <SysTick_Handler+0x72>
	{
		MOTOR_CONTROL_2 = 1;
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <SysTick_Handler+0xe4>)
 800698a:	2201      	movs	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]
	}

	if(MOTOR_TEST_FLAG)
 800698e:	4b1f      	ldr	r3, [pc, #124]	; (8006a0c <SysTick_Handler+0xf0>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d029      	beq.n	80069ea <SysTick_Handler+0xce>
	{
		if(HAL_GetTick()-TEST_TIME >= 1000) setMotorThrottle(mt2, 1200);
 8006996:	f000 fc83 	bl	80072a0 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	4b1c      	ldr	r3, [pc, #112]	; (8006a10 <SysTick_Handler+0xf4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a6:	d306      	bcc.n	80069b6 <SysTick_Handler+0x9a>
 80069a8:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <SysTick_Handler+0xf8>)
 80069aa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80069ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069b2:	f7fd f97e 	bl	8003cb2 <setMotorThrottle>

		if(HAL_GetTick() - TEST_TIME >= 8000)
 80069b6:	f000 fc73 	bl	80072a0 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <SysTick_Handler+0xf4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80069c6:	d310      	bcc.n	80069ea <SysTick_Handler+0xce>
		{
			setMotorThrottle(mt1, 1000);
 80069c8:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <SysTick_Handler+0xfc>)
 80069ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069d2:	f7fd f96e 	bl	8003cb2 <setMotorThrottle>
			setMotorThrottle(mt2, 1000);
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <SysTick_Handler+0xf8>)
 80069d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069e0:	f7fd f967 	bl	8003cb2 <setMotorThrottle>
			MOTOR_TEST_FLAG = 0;
 80069e4:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <SysTick_Handler+0xf0>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069ea:	f000 fc45 	bl	8007278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200002c0 	.word	0x200002c0
 80069f8:	20000266 	.word	0x20000266
 80069fc:	20000267 	.word	0x20000267
 8006a00:	20000268 	.word	0x20000268
 8006a04:	2000026c 	.word	0x2000026c
 8006a08:	20000270 	.word	0x20000270
 8006a0c:	20000284 	.word	0x20000284
 8006a10:	20000280 	.word	0x20000280
 8006a14:	20001cb8 	.word	0x20001cb8
 8006a18:	20001c6c 	.word	0x20001c6c

08006a1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006a20:	4802      	ldr	r0, [pc, #8]	; (8006a2c <DMA1_Stream5_IRQHandler+0x10>)
 8006a22:	f001 fb35 	bl	8008090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200030ec 	.word	0x200030ec

08006a30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006a34:	4802      	ldr	r0, [pc, #8]	; (8006a40 <ADC_IRQHandler+0x10>)
 8006a36:	f000 fd57 	bl	80074e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000808 	.word	0x20000808

08006a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a48:	4802      	ldr	r0, [pc, #8]	; (8006a54 <USART1_IRQHandler+0x10>)
 8006a4a:	f005 fbdf 	bl	800c20c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2000314c 	.word	0x2000314c

08006a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
	return 1;
 8006a5c:	2301      	movs	r3, #1
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <_kill>:

int _kill(int pid, int sig)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006a72:	f009 fc2b 	bl	80102cc <__errno>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2216      	movs	r2, #22
 8006a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_exit>:

void _exit (int status)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006a90:	f04f 31ff 	mov.w	r1, #4294967295
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ffe7 	bl	8006a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006a9a:	e7fe      	b.n	8006a9a <_exit+0x12>

08006a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e00a      	b.n	8006ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006aae:	f3af 8000 	nop.w
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	60ba      	str	r2, [r7, #8]
 8006aba:	b2ca      	uxtb	r2, r1
 8006abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dbf0      	blt.n	8006aae <_read+0x12>
	}

return len;
 8006acc:	687b      	ldr	r3, [r7, #4]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	e009      	b.n	8006afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	60ba      	str	r2, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	3301      	adds	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	dbf1      	blt.n	8006ae8 <_write+0x12>
	}
	return len;
 8006b04:	687b      	ldr	r3, [r7, #4]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <_close>:

int _close(int file)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
	return -1;
 8006b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b36:	605a      	str	r2, [r3, #4]
	return 0;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <_isatty>:

int _isatty(int file)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8006b4e:	2301      	movs	r3, #1
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	return 0;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b80:	4a14      	ldr	r2, [pc, #80]	; (8006bd4 <_sbrk+0x5c>)
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <_sbrk+0x60>)
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b8c:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <_sbrk+0x64>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b94:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <_sbrk+0x64>)
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <_sbrk+0x68>)
 8006b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b9a:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <_sbrk+0x64>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d207      	bcs.n	8006bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ba8:	f009 fb90 	bl	80102cc <__errno>
 8006bac:	4603      	mov	r3, r0
 8006bae:	220c      	movs	r2, #12
 8006bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb6:	e009      	b.n	8006bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <_sbrk+0x64>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <_sbrk+0x64>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <_sbrk+0x64>)
 8006bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20020000 	.word	0x20020000
 8006bd8:	00000400 	.word	0x00000400
 8006bdc:	200002c4 	.word	0x200002c4
 8006be0:	20005250 	.word	0x20005250

08006be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006be8:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <SystemInit+0x28>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <SystemInit+0x28>)
 8006bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <SystemInit+0x28>)
 8006bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b096      	sub	sp, #88	; 0x58
 8006c14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	609a      	str	r2, [r3, #8]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	611a      	str	r2, [r3, #16]
 8006c3e:	615a      	str	r2, [r3, #20]
 8006c40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	2220      	movs	r2, #32
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f009 fb77 	bl	801033c <memset>

  htim1.Instance = TIM1;
 8006c4e:	4b44      	ldr	r3, [pc, #272]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c50:	4a44      	ldr	r2, [pc, #272]	; (8006d64 <MX_TIM1_Init+0x154>)
 8006c52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8006c54:	4b42      	ldr	r3, [pc, #264]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c56:	2263      	movs	r2, #99	; 0x63
 8006c58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c5a:	4b41      	ldr	r3, [pc, #260]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8006c60:	4b3f      	ldr	r3, [pc, #252]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c62:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006c66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c68:	4b3d      	ldr	r3, [pc, #244]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006c6e:	4b3c      	ldr	r3, [pc, #240]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c74:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006c7a:	4839      	ldr	r0, [pc, #228]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c7c:	f004 fbc0 	bl	800b400 <HAL_TIM_Base_Init>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006c86:	f7ff fd4f 	bl	8006728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c94:	4619      	mov	r1, r3
 8006c96:	4832      	ldr	r0, [pc, #200]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006c98:	f004 fd00 	bl	800b69c <HAL_TIM_ConfigClockSource>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006ca2:	f7ff fd41 	bl	8006728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006ca6:	482e      	ldr	r0, [pc, #184]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006ca8:	f004 fbd5 	bl	800b456 <HAL_TIM_PWM_Init>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006cb2:	f7ff fd39 	bl	8006728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4826      	ldr	r0, [pc, #152]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006cc6:	f005 f879 	bl	800bdbc <HAL_TIMEx_MasterConfigSynchronization>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006cd0:	f7ff fd2a 	bl	8006728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cd4:	2360      	movs	r3, #96	; 0x60
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4819      	ldr	r0, [pc, #100]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006cfa:	f004 fc09 	bl	800b510 <HAL_TIM_PWM_ConfigChannel>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006d04:	f7ff fd10 	bl	8006728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0c:	220c      	movs	r2, #12
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4813      	ldr	r0, [pc, #76]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006d12:	f004 fbfd 	bl	800b510 <HAL_TIM_PWM_ConfigChannel>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006d1c:	f7ff fd04 	bl	8006728 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	4807      	ldr	r0, [pc, #28]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006d44:	f005 f8a8 	bl	800be98 <HAL_TIMEx_ConfigBreakDeadTime>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8006d4e:	f7ff fceb 	bl	8006728 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8006d52:	4803      	ldr	r0, [pc, #12]	; (8006d60 <MX_TIM1_Init+0x150>)
 8006d54:	f000 f8a6 	bl	8006ea4 <HAL_TIM_MspPostInit>

}
 8006d58:	bf00      	nop
 8006d5a:	3758      	adds	r7, #88	; 0x58
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200030ac 	.word	0x200030ac
 8006d64:	40010000 	.word	0x40010000

08006d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d6e:	f107 0320 	add.w	r3, r7, #32
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	609a      	str	r2, [r3, #8]
 8006d82:	60da      	str	r2, [r3, #12]
 8006d84:	611a      	str	r2, [r3, #16]
 8006d86:	615a      	str	r2, [r3, #20]
 8006d88:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <MX_TIM3_Init+0xb0>)
 8006d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8006d90:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006d92:	2263      	movs	r2, #99	; 0x63
 8006d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d96:	4b1f      	ldr	r3, [pc, #124]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006d9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006da2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006daa:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006db0:	4818      	ldr	r0, [pc, #96]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006db2:	f004 fb50 	bl	800b456 <HAL_TIM_PWM_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006dbc:	f7ff fcb4 	bl	8006728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006dc8:	f107 0320 	add.w	r3, r7, #32
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4811      	ldr	r0, [pc, #68]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006dd0:	f004 fff4 	bl	800bdbc <HAL_TIMEx_MasterConfigSynchronization>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006dda:	f7ff fca5 	bl	8006728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dde:	2360      	movs	r3, #96	; 0x60
 8006de0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	2200      	movs	r2, #0
 8006df2:	4619      	mov	r1, r3
 8006df4:	4807      	ldr	r0, [pc, #28]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006df6:	f004 fb8b 	bl	800b510 <HAL_TIM_PWM_ConfigChannel>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006e00:	f7ff fc92 	bl	8006728 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006e04:	4803      	ldr	r0, [pc, #12]	; (8006e14 <MX_TIM3_Init+0xac>)
 8006e06:	f000 f84d 	bl	8006ea4 <HAL_TIM_MspPostInit>

}
 8006e0a:	bf00      	nop
 8006e0c:	3728      	adds	r7, #40	; 0x28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2000306c 	.word	0x2000306c
 8006e18:	40000400 	.word	0x40000400

08006e1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a0b      	ldr	r2, [pc, #44]	; (8006e58 <HAL_TIM_Base_MspInit+0x3c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d10d      	bne.n	8006e4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <HAL_TIM_Base_MspInit+0x40>)
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <HAL_TIM_Base_MspInit+0x40>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <HAL_TIM_Base_MspInit+0x40>)
 8006e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40023800 	.word	0x40023800

08006e60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10d      	bne.n	8006e8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	6413      	str	r3, [r2, #64]	; 0x40
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40023800 	.word	0x40023800

08006ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a24      	ldr	r2, [pc, #144]	; (8006f54 <HAL_TIM_MspPostInit+0xb0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d11f      	bne.n	8006f06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed6:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8006ee2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4619      	mov	r1, r3
 8006efe:	4817      	ldr	r0, [pc, #92]	; (8006f5c <HAL_TIM_MspPostInit+0xb8>)
 8006f00:	f001 fb30 	bl	8008564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006f04:	e022      	b.n	8006f4c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <HAL_TIM_MspPostInit+0xbc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d11d      	bne.n	8006f4c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	4a0f      	ldr	r2, [pc, #60]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006f1a:	f043 0302 	orr.w	r3, r3, #2
 8006f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f20:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <HAL_TIM_MspPostInit+0xb4>)
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f30:	2302      	movs	r3, #2
 8006f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	4619      	mov	r1, r3
 8006f46:	4807      	ldr	r0, [pc, #28]	; (8006f64 <HAL_TIM_MspPostInit+0xc0>)
 8006f48:	f001 fb0c 	bl	8008564 <HAL_GPIO_Init>
}
 8006f4c:	bf00      	nop
 8006f4e:	3728      	adds	r7, #40	; 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40020000 	.word	0x40020000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40020400 	.word	0x40020400

08006f68 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <MX_USART1_UART_Init+0x50>)
 8006f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f8e:	220c      	movs	r2, #12
 8006f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f9e:	4805      	ldr	r0, [pc, #20]	; (8006fb4 <MX_USART1_UART_Init+0x4c>)
 8006fa0:	f004 ffcc 	bl	800bf3c <HAL_UART_Init>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006faa:	f7ff fbbd 	bl	8006728 <Error_Handler>
  }

}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2000314c 	.word	0x2000314c
 8006fb8:	40011000 	.word	0x40011000

08006fbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fc2:	4a12      	ldr	r2, [pc, #72]	; (800700c <MX_USART2_UART_Init+0x50>)
 8006fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fe2:	220c      	movs	r2, #12
 8006fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <MX_USART2_UART_Init+0x4c>)
 8006ff4:	f004 ffa2 	bl	800bf3c <HAL_UART_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006ffe:	f7ff fb93 	bl	8006728 <Error_Handler>
  }

}
 8007002:	bf00      	nop
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000318c 	.word	0x2000318c
 800700c:	40004400 	.word	0x40004400

08007010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08c      	sub	sp, #48	; 0x30
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007018:	f107 031c 	add.w	r3, r7, #28
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	609a      	str	r2, [r3, #8]
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a4e      	ldr	r2, [pc, #312]	; (8007168 <HAL_UART_MspInit+0x158>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d135      	bne.n	800709e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	4b4d      	ldr	r3, [pc, #308]	; (800716c <HAL_UART_MspInit+0x15c>)
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	4a4c      	ldr	r2, [pc, #304]	; (800716c <HAL_UART_MspInit+0x15c>)
 800703c:	f043 0310 	orr.w	r3, r3, #16
 8007040:	6453      	str	r3, [r2, #68]	; 0x44
 8007042:	4b4a      	ldr	r3, [pc, #296]	; (800716c <HAL_UART_MspInit+0x15c>)
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	4b46      	ldr	r3, [pc, #280]	; (800716c <HAL_UART_MspInit+0x15c>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a45      	ldr	r2, [pc, #276]	; (800716c <HAL_UART_MspInit+0x15c>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b43      	ldr	r3, [pc, #268]	; (800716c <HAL_UART_MspInit+0x15c>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800706a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800706e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007070:	2302      	movs	r3, #2
 8007072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007074:	2300      	movs	r3, #0
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007078:	2303      	movs	r3, #3
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800707c:	2307      	movs	r3, #7
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007080:	f107 031c 	add.w	r3, r7, #28
 8007084:	4619      	mov	r1, r3
 8007086:	483a      	ldr	r0, [pc, #232]	; (8007170 <HAL_UART_MspInit+0x160>)
 8007088:	f001 fa6c 	bl	8008564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	2025      	movs	r0, #37	; 0x25
 8007092:	f000 fe9e 	bl	8007dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007096:	2025      	movs	r0, #37	; 0x25
 8007098:	f000 feb7 	bl	8007e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800709c:	e05f      	b.n	800715e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a34      	ldr	r2, [pc, #208]	; (8007174 <HAL_UART_MspInit+0x164>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d15a      	bne.n	800715e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	4b2f      	ldr	r3, [pc, #188]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	4a2e      	ldr	r2, [pc, #184]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b6:	6413      	str	r3, [r2, #64]	; 0x40
 80070b8:	4b2c      	ldr	r3, [pc, #176]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	4b28      	ldr	r3, [pc, #160]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	4a27      	ldr	r2, [pc, #156]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	6313      	str	r3, [r2, #48]	; 0x30
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <HAL_UART_MspInit+0x15c>)
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80070e0:	230c      	movs	r3, #12
 80070e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e4:	2302      	movs	r3, #2
 80070e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ec:	2303      	movs	r3, #3
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070f0:	2307      	movs	r3, #7
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f4:	f107 031c 	add.w	r3, r7, #28
 80070f8:	4619      	mov	r1, r3
 80070fa:	481d      	ldr	r0, [pc, #116]	; (8007170 <HAL_UART_MspInit+0x160>)
 80070fc:	f001 fa32 	bl	8008564 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007102:	4a1e      	ldr	r2, [pc, #120]	; (800717c <HAL_UART_MspInit+0x16c>)
 8007104:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800710c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007110:	2200      	movs	r2, #0
 8007112:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007116:	2200      	movs	r2, #0
 8007118:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <HAL_UART_MspInit+0x168>)
 800711c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007120:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007124:	2200      	movs	r2, #0
 8007126:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007128:	4b13      	ldr	r3, [pc, #76]	; (8007178 <HAL_UART_MspInit+0x168>)
 800712a:	2200      	movs	r2, #0
 800712c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007130:	2200      	movs	r2, #0
 8007132:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007134:	4b10      	ldr	r3, [pc, #64]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800713a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <HAL_UART_MspInit+0x168>)
 800713e:	2200      	movs	r2, #0
 8007140:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007142:	480d      	ldr	r0, [pc, #52]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007144:	f000 fe7c 	bl	8007e40 <HAL_DMA_Init>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <HAL_UART_MspInit+0x142>
      Error_Handler();
 800714e:	f7ff faeb 	bl	8006728 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_UART_MspInit+0x168>)
 8007156:	635a      	str	r2, [r3, #52]	; 0x34
 8007158:	4a07      	ldr	r2, [pc, #28]	; (8007178 <HAL_UART_MspInit+0x168>)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800715e:	bf00      	nop
 8007160:	3730      	adds	r7, #48	; 0x30
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40011000 	.word	0x40011000
 800716c:	40023800 	.word	0x40023800
 8007170:	40020000 	.word	0x40020000
 8007174:	40004400 	.word	0x40004400
 8007178:	200030ec 	.word	0x200030ec
 800717c:	40026088 	.word	0x40026088

08007180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007184:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007186:	e003      	b.n	8007190 <LoopCopyDataInit>

08007188 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007188:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800718a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800718c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800718e:	3104      	adds	r1, #4

08007190 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007190:	480b      	ldr	r0, [pc, #44]	; (80071c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007194:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007196:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007198:	d3f6      	bcc.n	8007188 <CopyDataInit>
  ldr  r2, =_sbss
 800719a:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800719c:	e002      	b.n	80071a4 <LoopFillZerobss>

0800719e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800719e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071a0:	f842 3b04 	str.w	r3, [r2], #4

080071a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071a8:	d3f9      	bcc.n	800719e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80071aa:	f7ff fd1b 	bl	8006be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071ae:	f009 f893 	bl	80102d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071b2:	f7fd fe31 	bl	8004e18 <main>
  bx  lr    
 80071b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80071b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80071bc:	08017848 	.word	0x08017848
  ldr  r0, =_sdata
 80071c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80071c4:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 80071c8:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 80071cc:	20005250 	.word	0x20005250

080071d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071d0:	e7fe      	b.n	80071d0 <DMA1_Stream0_IRQHandler>
	...

080071d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <HAL_Init+0x40>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0d      	ldr	r2, [pc, #52]	; (8007214 <HAL_Init+0x40>)
 80071de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_Init+0x40>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <HAL_Init+0x40>)
 80071ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_Init+0x40>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a07      	ldr	r2, [pc, #28]	; (8007214 <HAL_Init+0x40>)
 80071f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071fc:	2003      	movs	r0, #3
 80071fe:	f000 fddd 	bl	8007dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007202:	2000      	movs	r0, #0
 8007204:	f000 f808 	bl	8007218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007208:	f7ff fb14 	bl	8006834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023c00 	.word	0x40023c00

08007218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <HAL_InitTick+0x54>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <HAL_InitTick+0x58>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	4619      	mov	r1, r3
 800722a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800722e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007232:	fbb2 f3f3 	udiv	r3, r2, r3
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fdf5 	bl	8007e26 <HAL_SYSTICK_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e00e      	b.n	8007264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b0f      	cmp	r3, #15
 800724a:	d80a      	bhi.n	8007262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800724c:	2200      	movs	r2, #0
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	f000 fdbd 	bl	8007dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007258:	4a06      	ldr	r2, [pc, #24]	; (8007274 <HAL_InitTick+0x5c>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	e000      	b.n	8007264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000030 	.word	0x20000030
 8007270:	20000038 	.word	0x20000038
 8007274:	20000034 	.word	0x20000034

08007278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <HAL_IncTick+0x20>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	4b06      	ldr	r3, [pc, #24]	; (800729c <HAL_IncTick+0x24>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4413      	add	r3, r2
 8007288:	4a04      	ldr	r2, [pc, #16]	; (800729c <HAL_IncTick+0x24>)
 800728a:	6013      	str	r3, [r2, #0]
}
 800728c:	bf00      	nop
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000038 	.word	0x20000038
 800729c:	200031cc 	.word	0x200031cc

080072a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  return uwTick;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <HAL_GetTick+0x14>)
 80072a6:	681b      	ldr	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200031cc 	.word	0x200031cc

080072b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072c0:	f7ff ffee 	bl	80072a0 <HAL_GetTick>
 80072c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d005      	beq.n	80072de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_Delay+0x44>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072de:	bf00      	nop
 80072e0:	f7ff ffde 	bl	80072a0 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d8f7      	bhi.n	80072e0 <HAL_Delay+0x28>
  {
  }
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000038 	.word	0x20000038

08007300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e033      	b.n	800737e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fc febe 	bl	80040a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b00      	cmp	r3, #0
 800733c:	d118      	bne.n	8007370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007346:	f023 0302 	bic.w	r3, r3, #2
 800734a:	f043 0202 	orr.w	r2, r3, #2
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb5c 	bl	8007a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	f043 0201 	orr.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40
 800736e:	e001      	b.n	8007374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_ADC_Start_IT+0x1a>
 800739e:	2302      	movs	r3, #2
 80073a0:	e094      	b.n	80074cc <HAL_ADC_Start_IT+0x144>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d018      	beq.n	80073ea <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80073c8:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <HAL_ADC_Start_IT+0x150>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a43      	ldr	r2, [pc, #268]	; (80074dc <HAL_ADC_Start_IT+0x154>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	0c9a      	lsrs	r2, r3, #18
 80073d4:	4613      	mov	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80073dc:	e002      	b.n	80073e4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f9      	bne.n	80073de <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d168      	bne.n	80074ca <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007436:	d106      	bne.n	8007446 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f023 0206 	bic.w	r2, r3, #6
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
 8007444:	e002      	b.n	800744c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007454:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <HAL_ADC_Start_IT+0x158>)
 8007456:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007460:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007470:	f043 0320 	orr.w	r3, r3, #32
 8007474:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d11c      	bne.n	80074ca <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	e013      	b.n	80074ca <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0f      	ldr	r2, [pc, #60]	; (80074e4 <HAL_ADC_Start_IT+0x15c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d10e      	bne.n	80074ca <HAL_ADC_Start_IT+0x142>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80074c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000030 	.word	0x20000030
 80074dc:	431bde83 	.word	0x431bde83
 80074e0:	40012300 	.word	0x40012300
 80074e4:	40012000 	.word	0x40012000

080074e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	2300      	movs	r3, #0
 80074f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b20      	cmp	r3, #32
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d049      	beq.n	80075be <HAL_ADC_IRQHandler+0xd6>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d046      	beq.n	80075be <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d12b      	bne.n	80075ae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800755a:	2b00      	cmp	r3, #0
 800755c:	d127      	bne.n	80075ae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007576:	2b00      	cmp	r3, #0
 8007578:	d119      	bne.n	80075ae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0220 	bic.w	r2, r2, #32
 8007588:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fd ff4a 	bl	8005448 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0212 	mvn.w	r2, #18
 80075bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	bf0c      	ite	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	2300      	movne	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d057      	beq.n	80076a0 <HAL_ADC_IRQHandler+0x1b8>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d054      	beq.n	80076a0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d139      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007634:	2b00      	cmp	r3, #0
 8007636:	d12b      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007642:	2b00      	cmp	r3, #0
 8007644:	d124      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11d      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007658:	2b00      	cmp	r3, #0
 800765a:	d119      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800766a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	f043 0201 	orr.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fab9 	bl	8007c08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f06f 020c 	mvn.w	r2, #12
 800769e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	bf0c      	ite	eq
 80076ae:	2301      	moveq	r3, #1
 80076b0:	2300      	movne	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <HAL_ADC_IRQHandler+0x21a>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d014      	beq.n	8007702 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10d      	bne.n	8007702 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f846 	bl	8007784 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0201 	mvn.w	r2, #1
 8007700:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b20      	cmp	r3, #32
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d015      	beq.n	8007762 <HAL_ADC_IRQHandler+0x27a>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d012      	beq.n	8007762 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	f043 0202 	orr.w	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0220 	mvn.w	r2, #32
 8007750:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f820 	bl	8007798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0220 	mvn.w	r2, #32
 8007760:	601a      	str	r2, [r3, #0]
  }
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_ADC_ConfigChannel+0x1c>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e113      	b.n	80079f0 <HAL_ADC_ConfigChannel+0x244>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	d925      	bls.n	8007824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68d9      	ldr	r1, [r3, #12]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	3b1e      	subs	r3, #30
 80077ee:	2207      	movs	r2, #7
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	43da      	mvns	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	400a      	ands	r2, r1
 80077fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68d9      	ldr	r1, [r3, #12]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	4618      	mov	r0, r3
 8007810:	4603      	mov	r3, r0
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	4403      	add	r3, r0
 8007816:	3b1e      	subs	r3, #30
 8007818:	409a      	lsls	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	e022      	b.n	800786a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6919      	ldr	r1, [r3, #16]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	4613      	mov	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4413      	add	r3, r2
 8007838:	2207      	movs	r2, #7
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	43da      	mvns	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	400a      	ands	r2, r1
 8007846:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6919      	ldr	r1, [r3, #16]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	4618      	mov	r0, r3
 800785a:	4603      	mov	r3, r0
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	4403      	add	r3, r0
 8007860:	409a      	lsls	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b06      	cmp	r3, #6
 8007870:	d824      	bhi.n	80078bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	3b05      	subs	r3, #5
 8007884:	221f      	movs	r2, #31
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43da      	mvns	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	400a      	ands	r2, r1
 8007892:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4618      	mov	r0, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	3b05      	subs	r3, #5
 80078ae:	fa00 f203 	lsl.w	r2, r0, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34
 80078ba:	e04c      	b.n	8007956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b0c      	cmp	r3, #12
 80078c2:	d824      	bhi.n	800790e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	3b23      	subs	r3, #35	; 0x23
 80078d6:	221f      	movs	r2, #31
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43da      	mvns	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	400a      	ands	r2, r1
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4618      	mov	r0, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	3b23      	subs	r3, #35	; 0x23
 8007900:	fa00 f203 	lsl.w	r2, r0, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
 800790c:	e023      	b.n	8007956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	3b41      	subs	r3, #65	; 0x41
 8007920:	221f      	movs	r2, #31
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	43da      	mvns	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	400a      	ands	r2, r1
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	4618      	mov	r0, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	3b41      	subs	r3, #65	; 0x41
 800794a:	fa00 f203 	lsl.w	r2, r0, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007956:	4b29      	ldr	r3, [pc, #164]	; (80079fc <HAL_ADC_ConfigChannel+0x250>)
 8007958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <HAL_ADC_ConfigChannel+0x254>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d10f      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x1d8>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b12      	cmp	r3, #18
 800796a:	d10b      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <HAL_ADC_ConfigChannel+0x254>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d12b      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x23a>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1c      	ldr	r2, [pc, #112]	; (8007a04 <HAL_ADC_ConfigChannel+0x258>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <HAL_ADC_ConfigChannel+0x1f4>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b11      	cmp	r3, #17
 800799e:	d122      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a11      	ldr	r2, [pc, #68]	; (8007a04 <HAL_ADC_ConfigChannel+0x258>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d111      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80079c2:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <HAL_ADC_ConfigChannel+0x25c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <HAL_ADC_ConfigChannel+0x260>)
 80079c8:	fba2 2303 	umull	r2, r3, r2, r3
 80079cc:	0c9a      	lsrs	r2, r3, #18
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079d8:	e002      	b.n	80079e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3b01      	subs	r3, #1
 80079de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f9      	bne.n	80079da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40012300 	.word	0x40012300
 8007a00:	40012000 	.word	0x40012000
 8007a04:	10000012 	.word	0x10000012
 8007a08:	20000030 	.word	0x20000030
 8007a0c:	431bde83 	.word	0x431bde83

08007a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a18:	4b79      	ldr	r3, [pc, #484]	; (8007c00 <ADC_Init+0x1f0>)
 8007a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6859      	ldr	r1, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	021a      	lsls	r2, r3, #8
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6859      	ldr	r1, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	4a58      	ldr	r2, [pc, #352]	; (8007c04 <ADC_Init+0x1f4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d022      	beq.n	8007aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6899      	ldr	r1, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6899      	ldr	r1, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	e00f      	b.n	8007b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0202 	bic.w	r2, r2, #2
 8007b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6899      	ldr	r1, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7e1b      	ldrb	r3, [r3, #24]
 8007b28:	005a      	lsls	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6859      	ldr	r1, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	3b01      	subs	r3, #1
 8007b68:	035a      	lsls	r2, r3, #13
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
 8007b72:	e007      	b.n	8007b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	051a      	lsls	r2, r3, #20
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6899      	ldr	r1, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bc6:	025a      	lsls	r2, r3, #9
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6899      	ldr	r1, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	029a      	lsls	r2, r3, #10
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	40012300 	.word	0x40012300
 8007c04:	0f000001 	.word	0x0f000001

08007c08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	60d3      	str	r3, [r2, #12]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	e000ed00 	.word	0xe000ed00

08007c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <__NVIC_GetPriorityGrouping+0x18>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	f003 0307 	and.w	r3, r3, #7
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	e000ed00 	.word	0xe000ed00

08007c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db0b      	blt.n	8007caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	f003 021f 	and.w	r2, r3, #31
 8007c98:	4907      	ldr	r1, [pc, #28]	; (8007cb8 <__NVIC_EnableIRQ+0x38>)
 8007c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	e000e100 	.word	0xe000e100

08007cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	db0a      	blt.n	8007ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	490c      	ldr	r1, [pc, #48]	; (8007d08 <__NVIC_SetPriority+0x4c>)
 8007cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cda:	0112      	lsls	r2, r2, #4
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	440b      	add	r3, r1
 8007ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ce4:	e00a      	b.n	8007cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4908      	ldr	r1, [pc, #32]	; (8007d0c <__NVIC_SetPriority+0x50>)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	0112      	lsls	r2, r2, #4
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	761a      	strb	r2, [r3, #24]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	e000e100 	.word	0xe000e100
 8007d0c:	e000ed00 	.word	0xe000ed00

08007d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f1c3 0307 	rsb	r3, r3, #7
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	bf28      	it	cs
 8007d2e:	2304      	movcs	r3, #4
 8007d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3304      	adds	r3, #4
 8007d36:	2b06      	cmp	r3, #6
 8007d38:	d902      	bls.n	8007d40 <NVIC_EncodePriority+0x30>
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3b03      	subs	r3, #3
 8007d3e:	e000      	b.n	8007d42 <NVIC_EncodePriority+0x32>
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	43da      	mvns	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	401a      	ands	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d58:	f04f 31ff 	mov.w	r1, #4294967295
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d62:	43d9      	mvns	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d68:	4313      	orrs	r3, r2
         );
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3724      	adds	r7, #36	; 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d88:	d301      	bcc.n	8007d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e00f      	b.n	8007dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <SysTick_Config+0x40>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d96:	210f      	movs	r1, #15
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	f7ff ff8e 	bl	8007cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <SysTick_Config+0x40>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <SysTick_Config+0x40>)
 8007da8:	2207      	movs	r2, #7
 8007daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	e000e010 	.word	0xe000e010

08007dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff ff29 	bl	8007c1c <__NVIC_SetPriorityGrouping>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	4603      	mov	r3, r0
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
 8007dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007de4:	f7ff ff3e 	bl	8007c64 <__NVIC_GetPriorityGrouping>
 8007de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	6978      	ldr	r0, [r7, #20]
 8007df0:	f7ff ff8e 	bl	8007d10 <NVIC_EncodePriority>
 8007df4:	4602      	mov	r2, r0
 8007df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff ff5d 	bl	8007cbc <__NVIC_SetPriority>
}
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4603      	mov	r3, r0
 8007e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff ff31 	bl	8007c80 <__NVIC_EnableIRQ>
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ffa2 	bl	8007d78 <SysTick_Config>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007e4c:	f7ff fa28 	bl	80072a0 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e099      	b.n	8007f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e7c:	e00f      	b.n	8007e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e7e:	f7ff fa0f 	bl	80072a0 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	d908      	bls.n	8007e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2203      	movs	r2, #3
 8007e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e078      	b.n	8007f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e8      	bne.n	8007e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4b38      	ldr	r3, [pc, #224]	; (8007f98 <HAL_DMA_Init+0x158>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d107      	bne.n	8007f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	4313      	orrs	r3, r2
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0307 	bic.w	r3, r3, #7
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d117      	bne.n	8007f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00e      	beq.n	8007f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa91 	bl	800846c <DMA_CheckFifoParam>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2240      	movs	r2, #64	; 0x40
 8007f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e016      	b.n	8007f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa48 	bl	8008400 <DMA_CalcBaseAndBitshift>
 8007f70:	4603      	mov	r3, r0
 8007f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f78:	223f      	movs	r2, #63	; 0x3f
 8007f7a:	409a      	lsls	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	f010803f 	.word	0xf010803f

08007f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_DMA_Start_IT+0x26>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e040      	b.n	8008044 <HAL_DMA_Start_IT+0xa8>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d12f      	bne.n	8008036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f9da 	bl	80083a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff4:	223f      	movs	r2, #63	; 0x3f
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0216 	orr.w	r2, r2, #22
 800800a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0208 	orr.w	r2, r2, #8
 8008022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e005      	b.n	8008042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800803e:	2302      	movs	r3, #2
 8008040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d004      	beq.n	800806a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2280      	movs	r2, #128	; 0x80
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e00c      	b.n	8008084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2205      	movs	r2, #5
 800806e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800809c:	4b92      	ldr	r3, [pc, #584]	; (80082e8 <HAL_DMA_IRQHandler+0x258>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a92      	ldr	r2, [pc, #584]	; (80082ec <HAL_DMA_IRQHandler+0x25c>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ba:	2208      	movs	r2, #8
 80080bc:	409a      	lsls	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01a      	beq.n	80080fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d013      	beq.n	80080fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0204 	bic.w	r2, r2, #4
 80080e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	2208      	movs	r2, #8
 80080ea:	409a      	lsls	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	f043 0201 	orr.w	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4013      	ands	r3, r2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d012      	beq.n	8008132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	f043 0202 	orr.w	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008136:	2204      	movs	r2, #4
 8008138:	409a      	lsls	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d012      	beq.n	8008168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	2204      	movs	r2, #4
 8008156:	409a      	lsls	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f043 0204 	orr.w	r2, r3, #4
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816c:	2210      	movs	r2, #16
 800816e:	409a      	lsls	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d043      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03c      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	2210      	movs	r2, #16
 800818c:	409a      	lsls	r2, r3
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d018      	beq.n	80081d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d024      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	e01f      	b.n	8008200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01b      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
 80081d0:	e016      	b.n	8008200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d107      	bne.n	80081f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0208 	bic.w	r2, r2, #8
 80081ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	2220      	movs	r2, #32
 8008206:	409a      	lsls	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 808e 	beq.w	800832e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8086 	beq.w	800832e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008226:	2220      	movs	r2, #32
 8008228:	409a      	lsls	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b05      	cmp	r3, #5
 8008238:	d136      	bne.n	80082a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0216 	bic.w	r2, r2, #22
 8008248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d103      	bne.n	800826a <HAL_DMA_IRQHandler+0x1da>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0208 	bic.w	r2, r2, #8
 8008278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827e:	223f      	movs	r2, #63	; 0x3f
 8008280:	409a      	lsls	r2, r3
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d07d      	beq.n	800839a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
        }
        return;
 80082a6:	e078      	b.n	800839a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d01c      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d108      	bne.n	80082d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d030      	beq.n	800832e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	e02b      	b.n	800832e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d027      	beq.n	800832e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	e022      	b.n	800832e <HAL_DMA_IRQHandler+0x29e>
 80082e8:	20000030 	.word	0x20000030
 80082ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10f      	bne.n	800831e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0210 	bic.w	r2, r2, #16
 800830c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	2b00      	cmp	r3, #0
 8008334:	d032      	beq.n	800839c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d022      	beq.n	8008388 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2205      	movs	r2, #5
 8008346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	3301      	adds	r3, #1
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	d307      	bcc.n	8008376 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f2      	bne.n	800835a <HAL_DMA_IRQHandler+0x2ca>
 8008374:	e000      	b.n	8008378 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008376:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	e000      	b.n	800839c <HAL_DMA_IRQHandler+0x30c>
        return;
 800839a:	bf00      	nop
    }
  }
}
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d108      	bne.n	80083e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80083e2:	e007      	b.n	80083f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	60da      	str	r2, [r3, #12]
}
 80083f4:	bf00      	nop
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	3b10      	subs	r3, #16
 8008410:	4a14      	ldr	r2, [pc, #80]	; (8008464 <DMA_CalcBaseAndBitshift+0x64>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <DMA_CalcBaseAndBitshift+0x68>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d909      	bls.n	8008442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008436:	f023 0303 	bic.w	r3, r3, #3
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	659a      	str	r2, [r3, #88]	; 0x58
 8008440:	e007      	b.n	8008452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	aaaaaaab 	.word	0xaaaaaaab
 8008468:	08016e9c 	.word	0x08016e9c

0800846c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11f      	bne.n	80084c6 <DMA_CheckFifoParam+0x5a>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b03      	cmp	r3, #3
 800848a:	d856      	bhi.n	800853a <DMA_CheckFifoParam+0xce>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <DMA_CheckFifoParam+0x28>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084b7 	.word	0x080084b7
 800849c:	080084a5 	.word	0x080084a5
 80084a0:	0800853b 	.word	0x0800853b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d046      	beq.n	800853e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084b4:	e043      	b.n	800853e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084be:	d140      	bne.n	8008542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084c4:	e03d      	b.n	8008542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ce:	d121      	bne.n	8008514 <DMA_CheckFifoParam+0xa8>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d837      	bhi.n	8008546 <DMA_CheckFifoParam+0xda>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <DMA_CheckFifoParam+0x70>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084f3 	.word	0x080084f3
 80084e4:	080084ed 	.word	0x080084ed
 80084e8:	08008505 	.word	0x08008505
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e030      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d025      	beq.n	800854a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008502:	e022      	b.n	800854a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800850c:	d11f      	bne.n	800854e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008512:	e01c      	b.n	800854e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d903      	bls.n	8008522 <DMA_CheckFifoParam+0xb6>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d003      	beq.n	8008528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008520:	e018      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	73fb      	strb	r3, [r7, #15]
      break;
 8008526:	e015      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	e00b      	b.n	8008552 <DMA_CheckFifoParam+0xe6>
      break;
 800853a:	bf00      	nop
 800853c:	e00a      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;
 800853e:	bf00      	nop
 8008540:	e008      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;
 8008542:	bf00      	nop
 8008544:	e006      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;
 8008546:	bf00      	nop
 8008548:	e004      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;
 800854a:	bf00      	nop
 800854c:	e002      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;   
 800854e:	bf00      	nop
 8008550:	e000      	b.n	8008554 <DMA_CheckFifoParam+0xe8>
      break;
 8008552:	bf00      	nop
    }
  } 
  
  return status; 
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop

08008564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008564:	b480      	push	{r7}
 8008566:	b089      	sub	sp, #36	; 0x24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008572:	2300      	movs	r3, #0
 8008574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008576:	2300      	movs	r3, #0
 8008578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	e159      	b.n	8008834 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008580:	2201      	movs	r2, #1
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4013      	ands	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	429a      	cmp	r2, r3
 800859a:	f040 8148 	bne.w	800882e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d00b      	beq.n	80085be <HAL_GPIO_Init+0x5a>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d007      	beq.n	80085be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085b2:	2b11      	cmp	r3, #17
 80085b4:	d003      	beq.n	80085be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b12      	cmp	r3, #18
 80085bc:	d130      	bne.n	8008620 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	2203      	movs	r2, #3
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085f4:	2201      	movs	r2, #1
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 0201 	and.w	r2, r3, #1
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4313      	orrs	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	2203      	movs	r2, #3
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	43db      	mvns	r3, r3
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	4013      	ands	r3, r2
 8008636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4313      	orrs	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d003      	beq.n	8008660 <HAL_GPIO_Init+0xfc>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b12      	cmp	r3, #18
 800865e:	d123      	bne.n	80086a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	08da      	lsrs	r2, r3, #3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3208      	adds	r2, #8
 8008668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	220f      	movs	r2, #15
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	43db      	mvns	r3, r3
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	4013      	ands	r3, r2
 8008682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4313      	orrs	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	08da      	lsrs	r2, r3, #3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3208      	adds	r2, #8
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	2203      	movs	r2, #3
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	43db      	mvns	r3, r3
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	4013      	ands	r3, r2
 80086be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f003 0203 	and.w	r2, r3, #3
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	fa02 f303 	lsl.w	r3, r2, r3
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80a2 	beq.w	800882e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	4b57      	ldr	r3, [pc, #348]	; (800884c <HAL_GPIO_Init+0x2e8>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	4a56      	ldr	r2, [pc, #344]	; (800884c <HAL_GPIO_Init+0x2e8>)
 80086f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086f8:	6453      	str	r3, [r2, #68]	; 0x44
 80086fa:	4b54      	ldr	r3, [pc, #336]	; (800884c <HAL_GPIO_Init+0x2e8>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008706:	4a52      	ldr	r2, [pc, #328]	; (8008850 <HAL_GPIO_Init+0x2ec>)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3302      	adds	r3, #2
 800870e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	220f      	movs	r2, #15
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	43db      	mvns	r3, r3
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	4013      	ands	r3, r2
 8008728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a49      	ldr	r2, [pc, #292]	; (8008854 <HAL_GPIO_Init+0x2f0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d019      	beq.n	8008766 <HAL_GPIO_Init+0x202>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a48      	ldr	r2, [pc, #288]	; (8008858 <HAL_GPIO_Init+0x2f4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d013      	beq.n	8008762 <HAL_GPIO_Init+0x1fe>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a47      	ldr	r2, [pc, #284]	; (800885c <HAL_GPIO_Init+0x2f8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00d      	beq.n	800875e <HAL_GPIO_Init+0x1fa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a46      	ldr	r2, [pc, #280]	; (8008860 <HAL_GPIO_Init+0x2fc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d007      	beq.n	800875a <HAL_GPIO_Init+0x1f6>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a45      	ldr	r2, [pc, #276]	; (8008864 <HAL_GPIO_Init+0x300>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d101      	bne.n	8008756 <HAL_GPIO_Init+0x1f2>
 8008752:	2304      	movs	r3, #4
 8008754:	e008      	b.n	8008768 <HAL_GPIO_Init+0x204>
 8008756:	2307      	movs	r3, #7
 8008758:	e006      	b.n	8008768 <HAL_GPIO_Init+0x204>
 800875a:	2303      	movs	r3, #3
 800875c:	e004      	b.n	8008768 <HAL_GPIO_Init+0x204>
 800875e:	2302      	movs	r3, #2
 8008760:	e002      	b.n	8008768 <HAL_GPIO_Init+0x204>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <HAL_GPIO_Init+0x204>
 8008766:	2300      	movs	r3, #0
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	f002 0203 	and.w	r2, r2, #3
 800876e:	0092      	lsls	r2, r2, #2
 8008770:	4093      	lsls	r3, r2
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008778:	4935      	ldr	r1, [pc, #212]	; (8008850 <HAL_GPIO_Init+0x2ec>)
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	089b      	lsrs	r3, r3, #2
 800877e:	3302      	adds	r3, #2
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008786:	4b38      	ldr	r3, [pc, #224]	; (8008868 <HAL_GPIO_Init+0x304>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	43db      	mvns	r3, r3
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	4013      	ands	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087aa:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <HAL_GPIO_Init+0x304>)
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80087b0:	4b2d      	ldr	r3, [pc, #180]	; (8008868 <HAL_GPIO_Init+0x304>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	43db      	mvns	r3, r3
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	4013      	ands	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087d4:	4a24      	ldr	r2, [pc, #144]	; (8008868 <HAL_GPIO_Init+0x304>)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087da:	4b23      	ldr	r3, [pc, #140]	; (8008868 <HAL_GPIO_Init+0x304>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	43db      	mvns	r3, r3
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4013      	ands	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087fe:	4a1a      	ldr	r2, [pc, #104]	; (8008868 <HAL_GPIO_Init+0x304>)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008804:	4b18      	ldr	r3, [pc, #96]	; (8008868 <HAL_GPIO_Init+0x304>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	43db      	mvns	r3, r3
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	4013      	ands	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008828:	4a0f      	ldr	r2, [pc, #60]	; (8008868 <HAL_GPIO_Init+0x304>)
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	3301      	adds	r3, #1
 8008832:	61fb      	str	r3, [r7, #28]
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	2b0f      	cmp	r3, #15
 8008838:	f67f aea2 	bls.w	8008580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	3724      	adds	r7, #36	; 0x24
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40023800 	.word	0x40023800
 8008850:	40013800 	.word	0x40013800
 8008854:	40020000 	.word	0x40020000
 8008858:	40020400 	.word	0x40020400
 800885c:	40020800 	.word	0x40020800
 8008860:	40020c00 	.word	0x40020c00
 8008864:	40021000 	.word	0x40021000
 8008868:	40013c00 	.word	0x40013c00

0800886c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
 8008878:	4613      	mov	r3, r2
 800887a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800887c:	787b      	ldrb	r3, [r7, #1]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008882:	887a      	ldrh	r2, [r7, #2]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008888:	e003      	b.n	8008892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	041a      	lsls	r2, r3, #16
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	619a      	str	r2, [r3, #24]
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	887b      	ldrh	r3, [r7, #2]
 80088b0:	401a      	ands	r2, r3
 80088b2:	887b      	ldrh	r3, [r7, #2]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d104      	bne.n	80088c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088b8:	887b      	ldrh	r3, [r7, #2]
 80088ba:	041a      	lsls	r2, r3, #16
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80088c0:	e002      	b.n	80088c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80088c2:	887a      	ldrh	r2, [r7, #2]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	619a      	str	r2, [r3, #24]
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e12b      	b.n	8008b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fc fa00 	bl	8004d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	; 0x24
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008938:	f002 f946 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800893c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4a81      	ldr	r2, [pc, #516]	; (8008b48 <HAL_I2C_Init+0x274>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d807      	bhi.n	8008958 <HAL_I2C_Init+0x84>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a80      	ldr	r2, [pc, #512]	; (8008b4c <HAL_I2C_Init+0x278>)
 800894c:	4293      	cmp	r3, r2
 800894e:	bf94      	ite	ls
 8008950:	2301      	movls	r3, #1
 8008952:	2300      	movhi	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	e006      	b.n	8008966 <HAL_I2C_Init+0x92>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4a7d      	ldr	r2, [pc, #500]	; (8008b50 <HAL_I2C_Init+0x27c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	bf94      	ite	ls
 8008960:	2301      	movls	r3, #1
 8008962:	2300      	movhi	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e0e7      	b.n	8008b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a78      	ldr	r2, [pc, #480]	; (8008b54 <HAL_I2C_Init+0x280>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	0c9b      	lsrs	r3, r3, #18
 8008978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	430a      	orrs	r2, r1
 800898c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4a6a      	ldr	r2, [pc, #424]	; (8008b48 <HAL_I2C_Init+0x274>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d802      	bhi.n	80089a8 <HAL_I2C_Init+0xd4>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	3301      	adds	r3, #1
 80089a6:	e009      	b.n	80089bc <HAL_I2C_Init+0xe8>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	4a69      	ldr	r2, [pc, #420]	; (8008b58 <HAL_I2C_Init+0x284>)
 80089b4:	fba2 2303 	umull	r2, r3, r2, r3
 80089b8:	099b      	lsrs	r3, r3, #6
 80089ba:	3301      	adds	r3, #1
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	6812      	ldr	r2, [r2, #0]
 80089c0:	430b      	orrs	r3, r1
 80089c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80089ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	495c      	ldr	r1, [pc, #368]	; (8008b48 <HAL_I2C_Init+0x274>)
 80089d8:	428b      	cmp	r3, r1
 80089da:	d819      	bhi.n	8008a10 <HAL_I2C_Init+0x13c>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1e59      	subs	r1, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089f0:	400b      	ands	r3, r1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <HAL_I2C_Init+0x138>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1e59      	subs	r1, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a04:	3301      	adds	r3, #1
 8008a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a0a:	e051      	b.n	8008ab0 <HAL_I2C_Init+0x1dc>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	e04f      	b.n	8008ab0 <HAL_I2C_Init+0x1dc>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d111      	bne.n	8008a3c <HAL_I2C_Init+0x168>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	1e58      	subs	r0, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6859      	ldr	r1, [r3, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	440b      	add	r3, r1
 8008a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bf0c      	ite	eq
 8008a34:	2301      	moveq	r3, #1
 8008a36:	2300      	movne	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	e012      	b.n	8008a62 <HAL_I2C_Init+0x18e>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	1e58      	subs	r0, r3, #1
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6859      	ldr	r1, [r3, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	0099      	lsls	r1, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a52:	3301      	adds	r3, #1
 8008a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2301      	moveq	r3, #1
 8008a5e:	2300      	movne	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_I2C_Init+0x196>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e022      	b.n	8008ab0 <HAL_I2C_Init+0x1dc>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10e      	bne.n	8008a90 <HAL_I2C_Init+0x1bc>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1e58      	subs	r0, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6859      	ldr	r1, [r3, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	440b      	add	r3, r1
 8008a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a84:	3301      	adds	r3, #1
 8008a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8e:	e00f      	b.n	8008ab0 <HAL_I2C_Init+0x1dc>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	1e58      	subs	r0, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	0099      	lsls	r1, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	6809      	ldr	r1, [r1, #0]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6911      	ldr	r1, [r2, #16]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68d2      	ldr	r2, [r2, #12]
 8008aea:	4311      	orrs	r1, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	000186a0 	.word	0x000186a0
 8008b4c:	001e847f 	.word	0x001e847f
 8008b50:	003d08ff 	.word	0x003d08ff
 8008b54:	431bde83 	.word	0x431bde83
 8008b58:	10624dd3 	.word	0x10624dd3

08008b5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	817b      	strh	r3, [r7, #10]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b70:	f7fe fb96 	bl	80072a0 <HAL_GetTick>
 8008b74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	f040 80e0 	bne.w	8008d44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	2319      	movs	r3, #25
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4970      	ldr	r1, [pc, #448]	; (8008d50 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f001 fa24 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e0d3      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_I2C_Master_Transmit+0x50>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e0cc      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d007      	beq.n	8008bd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0201 	orr.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2221      	movs	r2, #33	; 0x21
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2210      	movs	r2, #16
 8008bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	893a      	ldrh	r2, [r7, #8]
 8008c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a50      	ldr	r2, [pc, #320]	; (8008d54 <HAL_I2C_Master_Transmit+0x1f8>)
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c14:	8979      	ldrh	r1, [r7, #10]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	6a3a      	ldr	r2, [r7, #32]
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 ff10 	bl	8009a40 <I2C_MasterRequestWrite>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e08d      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008c40:	e066      	b.n	8008d10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	6a39      	ldr	r1, [r7, #32]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f001 fa9e 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d107      	bne.n	8008c6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e06b      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d11b      	bne.n	8008ce4 <HAL_I2C_Master_Transmit+0x188>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d017      	beq.n	8008ce4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	6a39      	ldr	r1, [r7, #32]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f001 fa8e 	bl	800a20a <I2C_WaitOnBTFFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00d      	beq.n	8008d10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d107      	bne.n	8008d0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e01a      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d194      	bne.n	8008c42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008d44:	2302      	movs	r3, #2
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	00100002 	.word	0x00100002
 8008d54:	ffff0000 	.word	0xffff0000

08008d58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08c      	sub	sp, #48	; 0x30
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	817b      	strh	r3, [r7, #10]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d6c:	f7fe fa98 	bl	80072a0 <HAL_GetTick>
 8008d70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	f040 820b 	bne.w	8009196 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	2319      	movs	r3, #25
 8008d86:	2201      	movs	r2, #1
 8008d88:	497c      	ldr	r1, [pc, #496]	; (8008f7c <HAL_I2C_Master_Receive+0x224>)
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f001 f926 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
 8008d98:	e1fe      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_I2C_Master_Receive+0x50>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e1f7      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d007      	beq.n	8008dce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0201 	orr.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2222      	movs	r2, #34	; 0x22
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2210      	movs	r2, #16
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	893a      	ldrh	r2, [r7, #8]
 8008dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a5c      	ldr	r2, [pc, #368]	; (8008f80 <HAL_I2C_Master_Receive+0x228>)
 8008e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e10:	8979      	ldrh	r1, [r7, #10]
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fe94 	bl	8009b44 <I2C_MasterRequestRead>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e1b8      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d113      	bne.n	8008e56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	623b      	str	r3, [r7, #32]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	623b      	str	r3, [r7, #32]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	623b      	str	r3, [r7, #32]
 8008e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e18c      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d11b      	bne.n	8008e96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	61fb      	str	r3, [r7, #28]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e16c      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d11b      	bne.n	8008ed6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	61bb      	str	r3, [r7, #24]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	e14c      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008efc:	e138      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	f200 80f1 	bhi.w	80090ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d123      	bne.n	8008f58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f001 f9b9 	bl	800a28c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e139      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f56:	e10b      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d14e      	bne.n	8008ffe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	2200      	movs	r2, #0
 8008f68:	4906      	ldr	r1, [pc, #24]	; (8008f84 <HAL_I2C_Master_Receive+0x22c>)
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f001 f836 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e10e      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
 8008f7a:	bf00      	nop
 8008f7c:	00100002 	.word	0x00100002
 8008f80:	ffff0000 	.word	0xffff0000
 8008f84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691a      	ldr	r2, [r3, #16]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ffc:	e0b8      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	2200      	movs	r2, #0
 8009006:	4966      	ldr	r1, [pc, #408]	; (80091a0 <HAL_I2C_Master_Receive+0x448>)
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 ffe7 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0bf      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691a      	ldr	r2, [r3, #16]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	2200      	movs	r2, #0
 8009062:	494f      	ldr	r1, [pc, #316]	; (80091a0 <HAL_I2C_Master_Receive+0x448>)
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 ffb9 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e091      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	3b01      	subs	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090e8:	e042      	b.n	8009170 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f001 f8cc 	bl	800a28c <I2C_WaitOnRXNEFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e04c      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b04      	cmp	r3, #4
 800913c:	d118      	bne.n	8009170 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	b2d2      	uxtb	r2, r2
 800914a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009166:	b29b      	uxth	r3, r3
 8009168:	3b01      	subs	r3, #1
 800916a:	b29a      	uxth	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	f47f aec2 	bne.w	8008efe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2220      	movs	r2, #32
 800917e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009196:	2302      	movs	r3, #2
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	; 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	00010004 	.word	0x00010004

080091a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	817b      	strh	r3, [r7, #10]
 80091b6:	460b      	mov	r3, r1
 80091b8:	813b      	strh	r3, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091be:	f7fe f86f 	bl	80072a0 <HAL_GetTick>
 80091c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	f040 80d9 	bne.w	8009384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2319      	movs	r3, #25
 80091d8:	2201      	movs	r2, #1
 80091da:	496d      	ldr	r1, [pc, #436]	; (8009390 <HAL_I2C_Mem_Write+0x1ec>)
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 fefd 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
 80091ea:	e0cc      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <HAL_I2C_Mem_Write+0x56>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e0c5      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b01      	cmp	r3, #1
 800920e:	d007      	beq.n	8009220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800922e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2221      	movs	r2, #33	; 0x21
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2240      	movs	r2, #64	; 0x40
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4a4d      	ldr	r2, [pc, #308]	; (8009394 <HAL_I2C_Mem_Write+0x1f0>)
 8009260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009262:	88f8      	ldrh	r0, [r7, #6]
 8009264:	893a      	ldrh	r2, [r7, #8]
 8009266:	8979      	ldrh	r1, [r7, #10]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4603      	mov	r3, r0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fd34 	bl	8009ce0 <I2C_RequestMemoryWrite>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d052      	beq.n	8009324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e081      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 ff7e 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b04      	cmp	r3, #4
 8009298:	d107      	bne.n	80092aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e06b      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d11b      	bne.n	8009324 <HAL_I2C_Mem_Write+0x180>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d017      	beq.n	8009324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931a:	b29b      	uxth	r3, r3
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1aa      	bne.n	8009282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 ff6a 	bl	800a20a <I2C_WaitOnBTFFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00d      	beq.n	8009358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	2b04      	cmp	r3, #4
 8009342:	d107      	bne.n	8009354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e016      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2220      	movs	r2, #32
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	e000      	b.n	8009386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009384:	2302      	movs	r3, #2
  }
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	00100002 	.word	0x00100002
 8009394:	ffff0000 	.word	0xffff0000

08009398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08c      	sub	sp, #48	; 0x30
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	4608      	mov	r0, r1
 80093a2:	4611      	mov	r1, r2
 80093a4:	461a      	mov	r2, r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	817b      	strh	r3, [r7, #10]
 80093aa:	460b      	mov	r3, r1
 80093ac:	813b      	strh	r3, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093b2:	f7fd ff75 	bl	80072a0 <HAL_GetTick>
 80093b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b20      	cmp	r3, #32
 80093c2:	f040 8208 	bne.w	80097d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	2319      	movs	r3, #25
 80093cc:	2201      	movs	r2, #1
 80093ce:	497b      	ldr	r1, [pc, #492]	; (80095bc <HAL_I2C_Mem_Read+0x224>)
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fe03 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80093dc:	2302      	movs	r3, #2
 80093de:	e1fb      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_I2C_Mem_Read+0x56>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e1f4      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b01      	cmp	r3, #1
 8009402:	d007      	beq.n	8009414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0201 	orr.w	r2, r2, #1
 8009412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2222      	movs	r2, #34	; 0x22
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2240      	movs	r2, #64	; 0x40
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29a      	uxth	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4a5b      	ldr	r2, [pc, #364]	; (80095c0 <HAL_I2C_Mem_Read+0x228>)
 8009454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009456:	88f8      	ldrh	r0, [r7, #6]
 8009458:	893a      	ldrh	r2, [r7, #8]
 800945a:	8979      	ldrh	r1, [r7, #10]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	4603      	mov	r3, r0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fcd0 	bl	8009e0c <I2C_RequestMemoryRead>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e1b0      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d113      	bne.n	80094a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	623b      	str	r3, [r7, #32]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	e184      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d11b      	bne.n	80094e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e164      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d11b      	bne.n	8009526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800950c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950e:	2300      	movs	r3, #0
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	e144      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800953c:	e138      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009542:	2b03      	cmp	r3, #3
 8009544:	f200 80f1 	bhi.w	800972a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b01      	cmp	r3, #1
 800954e:	d123      	bne.n	8009598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 fe99 	bl	800a28c <I2C_WaitOnRXNEFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e139      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691a      	ldr	r2, [r3, #16]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958c:	b29b      	uxth	r3, r3
 800958e:	3b01      	subs	r3, #1
 8009590:	b29a      	uxth	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009596:	e10b      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959c:	2b02      	cmp	r3, #2
 800959e:	d14e      	bne.n	800963e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	2200      	movs	r2, #0
 80095a8:	4906      	ldr	r1, [pc, #24]	; (80095c4 <HAL_I2C_Mem_Read+0x22c>)
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fd16 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e10e      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
 80095ba:	bf00      	nop
 80095bc:	00100002 	.word	0x00100002
 80095c0:	ffff0000 	.word	0xffff0000
 80095c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691a      	ldr	r2, [r3, #16]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	b2d2      	uxtb	r2, r2
 8009616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	3b01      	subs	r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800963c:	e0b8      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	2200      	movs	r2, #0
 8009646:	4966      	ldr	r1, [pc, #408]	; (80097e0 <HAL_I2C_Mem_Read+0x448>)
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fcc7 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e0bf      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	2200      	movs	r2, #0
 80096a2:	494f      	ldr	r1, [pc, #316]	; (80097e0 <HAL_I2C_Mem_Read+0x448>)
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fc99 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e091      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691a      	ldr	r2, [r3, #16]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009728:	e042      	b.n	80097b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800972a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 fdac 	bl	800a28c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e04c      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975a:	3b01      	subs	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009766:	b29b      	uxth	r3, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b04      	cmp	r3, #4
 800977c:	d118      	bne.n	80097b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979a:	3b01      	subs	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f aec2 	bne.w	800953e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e000      	b.n	80097d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80097d6:	2302      	movs	r3, #2
  }
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3728      	adds	r7, #40	; 0x28
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	00010004 	.word	0x00010004

080097e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	460b      	mov	r3, r1
 80097f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80097f4:	f7fd fd54 	bl	80072a0 <HAL_GetTick>
 80097f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80097fa:	2301      	movs	r3, #1
 80097fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b20      	cmp	r3, #32
 8009808:	f040 8111 	bne.w	8009a2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2319      	movs	r3, #25
 8009812:	2201      	movs	r2, #1
 8009814:	4988      	ldr	r1, [pc, #544]	; (8009a38 <HAL_I2C_IsDeviceReady+0x254>)
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fbe0 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009822:	2302      	movs	r3, #2
 8009824:	e104      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <HAL_I2C_IsDeviceReady+0x50>
 8009830:	2302      	movs	r3, #2
 8009832:	e0fd      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b01      	cmp	r3, #1
 8009848:	d007      	beq.n	800985a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2224      	movs	r2, #36	; 0x24
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4a70      	ldr	r2, [pc, #448]	; (8009a3c <HAL_I2C_IsDeviceReady+0x258>)
 800987c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800988c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2200      	movs	r2, #0
 8009896:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fb9e 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00d      	beq.n	80098c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b4:	d103      	bne.n	80098be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e0b6      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098c2:	897b      	ldrh	r3, [r7, #10]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80098d2:	f7fd fce5 	bl	80072a0 <HAL_GetTick>
 80098d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	bf0c      	ite	eq
 80098e6:	2301      	moveq	r3, #1
 80098e8:	2300      	movne	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098fc:	bf0c      	ite	eq
 80098fe:	2301      	moveq	r3, #1
 8009900:	2300      	movne	r3, #0
 8009902:	b2db      	uxtb	r3, r3
 8009904:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009906:	e025      	b.n	8009954 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009908:	f7fd fcca 	bl	80072a0 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d302      	bcc.n	800991e <HAL_I2C_IsDeviceReady+0x13a>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d103      	bne.n	8009926 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	22a0      	movs	r2, #160	; 0xa0
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	f003 0302 	and.w	r3, r3, #2
 8009930:	2b02      	cmp	r3, #2
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800994a:	bf0c      	ite	eq
 800994c:	2301      	moveq	r3, #1
 800994e:	2300      	movne	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2ba0      	cmp	r3, #160	; 0xa0
 800995e:	d005      	beq.n	800996c <HAL_I2C_IsDeviceReady+0x188>
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <HAL_I2C_IsDeviceReady+0x188>
 8009966:	7dbb      	ldrb	r3, [r7, #22]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0cd      	beq.n	8009908 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b02      	cmp	r3, #2
 8009980:	d129      	bne.n	80099d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009990:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	2319      	movs	r3, #25
 80099ae:	2201      	movs	r2, #1
 80099b0:	4921      	ldr	r1, [pc, #132]	; (8009a38 <HAL_I2C_IsDeviceReady+0x254>)
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fb12 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e036      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e02c      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	2319      	movs	r3, #25
 80099f6:	2201      	movs	r2, #1
 80099f8:	490f      	ldr	r1, [pc, #60]	; (8009a38 <HAL_I2C_IsDeviceReady+0x254>)
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 faee 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e012      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	f4ff af32 	bcc.w	800987e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009a2e:	2302      	movs	r3, #2
  }
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	00100002 	.word	0x00100002
 8009a3c:	ffff0000 	.word	0xffff0000

08009a40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d006      	beq.n	8009a6a <I2C_MasterRequestWrite+0x2a>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d003      	beq.n	8009a6a <I2C_MasterRequestWrite+0x2a>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a68:	d108      	bne.n	8009a7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e00b      	b.n	8009a94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	2b12      	cmp	r3, #18
 8009a82:	d107      	bne.n	8009a94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 fa9b 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aba:	d103      	bne.n	8009ac4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e035      	b.n	8009b34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ad0:	d108      	bne.n	8009ae4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ad2:	897b      	ldrh	r3, [r7, #10]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ae0:	611a      	str	r2, [r3, #16]
 8009ae2:	e01b      	b.n	8009b1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ae4:	897b      	ldrh	r3, [r7, #10]
 8009ae6:	11db      	asrs	r3, r3, #7
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f003 0306 	and.w	r3, r3, #6
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f063 030f 	orn	r3, r3, #15
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	490e      	ldr	r1, [pc, #56]	; (8009b3c <I2C_MasterRequestWrite+0xfc>)
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fac1 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e010      	b.n	8009b34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b12:	897b      	ldrh	r3, [r7, #10]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	4907      	ldr	r1, [pc, #28]	; (8009b40 <I2C_MasterRequestWrite+0x100>)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fab1 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	00010008 	.word	0x00010008
 8009b40:	00010002 	.word	0x00010002

08009b44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	460b      	mov	r3, r1
 8009b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d006      	beq.n	8009b7e <I2C_MasterRequestRead+0x3a>
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d003      	beq.n	8009b7e <I2C_MasterRequestRead+0x3a>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b7c:	d108      	bne.n	8009b90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e00b      	b.n	8009ba8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b94:	2b11      	cmp	r3, #17
 8009b96:	d107      	bne.n	8009ba8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fa11 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00d      	beq.n	8009bdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bce:	d103      	bne.n	8009bd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e079      	b.n	8009cd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009be4:	d108      	bne.n	8009bf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009be6:	897b      	ldrh	r3, [r7, #10]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	611a      	str	r2, [r3, #16]
 8009bf6:	e05f      	b.n	8009cb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009bf8:	897b      	ldrh	r3, [r7, #10]
 8009bfa:	11db      	asrs	r3, r3, #7
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	f003 0306 	and.w	r3, r3, #6
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f063 030f 	orn	r3, r3, #15
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4930      	ldr	r1, [pc, #192]	; (8009cd8 <I2C_MasterRequestRead+0x194>)
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fa37 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e054      	b.n	8009cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c26:	897b      	ldrh	r3, [r7, #10]
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4929      	ldr	r1, [pc, #164]	; (8009cdc <I2C_MasterRequestRead+0x198>)
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fa27 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e044      	b.n	8009cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f9af 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00d      	beq.n	8009ca0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c92:	d103      	bne.n	8009c9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e017      	b.n	8009cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009ca0:	897b      	ldrh	r3, [r7, #10]
 8009ca2:	11db      	asrs	r3, r3, #7
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f003 0306 	and.w	r3, r3, #6
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	f063 030e 	orn	r3, r3, #14
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4907      	ldr	r1, [pc, #28]	; (8009cdc <I2C_MasterRequestRead+0x198>)
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f9e3 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	00010008 	.word	0x00010008
 8009cdc:	00010002 	.word	0x00010002

08009ce0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	461a      	mov	r2, r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	817b      	strh	r3, [r7, #10]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	813b      	strh	r3, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f960 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d30:	d103      	bne.n	8009d3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e05f      	b.n	8009dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d3e:	897b      	ldrh	r3, [r7, #10]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	461a      	mov	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	6a3a      	ldr	r2, [r7, #32]
 8009d52:	492d      	ldr	r1, [pc, #180]	; (8009e08 <I2C_RequestMemoryWrite+0x128>)
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f998 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e04c      	b.n	8009dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d64:	2300      	movs	r3, #0
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7c:	6a39      	ldr	r1, [r7, #32]
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fa02 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00d      	beq.n	8009da6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d107      	bne.n	8009da2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e02b      	b.n	8009dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d105      	bne.n	8009db8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009dac:	893b      	ldrh	r3, [r7, #8]
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	611a      	str	r2, [r3, #16]
 8009db6:	e021      	b.n	8009dfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009db8:	893b      	ldrh	r3, [r7, #8]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc8:	6a39      	ldr	r1, [r7, #32]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f9dc 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d107      	bne.n	8009dee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e005      	b.n	8009dfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009df2:	893b      	ldrh	r3, [r7, #8]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	00010002 	.word	0x00010002

08009e0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	817b      	strh	r3, [r7, #10]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	813b      	strh	r3, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f8c2 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6c:	d103      	bne.n	8009e76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e0aa      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e7a:	897b      	ldrh	r3, [r7, #10]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	6a3a      	ldr	r2, [r7, #32]
 8009e8e:	4952      	ldr	r1, [pc, #328]	; (8009fd8 <I2C_RequestMemoryRead+0x1cc>)
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f8fa 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e097      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	6a39      	ldr	r1, [r7, #32]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f964 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d107      	bne.n	8009ede <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e076      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d105      	bne.n	8009ef4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ee8:	893b      	ldrh	r3, [r7, #8]
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	611a      	str	r2, [r3, #16]
 8009ef2:	e021      	b.n	8009f38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ef4:	893b      	ldrh	r3, [r7, #8]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f04:	6a39      	ldr	r1, [r7, #32]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 f93e 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00d      	beq.n	8009f2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	d107      	bne.n	8009f2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e050      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f2e:	893b      	ldrh	r3, [r7, #8]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	6a39      	ldr	r1, [r7, #32]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 f923 	bl	800a188 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00d      	beq.n	8009f64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d107      	bne.n	8009f60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e035      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 f82b 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00d      	beq.n	8009fa8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9a:	d103      	bne.n	8009fa4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e013      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009fa8:	897b      	ldrh	r3, [r7, #10]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	4906      	ldr	r1, [pc, #24]	; (8009fd8 <I2C_RequestMemoryRead+0x1cc>)
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 f863 	bl	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	00010002 	.word	0x00010002

08009fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fec:	e025      	b.n	800a03a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d021      	beq.n	800a03a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff6:	f7fd f953 	bl	80072a0 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d302      	bcc.n	800a00c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d116      	bne.n	800a03a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	f043 0220 	orr.w	r2, r3, #32
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e023      	b.n	800a082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	0c1b      	lsrs	r3, r3, #16
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b01      	cmp	r3, #1
 800a042:	d10d      	bne.n	800a060 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	43da      	mvns	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4013      	ands	r3, r2
 800a050:	b29b      	uxth	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	bf0c      	ite	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	2300      	movne	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	e00c      	b.n	800a07a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	43da      	mvns	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4013      	ands	r3, r2
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bf0c      	ite	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	2300      	movne	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d0b6      	beq.n	8009fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a098:	e051      	b.n	800a13e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a8:	d123      	bne.n	800a0f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	f043 0204 	orr.w	r2, r3, #4
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e046      	b.n	800a180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f8:	d021      	beq.n	800a13e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fa:	f7fd f8d1 	bl	80072a0 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d302      	bcc.n	800a110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d116      	bne.n	800a13e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f043 0220 	orr.w	r2, r3, #32
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e020      	b.n	800a180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	0c1b      	lsrs	r3, r3, #16
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b01      	cmp	r3, #1
 800a146:	d10c      	bne.n	800a162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	43da      	mvns	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4013      	ands	r3, r2
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e00b      	b.n	800a17a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	43da      	mvns	r2, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4013      	ands	r3, r2
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	bf14      	ite	ne
 800a174:	2301      	movne	r3, #1
 800a176:	2300      	moveq	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d18d      	bne.n	800a09a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a194:	e02d      	b.n	800a1f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f8ce 	bl	800a338 <I2C_IsAcknowledgeFailed>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e02d      	b.n	800a202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d021      	beq.n	800a1f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ae:	f7fd f877 	bl	80072a0 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d302      	bcc.n	800a1c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d116      	bne.n	800a1f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e007      	b.n	800a202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fc:	2b80      	cmp	r3, #128	; 0x80
 800a1fe:	d1ca      	bne.n	800a196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a216:	e02d      	b.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f88d 	bl	800a338 <I2C_IsAcknowledgeFailed>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e02d      	b.n	800a284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22e:	d021      	beq.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a230:	f7fd f836 	bl	80072a0 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d302      	bcc.n	800a246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d116      	bne.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	f043 0220 	orr.w	r2, r3, #32
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e007      	b.n	800a284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	f003 0304 	and.w	r3, r3, #4
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d1ca      	bne.n	800a218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a298:	e042      	b.n	800a320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b10      	cmp	r3, #16
 800a2a6:	d119      	bne.n	800a2dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0210 	mvn.w	r2, #16
 800a2b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e029      	b.n	800a330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2dc:	f7fc ffe0 	bl	80072a0 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d302      	bcc.n	800a2f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d116      	bne.n	800a320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30c:	f043 0220 	orr.w	r2, r3, #32
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e007      	b.n	800a330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b40      	cmp	r3, #64	; 0x40
 800a32c:	d1b5      	bne.n	800a29a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a34a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a34e:	d11b      	bne.n	800a388 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a358:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2220      	movs	r2, #32
 800a364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	f043 0204 	orr.w	r2, r3, #4
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e25b      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d075      	beq.n	800a4a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a3b6:	4ba3      	ldr	r3, [pc, #652]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 030c 	and.w	r3, r3, #12
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d00c      	beq.n	800a3dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3c2:	4ba0      	ldr	r3, [pc, #640]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d112      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3ce:	4b9d      	ldr	r3, [pc, #628]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3da:	d10b      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3dc:	4b99      	ldr	r3, [pc, #612]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d05b      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x108>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d157      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e236      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fc:	d106      	bne.n	800a40c <HAL_RCC_OscConfig+0x74>
 800a3fe:	4b91      	ldr	r3, [pc, #580]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a90      	ldr	r2, [pc, #576]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	e01d      	b.n	800a448 <HAL_RCC_OscConfig+0xb0>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a414:	d10c      	bne.n	800a430 <HAL_RCC_OscConfig+0x98>
 800a416:	4b8b      	ldr	r3, [pc, #556]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a8a      	ldr	r2, [pc, #552]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a41c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	4b88      	ldr	r3, [pc, #544]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a87      	ldr	r2, [pc, #540]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e00b      	b.n	800a448 <HAL_RCC_OscConfig+0xb0>
 800a430:	4b84      	ldr	r3, [pc, #528]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a83      	ldr	r2, [pc, #524]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	4b81      	ldr	r3, [pc, #516]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a80      	ldr	r2, [pc, #512]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d013      	beq.n	800a478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a450:	f7fc ff26 	bl	80072a0 <HAL_GetTick>
 800a454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a458:	f7fc ff22 	bl	80072a0 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b64      	cmp	r3, #100	; 0x64
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e1fb      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a46a:	4b76      	ldr	r3, [pc, #472]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f0      	beq.n	800a458 <HAL_RCC_OscConfig+0xc0>
 800a476:	e014      	b.n	800a4a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a478:	f7fc ff12 	bl	80072a0 <HAL_GetTick>
 800a47c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a47e:	e008      	b.n	800a492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a480:	f7fc ff0e 	bl	80072a0 <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b64      	cmp	r3, #100	; 0x64
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e1e7      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a492:	4b6c      	ldr	r3, [pc, #432]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f0      	bne.n	800a480 <HAL_RCC_OscConfig+0xe8>
 800a49e:	e000      	b.n	800a4a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d063      	beq.n	800a576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a4ae:	4b65      	ldr	r3, [pc, #404]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f003 030c 	and.w	r3, r3, #12
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00b      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4ba:	4b62      	ldr	r3, [pc, #392]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d11c      	bne.n	800a500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4c6:	4b5f      	ldr	r3, [pc, #380]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d116      	bne.n	800a500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4d2:	4b5c      	ldr	r3, [pc, #368]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <HAL_RCC_OscConfig+0x152>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d001      	beq.n	800a4ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e1bb      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4ea:	4b56      	ldr	r3, [pc, #344]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4952      	ldr	r1, [pc, #328]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4fe:	e03a      	b.n	800a576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d020      	beq.n	800a54a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a508:	4b4f      	ldr	r3, [pc, #316]	; (800a648 <HAL_RCC_OscConfig+0x2b0>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50e:	f7fc fec7 	bl	80072a0 <HAL_GetTick>
 800a512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a516:	f7fc fec3 	bl	80072a0 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e19c      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a528:	4b46      	ldr	r3, [pc, #280]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0f0      	beq.n	800a516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a534:	4b43      	ldr	r3, [pc, #268]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4940      	ldr	r1, [pc, #256]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a544:	4313      	orrs	r3, r2
 800a546:	600b      	str	r3, [r1, #0]
 800a548:	e015      	b.n	800a576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a54a:	4b3f      	ldr	r3, [pc, #252]	; (800a648 <HAL_RCC_OscConfig+0x2b0>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a550:	f7fc fea6 	bl	80072a0 <HAL_GetTick>
 800a554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a556:	e008      	b.n	800a56a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a558:	f7fc fea2 	bl	80072a0 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d901      	bls.n	800a56a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e17b      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a56a:	4b36      	ldr	r3, [pc, #216]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1f0      	bne.n	800a558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d030      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d016      	beq.n	800a5b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a58a:	4b30      	ldr	r3, [pc, #192]	; (800a64c <HAL_RCC_OscConfig+0x2b4>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a590:	f7fc fe86 	bl	80072a0 <HAL_GetTick>
 800a594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a596:	e008      	b.n	800a5aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a598:	f7fc fe82 	bl	80072a0 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e15b      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5aa:	4b26      	ldr	r3, [pc, #152]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0f0      	beq.n	800a598 <HAL_RCC_OscConfig+0x200>
 800a5b6:	e015      	b.n	800a5e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5b8:	4b24      	ldr	r3, [pc, #144]	; (800a64c <HAL_RCC_OscConfig+0x2b4>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5be:	f7fc fe6f 	bl	80072a0 <HAL_GetTick>
 800a5c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5c4:	e008      	b.n	800a5d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5c6:	f7fc fe6b 	bl	80072a0 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d901      	bls.n	800a5d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e144      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1f0      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 80a0 	beq.w	800a732 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10f      	bne.n	800a622 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
 800a606:	4b0f      	ldr	r3, [pc, #60]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	4a0e      	ldr	r2, [pc, #56]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a60c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a610:	6413      	str	r3, [r2, #64]	; 0x40
 800a612:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <HAL_RCC_OscConfig+0x2ac>)
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a61a:	60bb      	str	r3, [r7, #8]
 800a61c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a61e:	2301      	movs	r3, #1
 800a620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a622:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <HAL_RCC_OscConfig+0x2b8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d121      	bne.n	800a672 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a62e:	4b08      	ldr	r3, [pc, #32]	; (800a650 <HAL_RCC_OscConfig+0x2b8>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a07      	ldr	r2, [pc, #28]	; (800a650 <HAL_RCC_OscConfig+0x2b8>)
 800a634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a63a:	f7fc fe31 	bl	80072a0 <HAL_GetTick>
 800a63e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a640:	e011      	b.n	800a666 <HAL_RCC_OscConfig+0x2ce>
 800a642:	bf00      	nop
 800a644:	40023800 	.word	0x40023800
 800a648:	42470000 	.word	0x42470000
 800a64c:	42470e80 	.word	0x42470e80
 800a650:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a654:	f7fc fe24 	bl	80072a0 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e0fd      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a666:	4b81      	ldr	r3, [pc, #516]	; (800a86c <HAL_RCC_OscConfig+0x4d4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0f0      	beq.n	800a654 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d106      	bne.n	800a688 <HAL_RCC_OscConfig+0x2f0>
 800a67a:	4b7d      	ldr	r3, [pc, #500]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67e:	4a7c      	ldr	r2, [pc, #496]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a680:	f043 0301 	orr.w	r3, r3, #1
 800a684:	6713      	str	r3, [r2, #112]	; 0x70
 800a686:	e01c      	b.n	800a6c2 <HAL_RCC_OscConfig+0x32a>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	2b05      	cmp	r3, #5
 800a68e:	d10c      	bne.n	800a6aa <HAL_RCC_OscConfig+0x312>
 800a690:	4b77      	ldr	r3, [pc, #476]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a694:	4a76      	ldr	r2, [pc, #472]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a696:	f043 0304 	orr.w	r3, r3, #4
 800a69a:	6713      	str	r3, [r2, #112]	; 0x70
 800a69c:	4b74      	ldr	r3, [pc, #464]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a0:	4a73      	ldr	r2, [pc, #460]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6a2:	f043 0301 	orr.w	r3, r3, #1
 800a6a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a6a8:	e00b      	b.n	800a6c2 <HAL_RCC_OscConfig+0x32a>
 800a6aa:	4b71      	ldr	r3, [pc, #452]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ae:	4a70      	ldr	r2, [pc, #448]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6b0:	f023 0301 	bic.w	r3, r3, #1
 800a6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a6b6:	4b6e      	ldr	r3, [pc, #440]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ba:	4a6d      	ldr	r2, [pc, #436]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6bc:	f023 0304 	bic.w	r3, r3, #4
 800a6c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d015      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ca:	f7fc fde9 	bl	80072a0 <HAL_GetTick>
 800a6ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6d0:	e00a      	b.n	800a6e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6d2:	f7fc fde5 	bl	80072a0 <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d901      	bls.n	800a6e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e0bc      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6e8:	4b61      	ldr	r3, [pc, #388]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0ee      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x33a>
 800a6f4:	e014      	b.n	800a720 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6f6:	f7fc fdd3 	bl	80072a0 <HAL_GetTick>
 800a6fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6fc:	e00a      	b.n	800a714 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6fe:	f7fc fdcf 	bl	80072a0 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e0a6      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a714:	4b56      	ldr	r3, [pc, #344]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ee      	bne.n	800a6fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d105      	bne.n	800a732 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a726:	4b52      	ldr	r3, [pc, #328]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	4a51      	ldr	r2, [pc, #324]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a72c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 8092 	beq.w	800a860 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a73c:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f003 030c 	and.w	r3, r3, #12
 800a744:	2b08      	cmp	r3, #8
 800a746:	d05c      	beq.n	800a802 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d141      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a750:	4b48      	ldr	r3, [pc, #288]	; (800a874 <HAL_RCC_OscConfig+0x4dc>)
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a756:	f7fc fda3 	bl	80072a0 <HAL_GetTick>
 800a75a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a75c:	e008      	b.n	800a770 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a75e:	f7fc fd9f 	bl	80072a0 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d901      	bls.n	800a770 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e078      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a770:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f0      	bne.n	800a75e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69da      	ldr	r2, [r3, #28]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	019b      	lsls	r3, r3, #6
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	3b01      	subs	r3, #1
 800a796:	041b      	lsls	r3, r3, #16
 800a798:	431a      	orrs	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	061b      	lsls	r3, r3, #24
 800a7a0:	4933      	ldr	r1, [pc, #204]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7a6:	4b33      	ldr	r3, [pc, #204]	; (800a874 <HAL_RCC_OscConfig+0x4dc>)
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ac:	f7fc fd78 	bl	80072a0 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7b4:	f7fc fd74 	bl	80072a0 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e04d      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7c6:	4b2a      	ldr	r3, [pc, #168]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x41c>
 800a7d2:	e045      	b.n	800a860 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d4:	4b27      	ldr	r3, [pc, #156]	; (800a874 <HAL_RCC_OscConfig+0x4dc>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7da:	f7fc fd61 	bl	80072a0 <HAL_GetTick>
 800a7de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7e0:	e008      	b.n	800a7f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7e2:	f7fc fd5d 	bl	80072a0 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e036      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7f4:	4b1e      	ldr	r3, [pc, #120]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1f0      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x44a>
 800a800:	e02e      	b.n	800a860 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d101      	bne.n	800a80e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e029      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a80e:	4b18      	ldr	r3, [pc, #96]	; (800a870 <HAL_RCC_OscConfig+0x4d8>)
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d11c      	bne.n	800a85c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d115      	bne.n	800a85c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a836:	4013      	ands	r3, r2
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d10d      	bne.n	800a85c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d106      	bne.n	800a85c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	40007000 	.word	0x40007000
 800a870:	40023800 	.word	0x40023800
 800a874:	42470060 	.word	0x42470060

0800a878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e0cc      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a88c:	4b68      	ldr	r3, [pc, #416]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d90c      	bls.n	800a8b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a89a:	4b65      	ldr	r3, [pc, #404]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	b2d2      	uxtb	r2, r2
 800a8a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8a2:	4b63      	ldr	r3, [pc, #396]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d001      	beq.n	800a8b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e0b8      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d020      	beq.n	800a902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8cc:	4b59      	ldr	r3, [pc, #356]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	4a58      	ldr	r2, [pc, #352]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a8d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0308 	and.w	r3, r3, #8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8e4:	4b53      	ldr	r3, [pc, #332]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	4a52      	ldr	r2, [pc, #328]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a8ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8f0:	4b50      	ldr	r3, [pc, #320]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	494d      	ldr	r1, [pc, #308]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d044      	beq.n	800a998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d107      	bne.n	800a926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a916:	4b47      	ldr	r3, [pc, #284]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d119      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e07f      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d003      	beq.n	800a936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a932:	2b03      	cmp	r3, #3
 800a934:	d107      	bne.n	800a946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a936:	4b3f      	ldr	r3, [pc, #252]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e06f      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a946:	4b3b      	ldr	r3, [pc, #236]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e067      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a956:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f023 0203 	bic.w	r2, r3, #3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4934      	ldr	r1, [pc, #208]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a964:	4313      	orrs	r3, r2
 800a966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a968:	f7fc fc9a 	bl	80072a0 <HAL_GetTick>
 800a96c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a96e:	e00a      	b.n	800a986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a970:	f7fc fc96 	bl	80072a0 <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97e:	4293      	cmp	r3, r2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e04f      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a986:	4b2b      	ldr	r3, [pc, #172]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f003 020c 	and.w	r2, r3, #12
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	429a      	cmp	r2, r3
 800a996:	d1eb      	bne.n	800a970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a998:	4b25      	ldr	r3, [pc, #148]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d20c      	bcs.n	800a9c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a6:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	b2d2      	uxtb	r2, r2
 800a9ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ae:	4b20      	ldr	r3, [pc, #128]	; (800aa30 <HAL_RCC_ClockConfig+0x1b8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 030f 	and.w	r3, r3, #15
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d001      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e032      	b.n	800aa26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9cc:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	4916      	ldr	r1, [pc, #88]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0308 	and.w	r3, r3, #8
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9ea:	4b12      	ldr	r3, [pc, #72]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	490e      	ldr	r1, [pc, #56]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9fe:	f000 f821 	bl	800aa44 <HAL_RCC_GetSysClockFreq>
 800aa02:	4602      	mov	r2, r0
 800aa04:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <HAL_RCC_ClockConfig+0x1bc>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	091b      	lsrs	r3, r3, #4
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	490a      	ldr	r1, [pc, #40]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800aa10:	5ccb      	ldrb	r3, [r1, r3]
 800aa12:	fa22 f303 	lsr.w	r3, r2, r3
 800aa16:	4a09      	ldr	r2, [pc, #36]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800aa18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa1a:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <HAL_RCC_ClockConfig+0x1c8>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fc fbfa 	bl	8007218 <HAL_InitTick>

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	40023c00 	.word	0x40023c00
 800aa34:	40023800 	.word	0x40023800
 800aa38:	08016e84 	.word	0x08016e84
 800aa3c:	20000030 	.word	0x20000030
 800aa40:	20000034 	.word	0x20000034

0800aa44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa44:	b5b0      	push	{r4, r5, r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6079      	str	r1, [r7, #4]
 800aa4e:	2100      	movs	r1, #0
 800aa50:	60f9      	str	r1, [r7, #12]
 800aa52:	2100      	movs	r1, #0
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aa56:	2100      	movs	r1, #0
 800aa58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa5a:	4952      	ldr	r1, [pc, #328]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800aa5c:	6889      	ldr	r1, [r1, #8]
 800aa5e:	f001 010c 	and.w	r1, r1, #12
 800aa62:	2908      	cmp	r1, #8
 800aa64:	d00d      	beq.n	800aa82 <HAL_RCC_GetSysClockFreq+0x3e>
 800aa66:	2908      	cmp	r1, #8
 800aa68:	f200 8094 	bhi.w	800ab94 <HAL_RCC_GetSysClockFreq+0x150>
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	d002      	beq.n	800aa76 <HAL_RCC_GetSysClockFreq+0x32>
 800aa70:	2904      	cmp	r1, #4
 800aa72:	d003      	beq.n	800aa7c <HAL_RCC_GetSysClockFreq+0x38>
 800aa74:	e08e      	b.n	800ab94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa76:	4b4c      	ldr	r3, [pc, #304]	; (800aba8 <HAL_RCC_GetSysClockFreq+0x164>)
 800aa78:	60bb      	str	r3, [r7, #8]
       break;
 800aa7a:	e08e      	b.n	800ab9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa7c:	4b4b      	ldr	r3, [pc, #300]	; (800abac <HAL_RCC_GetSysClockFreq+0x168>)
 800aa7e:	60bb      	str	r3, [r7, #8]
      break;
 800aa80:	e08b      	b.n	800ab9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa82:	4948      	ldr	r1, [pc, #288]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800aa84:	6849      	ldr	r1, [r1, #4]
 800aa86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800aa8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa8c:	4945      	ldr	r1, [pc, #276]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800aa8e:	6849      	ldr	r1, [r1, #4]
 800aa90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800aa94:	2900      	cmp	r1, #0
 800aa96:	d024      	beq.n	800aae2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa98:	4942      	ldr	r1, [pc, #264]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800aa9a:	6849      	ldr	r1, [r1, #4]
 800aa9c:	0989      	lsrs	r1, r1, #6
 800aa9e:	4608      	mov	r0, r1
 800aaa0:	f04f 0100 	mov.w	r1, #0
 800aaa4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800aaa8:	f04f 0500 	mov.w	r5, #0
 800aaac:	ea00 0204 	and.w	r2, r0, r4
 800aab0:	ea01 0305 	and.w	r3, r1, r5
 800aab4:	493d      	ldr	r1, [pc, #244]	; (800abac <HAL_RCC_GetSysClockFreq+0x168>)
 800aab6:	fb01 f003 	mul.w	r0, r1, r3
 800aaba:	2100      	movs	r1, #0
 800aabc:	fb01 f102 	mul.w	r1, r1, r2
 800aac0:	1844      	adds	r4, r0, r1
 800aac2:	493a      	ldr	r1, [pc, #232]	; (800abac <HAL_RCC_GetSysClockFreq+0x168>)
 800aac4:	fba2 0101 	umull	r0, r1, r2, r1
 800aac8:	1863      	adds	r3, r4, r1
 800aaca:	4619      	mov	r1, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	461a      	mov	r2, r3
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	f7f6 f8e0 	bl	8000c98 <__aeabi_uldivmod>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4613      	mov	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e04a      	b.n	800ab78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aae2:	4b30      	ldr	r3, [pc, #192]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	099b      	lsrs	r3, r3, #6
 800aae8:	461a      	mov	r2, r3
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aaf2:	f04f 0100 	mov.w	r1, #0
 800aaf6:	ea02 0400 	and.w	r4, r2, r0
 800aafa:	ea03 0501 	and.w	r5, r3, r1
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	f04f 0300 	mov.w	r3, #0
 800ab0a:	014b      	lsls	r3, r1, #5
 800ab0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab10:	0142      	lsls	r2, r0, #5
 800ab12:	4610      	mov	r0, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	1b00      	subs	r0, r0, r4
 800ab18:	eb61 0105 	sbc.w	r1, r1, r5
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	018b      	lsls	r3, r1, #6
 800ab26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab2a:	0182      	lsls	r2, r0, #6
 800ab2c:	1a12      	subs	r2, r2, r0
 800ab2e:	eb63 0301 	sbc.w	r3, r3, r1
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f04f 0100 	mov.w	r1, #0
 800ab3a:	00d9      	lsls	r1, r3, #3
 800ab3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab40:	00d0      	lsls	r0, r2, #3
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	1912      	adds	r2, r2, r4
 800ab48:	eb45 0303 	adc.w	r3, r5, r3
 800ab4c:	f04f 0000 	mov.w	r0, #0
 800ab50:	f04f 0100 	mov.w	r1, #0
 800ab54:	0299      	lsls	r1, r3, #10
 800ab56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ab5a:	0290      	lsls	r0, r2, #10
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4610      	mov	r0, r2
 800ab62:	4619      	mov	r1, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f04f 0300 	mov.w	r3, #0
 800ab6c:	f7f6 f894 	bl	8000c98 <__aeabi_uldivmod>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4613      	mov	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x160>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	3301      	adds	r3, #1
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab90:	60bb      	str	r3, [r7, #8]
      break;
 800ab92:	e002      	b.n	800ab9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <HAL_RCC_GetSysClockFreq+0x164>)
 800ab96:	60bb      	str	r3, [r7, #8]
      break;
 800ab98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bdb0      	pop	{r4, r5, r7, pc}
 800aba4:	40023800 	.word	0x40023800
 800aba8:	00f42400 	.word	0x00f42400
 800abac:	017d7840 	.word	0x017d7840

0800abb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abb4:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800abb6:	681b      	ldr	r3, [r3, #0]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000030 	.word	0x20000030

0800abc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800abcc:	f7ff fff0 	bl	800abb0 <HAL_RCC_GetHCLKFreq>
 800abd0:	4602      	mov	r2, r0
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	0a9b      	lsrs	r3, r3, #10
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	4903      	ldr	r1, [pc, #12]	; (800abec <HAL_RCC_GetPCLK1Freq+0x24>)
 800abde:	5ccb      	ldrb	r3, [r1, r3]
 800abe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40023800 	.word	0x40023800
 800abec:	08016e94 	.word	0x08016e94

0800abf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800abf4:	f7ff ffdc 	bl	800abb0 <HAL_RCC_GetHCLKFreq>
 800abf8:	4602      	mov	r2, r0
 800abfa:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	0b5b      	lsrs	r3, r3, #13
 800ac00:	f003 0307 	and.w	r3, r3, #7
 800ac04:	4903      	ldr	r1, [pc, #12]	; (800ac14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac06:	5ccb      	ldrb	r3, [r1, r3]
 800ac08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	40023800 	.word	0x40023800
 800ac14:	08016e94 	.word	0x08016e94

0800ac18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e056      	b.n	800acd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7fb fdad 	bl	80067a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	431a      	orrs	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	431a      	orrs	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac86:	431a      	orrs	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	ea42 0103 	orr.w	r1, r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	0c1b      	lsrs	r3, r3, #16
 800aca8:	f003 0104 	and.w	r1, r3, #4
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	69da      	ldr	r2, [r3, #28]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	4613      	mov	r3, r2
 800acee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <HAL_SPI_Transmit+0x22>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e11e      	b.n	800af40 <HAL_SPI_Transmit+0x260>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad0a:	f7fc fac9 	bl	80072a0 <HAL_GetTick>
 800ad0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d002      	beq.n	800ad26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad20:	2302      	movs	r3, #2
 800ad22:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad24:	e103      	b.n	800af2e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <HAL_SPI_Transmit+0x52>
 800ad2c:	88fb      	ldrh	r3, [r7, #6]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad36:	e0fa      	b.n	800af2e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	88fa      	ldrh	r2, [r7, #6]
 800ad50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	88fa      	ldrh	r2, [r7, #6]
 800ad56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad7e:	d107      	bne.n	800ad90 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d007      	beq.n	800adae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adb6:	d14b      	bne.n	800ae50 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <HAL_SPI_Transmit+0xe6>
 800adc0:	8afb      	ldrh	r3, [r7, #22]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d13e      	bne.n	800ae44 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	881a      	ldrh	r2, [r3, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	1c9a      	adds	r2, r3, #2
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adea:	e02b      	b.n	800ae44 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d112      	bne.n	800ae20 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfe:	881a      	ldrh	r2, [r3, #0]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0a:	1c9a      	adds	r2, r3, #2
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	3b01      	subs	r3, #1
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae1e:	e011      	b.n	800ae44 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae20:	f7fc fa3e 	bl	80072a0 <HAL_GetTick>
 800ae24:	4602      	mov	r2, r0
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d803      	bhi.n	800ae38 <HAL_SPI_Transmit+0x158>
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d102      	bne.n	800ae3e <HAL_SPI_Transmit+0x15e>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d102      	bne.n	800ae44 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae42:	e074      	b.n	800af2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1ce      	bne.n	800adec <HAL_SPI_Transmit+0x10c>
 800ae4e:	e04c      	b.n	800aeea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <HAL_SPI_Transmit+0x17e>
 800ae58:	8afb      	ldrh	r3, [r7, #22]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d140      	bne.n	800aee0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	330c      	adds	r3, #12
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ae84:	e02c      	b.n	800aee0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d113      	bne.n	800aebc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	7812      	ldrb	r2, [r2, #0]
 800aea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	86da      	strh	r2, [r3, #54]	; 0x36
 800aeba:	e011      	b.n	800aee0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aebc:	f7fc f9f0 	bl	80072a0 <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d803      	bhi.n	800aed4 <HAL_SPI_Transmit+0x1f4>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed2:	d102      	bne.n	800aeda <HAL_SPI_Transmit+0x1fa>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aede:	e026      	b.n	800af2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1cd      	bne.n	800ae86 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 fa44 	bl	800b37c <SPI_EndRxTxTransaction>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2220      	movs	r2, #32
 800aefe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	77fb      	strb	r3, [r7, #31]
 800af2a:	e000      	b.n	800af2e <HAL_SPI_Transmit+0x24e>
  }

error:
 800af2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3720      	adds	r7, #32
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08c      	sub	sp, #48	; 0x30
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800af56:	2301      	movs	r3, #1
 800af58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af66:	2b01      	cmp	r3, #1
 800af68:	d101      	bne.n	800af6e <HAL_SPI_TransmitReceive+0x26>
 800af6a:	2302      	movs	r3, #2
 800af6c:	e18a      	b.n	800b284 <HAL_SPI_TransmitReceive+0x33c>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af76:	f7fc f993 	bl	80072a0 <HAL_GetTick>
 800af7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800af8c:	887b      	ldrh	r3, [r7, #2]
 800af8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800af90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af94:	2b01      	cmp	r3, #1
 800af96:	d00f      	beq.n	800afb8 <HAL_SPI_TransmitReceive+0x70>
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af9e:	d107      	bne.n	800afb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d103      	bne.n	800afb0 <HAL_SPI_TransmitReceive+0x68>
 800afa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afac:	2b04      	cmp	r3, #4
 800afae:	d003      	beq.n	800afb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800afb0:	2302      	movs	r3, #2
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800afb6:	e15b      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <HAL_SPI_TransmitReceive+0x82>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <HAL_SPI_TransmitReceive+0x82>
 800afc4:	887b      	ldrh	r3, [r7, #2]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d103      	bne.n	800afd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800afd0:	e14e      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d003      	beq.n	800afe6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2205      	movs	r2, #5
 800afe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	887a      	ldrh	r2, [r7, #2]
 800aff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	887a      	ldrh	r2, [r7, #2]
 800affc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	887a      	ldrh	r2, [r7, #2]
 800b008:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	887a      	ldrh	r2, [r7, #2]
 800b00e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d007      	beq.n	800b03a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b042:	d178      	bne.n	800b136 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <HAL_SPI_TransmitReceive+0x10a>
 800b04c:	8b7b      	ldrh	r3, [r7, #26]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d166      	bne.n	800b120 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	881a      	ldrh	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	1c9a      	adds	r2, r3, #2
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b076:	e053      	b.n	800b120 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b02      	cmp	r3, #2
 800b084:	d11b      	bne.n	800b0be <HAL_SPI_TransmitReceive+0x176>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d016      	beq.n	800b0be <HAL_SPI_TransmitReceive+0x176>
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	2b01      	cmp	r3, #1
 800b094:	d113      	bne.n	800b0be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	1c9a      	adds	r2, r3, #2
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d119      	bne.n	800b100 <HAL_SPI_TransmitReceive+0x1b8>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d014      	beq.n	800b100 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	b292      	uxth	r2, r2
 800b0e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	1c9a      	adds	r2, r3, #2
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b100:	f7fc f8ce 	bl	80072a0 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d807      	bhi.n	800b120 <HAL_SPI_TransmitReceive+0x1d8>
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d003      	beq.n	800b120 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b11e:	e0a7      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1a6      	bne.n	800b078 <HAL_SPI_TransmitReceive+0x130>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1a1      	bne.n	800b078 <HAL_SPI_TransmitReceive+0x130>
 800b134:	e07c      	b.n	800b230 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <HAL_SPI_TransmitReceive+0x1fc>
 800b13e:	8b7b      	ldrh	r3, [r7, #26]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d16b      	bne.n	800b21c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	330c      	adds	r3, #12
 800b14e:	7812      	ldrb	r2, [r2, #0]
 800b150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b160:	b29b      	uxth	r3, r3
 800b162:	3b01      	subs	r3, #1
 800b164:	b29a      	uxth	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b16a:	e057      	b.n	800b21c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b02      	cmp	r3, #2
 800b178:	d11c      	bne.n	800b1b4 <HAL_SPI_TransmitReceive+0x26c>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b17e:	b29b      	uxth	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d017      	beq.n	800b1b4 <HAL_SPI_TransmitReceive+0x26c>
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d114      	bne.n	800b1b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	330c      	adds	r3, #12
 800b194:	7812      	ldrb	r2, [r2, #0]
 800b196:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d119      	bne.n	800b1f6 <HAL_SPI_TransmitReceive+0x2ae>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d014      	beq.n	800b1f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b1f6:	f7fc f853 	bl	80072a0 <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b202:	429a      	cmp	r2, r3
 800b204:	d803      	bhi.n	800b20e <HAL_SPI_TransmitReceive+0x2c6>
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20c:	d102      	bne.n	800b214 <HAL_SPI_TransmitReceive+0x2cc>
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	2b00      	cmp	r3, #0
 800b212:	d103      	bne.n	800b21c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b21a:	e029      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1a2      	bne.n	800b16c <HAL_SPI_TransmitReceive+0x224>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d19d      	bne.n	800b16c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f8a1 	bl	800b37c <SPI_EndRxTxTransaction>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d006      	beq.n	800b24e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b24c:	e010      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10b      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	617b      	str	r3, [r7, #20]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	e000      	b.n	800b270 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b26e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b284:	4618      	mov	r0, r3
 800b286:	3730      	adds	r7, #48	; 0x30
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b29a:	b2db      	uxtb	r3, r3
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	603b      	str	r3, [r7, #0]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2b8:	e04c      	b.n	800b354 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c0:	d048      	beq.n	800b354 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b2c2:	f7fb ffed 	bl	80072a0 <HAL_GetTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d902      	bls.n	800b2d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d13d      	bne.n	800b354 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b2e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2f0:	d111      	bne.n	800b316 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2fa:	d004      	beq.n	800b306 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b304:	d107      	bne.n	800b316 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b31e:	d10f      	bne.n	800b340 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b33e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e00f      	b.n	800b374 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	4013      	ands	r3, r2
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	429a      	cmp	r2, r3
 800b362:	bf0c      	ite	eq
 800b364:	2301      	moveq	r3, #1
 800b366:	2300      	movne	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d1a3      	bne.n	800b2ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af02      	add	r7, sp, #8
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b388:	4b1b      	ldr	r3, [pc, #108]	; (800b3f8 <SPI_EndRxTxTransaction+0x7c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a1b      	ldr	r2, [pc, #108]	; (800b3fc <SPI_EndRxTxTransaction+0x80>)
 800b38e:	fba2 2303 	umull	r2, r3, r2, r3
 800b392:	0d5b      	lsrs	r3, r3, #21
 800b394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b398:	fb02 f303 	mul.w	r3, r2, r3
 800b39c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a6:	d112      	bne.n	800b3ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2180      	movs	r1, #128	; 0x80
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff ff78 	bl	800b2a8 <SPI_WaitFlagStateUntilTimeout>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d016      	beq.n	800b3ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	f043 0220 	orr.w	r2, r3, #32
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e00f      	b.n	800b3ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e4:	2b80      	cmp	r3, #128	; 0x80
 800b3e6:	d0f2      	beq.n	800b3ce <SPI_EndRxTxTransaction+0x52>
 800b3e8:	e000      	b.n	800b3ec <SPI_EndRxTxTransaction+0x70>
        break;
 800b3ea:	bf00      	nop
  }

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000030 	.word	0x20000030
 800b3fc:	165e9f81 	.word	0x165e9f81

0800b400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e01d      	b.n	800b44e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7fb fcf8 	bl	8006e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f000 f9f0 	bl	800b824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b082      	sub	sp, #8
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e01d      	b.n	800b4a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7fb fcef 	bl	8006e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3304      	adds	r3, #4
 800b492:	4619      	mov	r1, r3
 800b494:	4610      	mov	r0, r2
 800b496:	f000 f9c5 	bl	800b824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fc56 	bl	800bd70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a10      	ldr	r2, [pc, #64]	; (800b50c <HAL_TIM_PWM_Start+0x60>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d107      	bne.n	800b4de <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f003 0307 	and.w	r3, r3, #7
 800b4e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b06      	cmp	r3, #6
 800b4ee:	d007      	beq.n	800b500 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0201 	orr.w	r2, r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40010000 	.word	0x40010000

0800b510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b522:	2b01      	cmp	r3, #1
 800b524:	d101      	bne.n	800b52a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b526:	2302      	movs	r3, #2
 800b528:	e0b4      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2202      	movs	r2, #2
 800b536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b0c      	cmp	r3, #12
 800b53e:	f200 809f 	bhi.w	800b680 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b542:	a201      	add	r2, pc, #4	; (adr r2, 800b548 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b548:	0800b57d 	.word	0x0800b57d
 800b54c:	0800b681 	.word	0x0800b681
 800b550:	0800b681 	.word	0x0800b681
 800b554:	0800b681 	.word	0x0800b681
 800b558:	0800b5bd 	.word	0x0800b5bd
 800b55c:	0800b681 	.word	0x0800b681
 800b560:	0800b681 	.word	0x0800b681
 800b564:	0800b681 	.word	0x0800b681
 800b568:	0800b5ff 	.word	0x0800b5ff
 800b56c:	0800b681 	.word	0x0800b681
 800b570:	0800b681 	.word	0x0800b681
 800b574:	0800b681 	.word	0x0800b681
 800b578:	0800b63f 	.word	0x0800b63f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f9ce 	bl	800b924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	699a      	ldr	r2, [r3, #24]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0208 	orr.w	r2, r2, #8
 800b596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	699a      	ldr	r2, [r3, #24]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f022 0204 	bic.w	r2, r2, #4
 800b5a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6999      	ldr	r1, [r3, #24]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	691a      	ldr	r2, [r3, #16]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	619a      	str	r2, [r3, #24]
      break;
 800b5ba:	e062      	b.n	800b682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fa14 	bl	800b9f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699a      	ldr	r2, [r3, #24]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	699a      	ldr	r2, [r3, #24]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6999      	ldr	r1, [r3, #24]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	021a      	lsls	r2, r3, #8
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	619a      	str	r2, [r3, #24]
      break;
 800b5fc:	e041      	b.n	800b682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68b9      	ldr	r1, [r7, #8]
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fa5f 	bl	800bac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69da      	ldr	r2, [r3, #28]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f042 0208 	orr.w	r2, r2, #8
 800b618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	69da      	ldr	r2, [r3, #28]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0204 	bic.w	r2, r2, #4
 800b628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69d9      	ldr	r1, [r3, #28]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	61da      	str	r2, [r3, #28]
      break;
 800b63c:	e021      	b.n	800b682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68b9      	ldr	r1, [r7, #8]
 800b644:	4618      	mov	r0, r3
 800b646:	f000 faa9 	bl	800bb9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69da      	ldr	r2, [r3, #28]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69da      	ldr	r2, [r3, #28]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	69d9      	ldr	r1, [r3, #28]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	021a      	lsls	r2, r3, #8
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	61da      	str	r2, [r3, #28]
      break;
 800b67e:	e000      	b.n	800b682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b680:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d101      	bne.n	800b6b4 <HAL_TIM_ConfigClockSource+0x18>
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	e0b3      	b.n	800b81c <HAL_TIM_ConfigClockSource+0x180>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ec:	d03e      	beq.n	800b76c <HAL_TIM_ConfigClockSource+0xd0>
 800b6ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f2:	f200 8087 	bhi.w	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b6f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fa:	f000 8085 	beq.w	800b808 <HAL_TIM_ConfigClockSource+0x16c>
 800b6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b702:	d87f      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b704:	2b70      	cmp	r3, #112	; 0x70
 800b706:	d01a      	beq.n	800b73e <HAL_TIM_ConfigClockSource+0xa2>
 800b708:	2b70      	cmp	r3, #112	; 0x70
 800b70a:	d87b      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b70c:	2b60      	cmp	r3, #96	; 0x60
 800b70e:	d050      	beq.n	800b7b2 <HAL_TIM_ConfigClockSource+0x116>
 800b710:	2b60      	cmp	r3, #96	; 0x60
 800b712:	d877      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b714:	2b50      	cmp	r3, #80	; 0x50
 800b716:	d03c      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0xf6>
 800b718:	2b50      	cmp	r3, #80	; 0x50
 800b71a:	d873      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b71c:	2b40      	cmp	r3, #64	; 0x40
 800b71e:	d058      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x136>
 800b720:	2b40      	cmp	r3, #64	; 0x40
 800b722:	d86f      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b724:	2b30      	cmp	r3, #48	; 0x30
 800b726:	d064      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x156>
 800b728:	2b30      	cmp	r3, #48	; 0x30
 800b72a:	d86b      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d060      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x156>
 800b730:	2b20      	cmp	r3, #32
 800b732:	d867      	bhi.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
 800b734:	2b00      	cmp	r3, #0
 800b736:	d05c      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x156>
 800b738:	2b10      	cmp	r3, #16
 800b73a:	d05a      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b73c:	e062      	b.n	800b804 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	6899      	ldr	r1, [r3, #8]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	f000 faef 	bl	800bd30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b760:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	609a      	str	r2, [r3, #8]
      break;
 800b76a:	e04e      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	6899      	ldr	r1, [r3, #8]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f000 fad8 	bl	800bd30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689a      	ldr	r2, [r3, #8]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b78e:	609a      	str	r2, [r3, #8]
      break;
 800b790:	e03b      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	6859      	ldr	r1, [r3, #4]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f000 fa4c 	bl	800bc3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2150      	movs	r1, #80	; 0x50
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 faa5 	bl	800bcfa <TIM_ITRx_SetConfig>
      break;
 800b7b0:	e02b      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6859      	ldr	r1, [r3, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f000 fa6b 	bl	800bc9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2160      	movs	r1, #96	; 0x60
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fa95 	bl	800bcfa <TIM_ITRx_SetConfig>
      break;
 800b7d0:	e01b      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6859      	ldr	r1, [r3, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f000 fa2c 	bl	800bc3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2140      	movs	r1, #64	; 0x40
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa85 	bl	800bcfa <TIM_ITRx_SetConfig>
      break;
 800b7f0:	e00b      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f000 fa7c 	bl	800bcfa <TIM_ITRx_SetConfig>
      break;
 800b802:	e002      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b804:	bf00      	nop
 800b806:	e000      	b.n	800b80a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a34      	ldr	r2, [pc, #208]	; (800b908 <TIM_Base_SetConfig+0xe4>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00f      	beq.n	800b85c <TIM_Base_SetConfig+0x38>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b842:	d00b      	beq.n	800b85c <TIM_Base_SetConfig+0x38>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a31      	ldr	r2, [pc, #196]	; (800b90c <TIM_Base_SetConfig+0xe8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d007      	beq.n	800b85c <TIM_Base_SetConfig+0x38>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a30      	ldr	r2, [pc, #192]	; (800b910 <TIM_Base_SetConfig+0xec>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d003      	beq.n	800b85c <TIM_Base_SetConfig+0x38>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a2f      	ldr	r2, [pc, #188]	; (800b914 <TIM_Base_SetConfig+0xf0>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d108      	bne.n	800b86e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a25      	ldr	r2, [pc, #148]	; (800b908 <TIM_Base_SetConfig+0xe4>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01b      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b87c:	d017      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a22      	ldr	r2, [pc, #136]	; (800b90c <TIM_Base_SetConfig+0xe8>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d013      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a21      	ldr	r2, [pc, #132]	; (800b910 <TIM_Base_SetConfig+0xec>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00f      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a20      	ldr	r2, [pc, #128]	; (800b914 <TIM_Base_SetConfig+0xf0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00b      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a1f      	ldr	r2, [pc, #124]	; (800b918 <TIM_Base_SetConfig+0xf4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d007      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a1e      	ldr	r2, [pc, #120]	; (800b91c <TIM_Base_SetConfig+0xf8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d003      	beq.n	800b8ae <TIM_Base_SetConfig+0x8a>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a1d      	ldr	r2, [pc, #116]	; (800b920 <TIM_Base_SetConfig+0xfc>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d108      	bne.n	800b8c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a08      	ldr	r2, [pc, #32]	; (800b908 <TIM_Base_SetConfig+0xe4>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d103      	bne.n	800b8f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	615a      	str	r2, [r3, #20]
}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	40010000 	.word	0x40010000
 800b90c:	40000400 	.word	0x40000400
 800b910:	40000800 	.word	0x40000800
 800b914:	40000c00 	.word	0x40000c00
 800b918:	40014000 	.word	0x40014000
 800b91c:	40014400 	.word	0x40014400
 800b920:	40014800 	.word	0x40014800

0800b924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	f023 0201 	bic.w	r2, r3, #1
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f023 0302 	bic.w	r3, r3, #2
 800b96c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4313      	orrs	r3, r2
 800b976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a1c      	ldr	r2, [pc, #112]	; (800b9ec <TIM_OC1_SetConfig+0xc8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d10c      	bne.n	800b99a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f023 0308 	bic.w	r3, r3, #8
 800b986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f023 0304 	bic.w	r3, r3, #4
 800b998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a13      	ldr	r2, [pc, #76]	; (800b9ec <TIM_OC1_SetConfig+0xc8>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d111      	bne.n	800b9c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	621a      	str	r2, [r3, #32]
}
 800b9e0:	bf00      	nop
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	40010000 	.word	0x40010000

0800b9f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	f023 0210 	bic.w	r2, r3, #16
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	021b      	lsls	r3, r3, #8
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f023 0320 	bic.w	r3, r3, #32
 800ba3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a1e      	ldr	r2, [pc, #120]	; (800bac4 <TIM_OC2_SetConfig+0xd4>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10d      	bne.n	800ba6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a15      	ldr	r2, [pc, #84]	; (800bac4 <TIM_OC2_SetConfig+0xd4>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d113      	bne.n	800ba9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	40010000 	.word	0x40010000

0800bac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 0303 	bic.w	r3, r3, #3
 800bafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a1d      	ldr	r2, [pc, #116]	; (800bb98 <TIM_OC3_SetConfig+0xd0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d10d      	bne.n	800bb42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a14      	ldr	r2, [pc, #80]	; (800bb98 <TIM_OC3_SetConfig+0xd0>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d113      	bne.n	800bb72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	011b      	lsls	r3, r3, #4
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	621a      	str	r2, [r3, #32]
}
 800bb8c:	bf00      	nop
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	40010000 	.word	0x40010000

0800bb9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	031b      	lsls	r3, r3, #12
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a10      	ldr	r2, [pc, #64]	; (800bc38 <TIM_OC4_SetConfig+0x9c>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d109      	bne.n	800bc10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	019b      	lsls	r3, r3, #6
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	621a      	str	r2, [r3, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	40010000 	.word	0x40010000

0800bc3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
 800bc4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	f023 0201 	bic.w	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	011b      	lsls	r3, r3, #4
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f023 030a 	bic.w	r3, r3, #10
 800bc78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	621a      	str	r2, [r3, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b087      	sub	sp, #28
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f023 0210 	bic.w	r2, r3, #16
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	031b      	lsls	r3, r3, #12
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	011b      	lsls	r3, r3, #4
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	621a      	str	r2, [r3, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f043 0307 	orr.w	r3, r3, #7
 800bd1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	609a      	str	r2, [r3, #8]
}
 800bd24:	bf00      	nop
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	021a      	lsls	r2, r3, #8
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	431a      	orrs	r2, r3
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	609a      	str	r2, [r3, #8]
}
 800bd64:	bf00      	nop
 800bd66:	371c      	adds	r7, #28
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f003 031f 	and.w	r3, r3, #31
 800bd82:	2201      	movs	r2, #1
 800bd84:	fa02 f303 	lsl.w	r3, r2, r3
 800bd88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a1a      	ldr	r2, [r3, #32]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	43db      	mvns	r3, r3
 800bd92:	401a      	ands	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a1a      	ldr	r2, [r3, #32]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f003 031f 	and.w	r3, r3, #31
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	fa01 f303 	lsl.w	r3, r1, r3
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	621a      	str	r2, [r3, #32]
}
 800bdae:	bf00      	nop
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e050      	b.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a1c      	ldr	r2, [pc, #112]	; (800be84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d018      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be20:	d013      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a18      	ldr	r2, [pc, #96]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00e      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a16      	ldr	r2, [pc, #88]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d009      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a15      	ldr	r2, [pc, #84]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d004      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d10c      	bne.n	800be64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	40010000 	.word	0x40010000
 800be88:	40000400 	.word	0x40000400
 800be8c:	40000800 	.word	0x40000800
 800be90:	40000c00 	.word	0x40000c00
 800be94:	40014000 	.word	0x40014000

0800be98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800beb0:	2302      	movs	r3, #2
 800beb2:	e03d      	b.n	800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e03f      	b.n	800bfce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7fb f854 	bl	8007010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2224      	movs	r2, #36	; 0x24
 800bf6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc25 	bl	800c7d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	695a      	ldr	r2, [r3, #20]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d130      	bne.n	800c052 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_UART_Transmit_IT+0x26>
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e029      	b.n	800c054 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c006:	2b01      	cmp	r3, #1
 800c008:	d101      	bne.n	800c00e <HAL_UART_Transmit_IT+0x38>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e022      	b.n	800c054 <HAL_UART_Transmit_IT+0x7e>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	88fa      	ldrh	r2, [r7, #6]
 800c020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	88fa      	ldrh	r2, [r7, #6]
 800c026:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2221      	movs	r2, #33	; 0x21
 800c032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c04c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	e000      	b.n	800c054 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c052:	2302      	movs	r3, #2
  }
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b20      	cmp	r3, #32
 800c078:	d140      	bne.n	800c0fc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <HAL_UART_Receive_IT+0x26>
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e039      	b.n	800c0fe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c090:	2b01      	cmp	r3, #1
 800c092:	d101      	bne.n	800c098 <HAL_UART_Receive_IT+0x38>
 800c094:	2302      	movs	r3, #2
 800c096:	e032      	b.n	800c0fe <HAL_UART_Receive_IT+0x9e>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	88fa      	ldrh	r2, [r7, #6]
 800c0aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	88fa      	ldrh	r2, [r7, #6]
 800c0b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2222      	movs	r2, #34	; 0x22
 800c0bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0201 	orr.w	r2, r2, #1
 800c0e6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 0220 	orr.w	r2, r2, #32
 800c0f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e000      	b.n	800c0fe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c0fc:	2302      	movs	r3, #2
  }
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
	...

0800c10c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b20      	cmp	r3, #32
 800c124:	d166      	bne.n	800c1f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <HAL_UART_Receive_DMA+0x26>
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e05f      	b.n	800c1f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d101      	bne.n	800c144 <HAL_UART_Receive_DMA+0x38>
 800c140:	2302      	movs	r3, #2
 800c142:	e058      	b.n	800c1f6 <HAL_UART_Receive_DMA+0xea>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	88fa      	ldrh	r2, [r7, #6]
 800c156:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2222      	movs	r2, #34	; 0x22
 800c162:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16a:	4a25      	ldr	r2, [pc, #148]	; (800c200 <HAL_UART_Receive_DMA+0xf4>)
 800c16c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c172:	4a24      	ldr	r2, [pc, #144]	; (800c204 <HAL_UART_Receive_DMA+0xf8>)
 800c174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c17a:	4a23      	ldr	r2, [pc, #140]	; (800c208 <HAL_UART_Receive_DMA+0xfc>)
 800c17c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c182:	2200      	movs	r2, #0
 800c184:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	88fb      	ldrh	r3, [r7, #6]
 800c19e:	f7fb fefd 	bl	8007f9c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	613b      	str	r3, [r7, #16]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	613b      	str	r3, [r7, #16]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	613b      	str	r3, [r7, #16]
 800c1b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	695a      	ldr	r2, [r3, #20]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0201 	orr.w	r2, r2, #1
 800c1de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	695a      	ldr	r2, [r3, #20]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e000      	b.n	800c1f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c1f4:	2302      	movs	r3, #2
  }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	0800c449 	.word	0x0800c449
 800c204:	0800c4b1 	.word	0x0800c4b1
 800c208:	0800c4cd 	.word	0x0800c4cd

0800c20c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	f003 030f 	and.w	r3, r3, #15
 800c23a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10d      	bne.n	800c25e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	f003 0320 	and.w	r3, r3, #32
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d008      	beq.n	800c25e <HAL_UART_IRQHandler+0x52>
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	f003 0320 	and.w	r3, r3, #32
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa38 	bl	800c6cc <UART_Receive_IT>
      return;
 800c25c:	e0d0      	b.n	800c400 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 80b0 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x1ba>
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d105      	bne.n	800c27c <HAL_UART_IRQHandler+0x70>
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80a5 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <HAL_UART_IRQHandler+0x90>
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c294:	f043 0201 	orr.w	r2, r3, #1
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <HAL_UART_IRQHandler+0xb0>
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b4:	f043 0202 	orr.w	r2, r3, #2
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <HAL_UART_IRQHandler+0xd0>
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d4:	f043 0204 	orr.w	r2, r3, #4
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f003 0308 	and.w	r3, r3, #8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00f      	beq.n	800c306 <HAL_UART_IRQHandler+0xfa>
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d104      	bne.n	800c2fa <HAL_UART_IRQHandler+0xee>
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fe:	f043 0208 	orr.w	r2, r3, #8
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d077      	beq.n	800c3fe <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	f003 0320 	and.w	r3, r3, #32
 800c314:	2b00      	cmp	r3, #0
 800c316:	d007      	beq.n	800c328 <HAL_UART_IRQHandler+0x11c>
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f9d2 	bl	800c6cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	bf0c      	ite	eq
 800c336:	2301      	moveq	r3, #1
 800c338:	2300      	movne	r3, #0
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	f003 0308 	and.w	r3, r3, #8
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <HAL_UART_IRQHandler+0x144>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d031      	beq.n	800c3b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f91b 	bl	800c58c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b40      	cmp	r3, #64	; 0x40
 800c362:	d123      	bne.n	800c3ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	695a      	ldr	r2, [r3, #20]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c372:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d013      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c380:	4a21      	ldr	r2, [pc, #132]	; (800c408 <HAL_UART_IRQHandler+0x1fc>)
 800c382:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fb fe5f 	bl	800804c <HAL_DMA_Abort_IT>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d016      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c39e:	4610      	mov	r0, r2
 800c3a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a2:	e00e      	b.n	800c3c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f845 	bl	800c434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3aa:	e00a      	b.n	800c3c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f841 	bl	800c434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b2:	e006      	b.n	800c3c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f83d 	bl	800c434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c3c0:	e01d      	b.n	800c3fe <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c2:	bf00      	nop
    return;
 800c3c4:	e01b      	b.n	800c3fe <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d008      	beq.n	800c3e2 <HAL_UART_IRQHandler+0x1d6>
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f908 	bl	800c5f0 <UART_Transmit_IT>
    return;
 800c3e0:	e00e      	b.n	800c400 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d009      	beq.n	800c400 <HAL_UART_IRQHandler+0x1f4>
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d004      	beq.n	800c400 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f950 	bl	800c69c <UART_EndTransmit_IT>
    return;
 800c3fc:	e000      	b.n	800c400 <HAL_UART_IRQHandler+0x1f4>
    return;
 800c3fe:	bf00      	nop
  }
}
 800c400:	3720      	adds	r7, #32
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0800c5c9 	.word	0x0800c5c9

0800c40c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c454:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c460:	2b00      	cmp	r3, #0
 800c462:	d11e      	bne.n	800c4a2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c478:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	695a      	ldr	r2, [r3, #20]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f022 0201 	bic.w	r2, r2, #1
 800c488:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	695a      	ldr	r2, [r3, #20]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c498:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2220      	movs	r2, #32
 800c49e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f7f9 ff3e 	bl	8006324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff ffae 	bl	800c420 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e8:	2b80      	cmp	r3, #128	; 0x80
 800c4ea:	bf0c      	ite	eq
 800c4ec:	2301      	moveq	r3, #1
 800c4ee:	2300      	movne	r3, #0
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b21      	cmp	r3, #33	; 0x21
 800c4fe:	d108      	bne.n	800c512 <UART_DMAError+0x46>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2200      	movs	r2, #0
 800c50a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f000 f827 	bl	800c560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b40      	cmp	r3, #64	; 0x40
 800c51e:	bf0c      	ite	eq
 800c520:	2301      	moveq	r3, #1
 800c522:	2300      	movne	r3, #0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b22      	cmp	r3, #34	; 0x22
 800c532:	d108      	bne.n	800c546 <UART_DMAError+0x7a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2200      	movs	r2, #0
 800c53e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c540:	68b8      	ldr	r0, [r7, #8]
 800c542:	f000 f823 	bl	800c58c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c54a:	f043 0210 	orr.w	r2, r3, #16
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7ff ff6e 	bl	800c434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c558:	bf00      	nop
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c576:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	695a      	ldr	r2, [r3, #20]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f022 0201 	bic.w	r2, r2, #1
 800c5b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7ff ff26 	bl	800c434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e8:	bf00      	nop
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b21      	cmp	r3, #33	; 0x21
 800c602:	d144      	bne.n	800c68e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c60c:	d11a      	bne.n	800c644 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c622:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d105      	bne.n	800c638 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	1c9a      	adds	r2, r3, #2
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	621a      	str	r2, [r3, #32]
 800c636:	e00e      	b.n	800c656 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	621a      	str	r2, [r3, #32]
 800c642:	e008      	b.n	800c656 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	1c59      	adds	r1, r3, #1
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6211      	str	r1, [r2, #32]
 800c64e:	781a      	ldrb	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	3b01      	subs	r3, #1
 800c65e:	b29b      	uxth	r3, r3
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	4619      	mov	r1, r3
 800c664:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10f      	bne.n	800c68a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68da      	ldr	r2, [r3, #12]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c68e:	2302      	movs	r3, #2
  }
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68da      	ldr	r2, [r3, #12]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2220      	movs	r2, #32
 800c6b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff fea5 	bl	800c40c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b22      	cmp	r3, #34	; 0x22
 800c6de:	d171      	bne.n	800c7c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6e8:	d123      	bne.n	800c732 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10e      	bne.n	800c716 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c704:	b29a      	uxth	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	1c9a      	adds	r2, r3, #2
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	629a      	str	r2, [r3, #40]	; 0x28
 800c714:	e029      	b.n	800c76a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	b29a      	uxth	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	629a      	str	r2, [r3, #40]	; 0x28
 800c730:	e01b      	b.n	800c76a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10a      	bne.n	800c750 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6858      	ldr	r0, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c744:	1c59      	adds	r1, r3, #1
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	6291      	str	r1, [r2, #40]	; 0x28
 800c74a:	b2c2      	uxtb	r2, r0
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	e00c      	b.n	800c76a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	b2da      	uxtb	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75c:	1c58      	adds	r0, r3, #1
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	6288      	str	r0, [r1, #40]	; 0x28
 800c762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c76e:	b29b      	uxth	r3, r3
 800c770:	3b01      	subs	r3, #1
 800c772:	b29b      	uxth	r3, r3
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	4619      	mov	r1, r3
 800c778:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d120      	bne.n	800c7c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68da      	ldr	r2, [r3, #12]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0220 	bic.w	r2, r2, #32
 800c78c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c79c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	695a      	ldr	r2, [r3, #20]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f022 0201 	bic.w	r2, r2, #1
 800c7ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7f9 fdb4 	bl	8006324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	e002      	b.n	800c7c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	e000      	b.n	800c7c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c7c4:	2302      	movs	r3, #2
  }
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	b0bd      	sub	sp, #244	; 0xf4
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ec:	68d9      	ldr	r1, [r3, #12]
 800c7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	ea40 0301 	orr.w	r3, r0, r1
 800c7f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7fe:	689a      	ldr	r2, [r3, #8]
 800c800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	431a      	orrs	r2, r3
 800c808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	431a      	orrs	r2, r3
 800c810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	4313      	orrs	r3, r2
 800c818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800c81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c828:	f021 010c 	bic.w	r1, r1, #12
 800c82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c836:	430b      	orrs	r3, r1
 800c838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84a:	6999      	ldr	r1, [r3, #24]
 800c84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	ea40 0301 	orr.w	r3, r0, r1
 800c856:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c862:	f040 81a5 	bne.w	800cbb0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	4bcd      	ldr	r3, [pc, #820]	; (800cba4 <UART_SetConfig+0x3d4>)
 800c86e:	429a      	cmp	r2, r3
 800c870:	d006      	beq.n	800c880 <UART_SetConfig+0xb0>
 800c872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	4bcb      	ldr	r3, [pc, #812]	; (800cba8 <UART_SetConfig+0x3d8>)
 800c87a:	429a      	cmp	r2, r3
 800c87c:	f040 80cb 	bne.w	800ca16 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c880:	f7fe f9b6 	bl	800abf0 <HAL_RCC_GetPCLK2Freq>
 800c884:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c88c:	461c      	mov	r4, r3
 800c88e:	f04f 0500 	mov.w	r5, #0
 800c892:	4622      	mov	r2, r4
 800c894:	462b      	mov	r3, r5
 800c896:	1891      	adds	r1, r2, r2
 800c898:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c89c:	415b      	adcs	r3, r3
 800c89e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c8a6:	1912      	adds	r2, r2, r4
 800c8a8:	eb45 0303 	adc.w	r3, r5, r3
 800c8ac:	f04f 0000 	mov.w	r0, #0
 800c8b0:	f04f 0100 	mov.w	r1, #0
 800c8b4:	00d9      	lsls	r1, r3, #3
 800c8b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c8ba:	00d0      	lsls	r0, r2, #3
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	1911      	adds	r1, r2, r4
 800c8c2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800c8c6:	416b      	adcs	r3, r5
 800c8c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f04f 0300 	mov.w	r3, #0
 800c8d8:	1891      	adds	r1, r2, r2
 800c8da:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c8de:	415b      	adcs	r3, r3
 800c8e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c8e8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c8ec:	f7f4 f9d4 	bl	8000c98 <__aeabi_uldivmod>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4bad      	ldr	r3, [pc, #692]	; (800cbac <UART_SetConfig+0x3dc>)
 800c8f6:	fba3 2302 	umull	r2, r3, r3, r2
 800c8fa:	095b      	lsrs	r3, r3, #5
 800c8fc:	011e      	lsls	r6, r3, #4
 800c8fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c902:	461c      	mov	r4, r3
 800c904:	f04f 0500 	mov.w	r5, #0
 800c908:	4622      	mov	r2, r4
 800c90a:	462b      	mov	r3, r5
 800c90c:	1891      	adds	r1, r2, r2
 800c90e:	67b9      	str	r1, [r7, #120]	; 0x78
 800c910:	415b      	adcs	r3, r3
 800c912:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c914:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c918:	1912      	adds	r2, r2, r4
 800c91a:	eb45 0303 	adc.w	r3, r5, r3
 800c91e:	f04f 0000 	mov.w	r0, #0
 800c922:	f04f 0100 	mov.w	r1, #0
 800c926:	00d9      	lsls	r1, r3, #3
 800c928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c92c:	00d0      	lsls	r0, r2, #3
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	1911      	adds	r1, r2, r4
 800c934:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800c938:	416b      	adcs	r3, r5
 800c93a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	461a      	mov	r2, r3
 800c946:	f04f 0300 	mov.w	r3, #0
 800c94a:	1891      	adds	r1, r2, r2
 800c94c:	6739      	str	r1, [r7, #112]	; 0x70
 800c94e:	415b      	adcs	r3, r3
 800c950:	677b      	str	r3, [r7, #116]	; 0x74
 800c952:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c956:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c95a:	f7f4 f99d 	bl	8000c98 <__aeabi_uldivmod>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4b92      	ldr	r3, [pc, #584]	; (800cbac <UART_SetConfig+0x3dc>)
 800c964:	fba3 1302 	umull	r1, r3, r3, r2
 800c968:	095b      	lsrs	r3, r3, #5
 800c96a:	2164      	movs	r1, #100	; 0x64
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	3332      	adds	r3, #50	; 0x32
 800c976:	4a8d      	ldr	r2, [pc, #564]	; (800cbac <UART_SetConfig+0x3dc>)
 800c978:	fba2 2303 	umull	r2, r3, r2, r3
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c984:	441e      	add	r6, r3
 800c986:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c98a:	4618      	mov	r0, r3
 800c98c:	f04f 0100 	mov.w	r1, #0
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	1894      	adds	r4, r2, r2
 800c996:	66bc      	str	r4, [r7, #104]	; 0x68
 800c998:	415b      	adcs	r3, r3
 800c99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c99c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c9a0:	1812      	adds	r2, r2, r0
 800c9a2:	eb41 0303 	adc.w	r3, r1, r3
 800c9a6:	f04f 0400 	mov.w	r4, #0
 800c9aa:	f04f 0500 	mov.w	r5, #0
 800c9ae:	00dd      	lsls	r5, r3, #3
 800c9b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c9b4:	00d4      	lsls	r4, r2, #3
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	1814      	adds	r4, r2, r0
 800c9bc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c9c0:	414b      	adcs	r3, r1
 800c9c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f04f 0300 	mov.w	r3, #0
 800c9d2:	1891      	adds	r1, r2, r2
 800c9d4:	6639      	str	r1, [r7, #96]	; 0x60
 800c9d6:	415b      	adcs	r3, r3
 800c9d8:	667b      	str	r3, [r7, #100]	; 0x64
 800c9da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c9de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c9e2:	f7f4 f959 	bl	8000c98 <__aeabi_uldivmod>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4b70      	ldr	r3, [pc, #448]	; (800cbac <UART_SetConfig+0x3dc>)
 800c9ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c9f0:	095b      	lsrs	r3, r3, #5
 800c9f2:	2164      	movs	r1, #100	; 0x64
 800c9f4:	fb01 f303 	mul.w	r3, r1, r3
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	3332      	adds	r3, #50	; 0x32
 800c9fe:	4a6b      	ldr	r2, [pc, #428]	; (800cbac <UART_SetConfig+0x3dc>)
 800ca00:	fba2 2303 	umull	r2, r3, r2, r3
 800ca04:	095b      	lsrs	r3, r3, #5
 800ca06:	f003 0207 	and.w	r2, r3, #7
 800ca0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4432      	add	r2, r6
 800ca12:	609a      	str	r2, [r3, #8]
 800ca14:	e26d      	b.n	800cef2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca16:	f7fe f8d7 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800ca1a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca22:	461c      	mov	r4, r3
 800ca24:	f04f 0500 	mov.w	r5, #0
 800ca28:	4622      	mov	r2, r4
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	1891      	adds	r1, r2, r2
 800ca2e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca30:	415b      	adcs	r3, r3
 800ca32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca38:	1912      	adds	r2, r2, r4
 800ca3a:	eb45 0303 	adc.w	r3, r5, r3
 800ca3e:	f04f 0000 	mov.w	r0, #0
 800ca42:	f04f 0100 	mov.w	r1, #0
 800ca46:	00d9      	lsls	r1, r3, #3
 800ca48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca4c:	00d0      	lsls	r0, r2, #3
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	1911      	adds	r1, r2, r4
 800ca54:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ca58:	416b      	adcs	r3, r5
 800ca5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	461a      	mov	r2, r3
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	1891      	adds	r1, r2, r2
 800ca6c:	6539      	str	r1, [r7, #80]	; 0x50
 800ca6e:	415b      	adcs	r3, r3
 800ca70:	657b      	str	r3, [r7, #84]	; 0x54
 800ca72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca76:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ca7a:	f7f4 f90d 	bl	8000c98 <__aeabi_uldivmod>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4b4a      	ldr	r3, [pc, #296]	; (800cbac <UART_SetConfig+0x3dc>)
 800ca84:	fba3 2302 	umull	r2, r3, r3, r2
 800ca88:	095b      	lsrs	r3, r3, #5
 800ca8a:	011e      	lsls	r6, r3, #4
 800ca8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca90:	461c      	mov	r4, r3
 800ca92:	f04f 0500 	mov.w	r5, #0
 800ca96:	4622      	mov	r2, r4
 800ca98:	462b      	mov	r3, r5
 800ca9a:	1891      	adds	r1, r2, r2
 800ca9c:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca9e:	415b      	adcs	r3, r3
 800caa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800caa6:	1912      	adds	r2, r2, r4
 800caa8:	eb45 0303 	adc.w	r3, r5, r3
 800caac:	f04f 0000 	mov.w	r0, #0
 800cab0:	f04f 0100 	mov.w	r1, #0
 800cab4:	00d9      	lsls	r1, r3, #3
 800cab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800caba:	00d0      	lsls	r0, r2, #3
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	1911      	adds	r1, r2, r4
 800cac2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800cac6:	416b      	adcs	r3, r5
 800cac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	461a      	mov	r2, r3
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	1891      	adds	r1, r2, r2
 800cada:	6439      	str	r1, [r7, #64]	; 0x40
 800cadc:	415b      	adcs	r3, r3
 800cade:	647b      	str	r3, [r7, #68]	; 0x44
 800cae0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cae4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800cae8:	f7f4 f8d6 	bl	8000c98 <__aeabi_uldivmod>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4b2e      	ldr	r3, [pc, #184]	; (800cbac <UART_SetConfig+0x3dc>)
 800caf2:	fba3 1302 	umull	r1, r3, r3, r2
 800caf6:	095b      	lsrs	r3, r3, #5
 800caf8:	2164      	movs	r1, #100	; 0x64
 800cafa:	fb01 f303 	mul.w	r3, r1, r3
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	3332      	adds	r3, #50	; 0x32
 800cb04:	4a29      	ldr	r2, [pc, #164]	; (800cbac <UART_SetConfig+0x3dc>)
 800cb06:	fba2 2303 	umull	r2, r3, r2, r3
 800cb0a:	095b      	lsrs	r3, r3, #5
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb12:	441e      	add	r6, r3
 800cb14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f04f 0100 	mov.w	r1, #0
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	1894      	adds	r4, r2, r2
 800cb24:	63bc      	str	r4, [r7, #56]	; 0x38
 800cb26:	415b      	adcs	r3, r3
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb2e:	1812      	adds	r2, r2, r0
 800cb30:	eb41 0303 	adc.w	r3, r1, r3
 800cb34:	f04f 0400 	mov.w	r4, #0
 800cb38:	f04f 0500 	mov.w	r5, #0
 800cb3c:	00dd      	lsls	r5, r3, #3
 800cb3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cb42:	00d4      	lsls	r4, r2, #3
 800cb44:	4622      	mov	r2, r4
 800cb46:	462b      	mov	r3, r5
 800cb48:	1814      	adds	r4, r2, r0
 800cb4a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800cb4e:	414b      	adcs	r3, r1
 800cb50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	1891      	adds	r1, r2, r2
 800cb62:	6339      	str	r1, [r7, #48]	; 0x30
 800cb64:	415b      	adcs	r3, r3
 800cb66:	637b      	str	r3, [r7, #52]	; 0x34
 800cb68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cb6c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cb70:	f7f4 f892 	bl	8000c98 <__aeabi_uldivmod>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <UART_SetConfig+0x3dc>)
 800cb7a:	fba3 1302 	umull	r1, r3, r3, r2
 800cb7e:	095b      	lsrs	r3, r3, #5
 800cb80:	2164      	movs	r1, #100	; 0x64
 800cb82:	fb01 f303 	mul.w	r3, r1, r3
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	3332      	adds	r3, #50	; 0x32
 800cb8c:	4a07      	ldr	r2, [pc, #28]	; (800cbac <UART_SetConfig+0x3dc>)
 800cb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb92:	095b      	lsrs	r3, r3, #5
 800cb94:	f003 0207 	and.w	r2, r3, #7
 800cb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4432      	add	r2, r6
 800cba0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cba2:	e1a6      	b.n	800cef2 <UART_SetConfig+0x722>
 800cba4:	40011000 	.word	0x40011000
 800cba8:	40011400 	.word	0x40011400
 800cbac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	4bd1      	ldr	r3, [pc, #836]	; (800cefc <UART_SetConfig+0x72c>)
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d006      	beq.n	800cbca <UART_SetConfig+0x3fa>
 800cbbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	4bcf      	ldr	r3, [pc, #828]	; (800cf00 <UART_SetConfig+0x730>)
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	f040 80ca 	bne.w	800cd5e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cbca:	f7fe f811 	bl	800abf0 <HAL_RCC_GetPCLK2Freq>
 800cbce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbd6:	461c      	mov	r4, r3
 800cbd8:	f04f 0500 	mov.w	r5, #0
 800cbdc:	4622      	mov	r2, r4
 800cbde:	462b      	mov	r3, r5
 800cbe0:	1891      	adds	r1, r2, r2
 800cbe2:	62b9      	str	r1, [r7, #40]	; 0x28
 800cbe4:	415b      	adcs	r3, r3
 800cbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbec:	1912      	adds	r2, r2, r4
 800cbee:	eb45 0303 	adc.w	r3, r5, r3
 800cbf2:	f04f 0000 	mov.w	r0, #0
 800cbf6:	f04f 0100 	mov.w	r1, #0
 800cbfa:	00d9      	lsls	r1, r3, #3
 800cbfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cc00:	00d0      	lsls	r0, r2, #3
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	eb12 0a04 	adds.w	sl, r2, r4
 800cc0a:	eb43 0b05 	adc.w	fp, r3, r5
 800cc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f04f 0100 	mov.w	r1, #0
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	008b      	lsls	r3, r1, #2
 800cc24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cc28:	0082      	lsls	r2, r0, #2
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	4659      	mov	r1, fp
 800cc2e:	f7f4 f833 	bl	8000c98 <__aeabi_uldivmod>
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	4bb3      	ldr	r3, [pc, #716]	; (800cf04 <UART_SetConfig+0x734>)
 800cc38:	fba3 2302 	umull	r2, r3, r3, r2
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	011e      	lsls	r6, r3, #4
 800cc40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc44:	4618      	mov	r0, r3
 800cc46:	f04f 0100 	mov.w	r1, #0
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	1894      	adds	r4, r2, r2
 800cc50:	623c      	str	r4, [r7, #32]
 800cc52:	415b      	adcs	r3, r3
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
 800cc56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc5a:	1812      	adds	r2, r2, r0
 800cc5c:	eb41 0303 	adc.w	r3, r1, r3
 800cc60:	f04f 0400 	mov.w	r4, #0
 800cc64:	f04f 0500 	mov.w	r5, #0
 800cc68:	00dd      	lsls	r5, r3, #3
 800cc6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cc6e:	00d4      	lsls	r4, r2, #3
 800cc70:	4622      	mov	r2, r4
 800cc72:	462b      	mov	r3, r5
 800cc74:	1814      	adds	r4, r2, r0
 800cc76:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800cc7a:	414b      	adcs	r3, r1
 800cc7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f04f 0100 	mov.w	r1, #0
 800cc8c:	f04f 0200 	mov.w	r2, #0
 800cc90:	f04f 0300 	mov.w	r3, #0
 800cc94:	008b      	lsls	r3, r1, #2
 800cc96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cc9a:	0082      	lsls	r2, r0, #2
 800cc9c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800cca0:	f7f3 fffa 	bl	8000c98 <__aeabi_uldivmod>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4b96      	ldr	r3, [pc, #600]	; (800cf04 <UART_SetConfig+0x734>)
 800ccaa:	fba3 1302 	umull	r1, r3, r3, r2
 800ccae:	095b      	lsrs	r3, r3, #5
 800ccb0:	2164      	movs	r1, #100	; 0x64
 800ccb2:	fb01 f303 	mul.w	r3, r1, r3
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	011b      	lsls	r3, r3, #4
 800ccba:	3332      	adds	r3, #50	; 0x32
 800ccbc:	4a91      	ldr	r2, [pc, #580]	; (800cf04 <UART_SetConfig+0x734>)
 800ccbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc2:	095b      	lsrs	r3, r3, #5
 800ccc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccc8:	441e      	add	r6, r3
 800ccca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f04f 0100 	mov.w	r1, #0
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	1894      	adds	r4, r2, r2
 800ccda:	61bc      	str	r4, [r7, #24]
 800ccdc:	415b      	adcs	r3, r3
 800ccde:	61fb      	str	r3, [r7, #28]
 800cce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cce4:	1812      	adds	r2, r2, r0
 800cce6:	eb41 0303 	adc.w	r3, r1, r3
 800ccea:	f04f 0400 	mov.w	r4, #0
 800ccee:	f04f 0500 	mov.w	r5, #0
 800ccf2:	00dd      	lsls	r5, r3, #3
 800ccf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ccf8:	00d4      	lsls	r4, r2, #3
 800ccfa:	4622      	mov	r2, r4
 800ccfc:	462b      	mov	r3, r5
 800ccfe:	1814      	adds	r4, r2, r0
 800cd00:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800cd04:	414b      	adcs	r3, r1
 800cd06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f04f 0100 	mov.w	r1, #0
 800cd16:	f04f 0200 	mov.w	r2, #0
 800cd1a:	f04f 0300 	mov.w	r3, #0
 800cd1e:	008b      	lsls	r3, r1, #2
 800cd20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd24:	0082      	lsls	r2, r0, #2
 800cd26:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800cd2a:	f7f3 ffb5 	bl	8000c98 <__aeabi_uldivmod>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4b74      	ldr	r3, [pc, #464]	; (800cf04 <UART_SetConfig+0x734>)
 800cd34:	fba3 1302 	umull	r1, r3, r3, r2
 800cd38:	095b      	lsrs	r3, r3, #5
 800cd3a:	2164      	movs	r1, #100	; 0x64
 800cd3c:	fb01 f303 	mul.w	r3, r1, r3
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	3332      	adds	r3, #50	; 0x32
 800cd46:	4a6f      	ldr	r2, [pc, #444]	; (800cf04 <UART_SetConfig+0x734>)
 800cd48:	fba2 2303 	umull	r2, r3, r2, r3
 800cd4c:	095b      	lsrs	r3, r3, #5
 800cd4e:	f003 020f 	and.w	r2, r3, #15
 800cd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4432      	add	r2, r6
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	e0c9      	b.n	800cef2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd5e:	f7fd ff33 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800cd62:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd6a:	461c      	mov	r4, r3
 800cd6c:	f04f 0500 	mov.w	r5, #0
 800cd70:	4622      	mov	r2, r4
 800cd72:	462b      	mov	r3, r5
 800cd74:	1891      	adds	r1, r2, r2
 800cd76:	6139      	str	r1, [r7, #16]
 800cd78:	415b      	adcs	r3, r3
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd80:	1912      	adds	r2, r2, r4
 800cd82:	eb45 0303 	adc.w	r3, r5, r3
 800cd86:	f04f 0000 	mov.w	r0, #0
 800cd8a:	f04f 0100 	mov.w	r1, #0
 800cd8e:	00d9      	lsls	r1, r3, #3
 800cd90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd94:	00d0      	lsls	r0, r2, #3
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	eb12 0804 	adds.w	r8, r2, r4
 800cd9e:	eb43 0905 	adc.w	r9, r3, r5
 800cda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f04f 0100 	mov.w	r1, #0
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	008b      	lsls	r3, r1, #2
 800cdb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdbc:	0082      	lsls	r2, r0, #2
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f7f3 ff69 	bl	8000c98 <__aeabi_uldivmod>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4b4e      	ldr	r3, [pc, #312]	; (800cf04 <UART_SetConfig+0x734>)
 800cdcc:	fba3 2302 	umull	r2, r3, r3, r2
 800cdd0:	095b      	lsrs	r3, r3, #5
 800cdd2:	011e      	lsls	r6, r3, #4
 800cdd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f04f 0100 	mov.w	r1, #0
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	1894      	adds	r4, r2, r2
 800cde4:	60bc      	str	r4, [r7, #8]
 800cde6:	415b      	adcs	r3, r3
 800cde8:	60fb      	str	r3, [r7, #12]
 800cdea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdee:	1812      	adds	r2, r2, r0
 800cdf0:	eb41 0303 	adc.w	r3, r1, r3
 800cdf4:	f04f 0400 	mov.w	r4, #0
 800cdf8:	f04f 0500 	mov.w	r5, #0
 800cdfc:	00dd      	lsls	r5, r3, #3
 800cdfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce02:	00d4      	lsls	r4, r2, #3
 800ce04:	4622      	mov	r2, r4
 800ce06:	462b      	mov	r3, r5
 800ce08:	1814      	adds	r4, r2, r0
 800ce0a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800ce0e:	414b      	adcs	r3, r1
 800ce10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f04f 0100 	mov.w	r1, #0
 800ce20:	f04f 0200 	mov.w	r2, #0
 800ce24:	f04f 0300 	mov.w	r3, #0
 800ce28:	008b      	lsls	r3, r1, #2
 800ce2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce2e:	0082      	lsls	r2, r0, #2
 800ce30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ce34:	f7f3 ff30 	bl	8000c98 <__aeabi_uldivmod>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4b31      	ldr	r3, [pc, #196]	; (800cf04 <UART_SetConfig+0x734>)
 800ce3e:	fba3 1302 	umull	r1, r3, r3, r2
 800ce42:	095b      	lsrs	r3, r3, #5
 800ce44:	2164      	movs	r1, #100	; 0x64
 800ce46:	fb01 f303 	mul.w	r3, r1, r3
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	011b      	lsls	r3, r3, #4
 800ce4e:	3332      	adds	r3, #50	; 0x32
 800ce50:	4a2c      	ldr	r2, [pc, #176]	; (800cf04 <UART_SetConfig+0x734>)
 800ce52:	fba2 2303 	umull	r2, r3, r2, r3
 800ce56:	095b      	lsrs	r3, r3, #5
 800ce58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce5c:	441e      	add	r6, r3
 800ce5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce62:	4618      	mov	r0, r3
 800ce64:	f04f 0100 	mov.w	r1, #0
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	1894      	adds	r4, r2, r2
 800ce6e:	603c      	str	r4, [r7, #0]
 800ce70:	415b      	adcs	r3, r3
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce78:	1812      	adds	r2, r2, r0
 800ce7a:	eb41 0303 	adc.w	r3, r1, r3
 800ce7e:	f04f 0400 	mov.w	r4, #0
 800ce82:	f04f 0500 	mov.w	r5, #0
 800ce86:	00dd      	lsls	r5, r3, #3
 800ce88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce8c:	00d4      	lsls	r4, r2, #3
 800ce8e:	4622      	mov	r2, r4
 800ce90:	462b      	mov	r3, r5
 800ce92:	1814      	adds	r4, r2, r0
 800ce94:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ce98:	414b      	adcs	r3, r1
 800ce9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f04f 0100 	mov.w	r1, #0
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	f04f 0300 	mov.w	r3, #0
 800ceb2:	008b      	lsls	r3, r1, #2
 800ceb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ceb8:	0082      	lsls	r2, r0, #2
 800ceba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800cebe:	f7f3 feeb 	bl	8000c98 <__aeabi_uldivmod>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <UART_SetConfig+0x734>)
 800cec8:	fba3 1302 	umull	r1, r3, r3, r2
 800cecc:	095b      	lsrs	r3, r3, #5
 800cece:	2164      	movs	r1, #100	; 0x64
 800ced0:	fb01 f303 	mul.w	r3, r1, r3
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	3332      	adds	r3, #50	; 0x32
 800ceda:	4a0a      	ldr	r2, [pc, #40]	; (800cf04 <UART_SetConfig+0x734>)
 800cedc:	fba2 2303 	umull	r2, r3, r2, r3
 800cee0:	095b      	lsrs	r3, r3, #5
 800cee2:	f003 020f 	and.w	r2, r3, #15
 800cee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4432      	add	r2, r6
 800ceee:	609a      	str	r2, [r3, #8]
}
 800cef0:	e7ff      	b.n	800cef2 <UART_SetConfig+0x722>
 800cef2:	bf00      	nop
 800cef4:	37f4      	adds	r7, #244	; 0xf4
 800cef6:	46bd      	mov	sp, r7
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	40011000 	.word	0x40011000
 800cf00:	40011400 	.word	0x40011400
 800cf04:	51eb851f 	.word	0x51eb851f

0800cf08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cf0c:	4904      	ldr	r1, [pc, #16]	; (800cf20 <MX_FATFS_Init+0x18>)
 800cf0e:	4805      	ldr	r0, [pc, #20]	; (800cf24 <MX_FATFS_Init+0x1c>)
 800cf10:	f003 f906 	bl	8010120 <FATFS_LinkDriver>
 800cf14:	4603      	mov	r3, r0
 800cf16:	461a      	mov	r2, r3
 800cf18:	4b03      	ldr	r3, [pc, #12]	; (800cf28 <MX_FATFS_Init+0x20>)
 800cf1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cf1c:	bf00      	nop
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	200031d0 	.word	0x200031d0
 800cf24:	2000003c 	.word	0x2000003c
 800cf28:	200031d4 	.word	0x200031d4

0800cf2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cf30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7f7 facf 	bl	80044ec <SD_disk_initialize>
 800cf4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f7 fbab 	bl	80046c0 <SD_disk_status>
 800cf6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	607a      	str	r2, [r7, #4]
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800cf84:	7bf8      	ldrb	r0, [r7, #15]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	f7f7 fbae 	bl	80046ec <SD_disk_read>
 800cf90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800cfaa:	7bf8      	ldrb	r0, [r7, #15]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	f7f7 fc05 	bl	80047c0 <SD_disk_write>
 800cfb6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	603a      	str	r2, [r7, #0]
 800cfca:	71fb      	strb	r3, [r7, #7]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800cfd0:	79b9      	ldrb	r1, [r7, #6]
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7f7 fc76 	bl	80048c8 <SD_disk_ioctl>
 800cfdc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	4a08      	ldr	r2, [pc, #32]	; (800d018 <disk_status+0x30>)
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	79fa      	ldrb	r2, [r7, #7]
 800d000:	4905      	ldr	r1, [pc, #20]	; (800d018 <disk_status+0x30>)
 800d002:	440a      	add	r2, r1
 800d004:	7a12      	ldrb	r2, [r2, #8]
 800d006:	4610      	mov	r0, r2
 800d008:	4798      	blx	r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200004f0 	.word	0x200004f0

0800d01c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	4a0d      	ldr	r2, [pc, #52]	; (800d064 <disk_initialize+0x48>)
 800d02e:	5cd3      	ldrb	r3, [r2, r3]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d111      	bne.n	800d058 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	4a0b      	ldr	r2, [pc, #44]	; (800d064 <disk_initialize+0x48>)
 800d038:	2101      	movs	r1, #1
 800d03a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d03c:	79fb      	ldrb	r3, [r7, #7]
 800d03e:	4a09      	ldr	r2, [pc, #36]	; (800d064 <disk_initialize+0x48>)
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	79fa      	ldrb	r2, [r7, #7]
 800d04a:	4906      	ldr	r1, [pc, #24]	; (800d064 <disk_initialize+0x48>)
 800d04c:	440a      	add	r2, r1
 800d04e:	7a12      	ldrb	r2, [r2, #8]
 800d050:	4610      	mov	r0, r2
 800d052:	4798      	blx	r3
 800d054:	4603      	mov	r3, r0
 800d056:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	200004f0 	.word	0x200004f0

0800d068 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d068:	b590      	push	{r4, r7, lr}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	607a      	str	r2, [r7, #4]
 800d072:	603b      	str	r3, [r7, #0]
 800d074:	4603      	mov	r3, r0
 800d076:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	4a0a      	ldr	r2, [pc, #40]	; (800d0a4 <disk_read+0x3c>)
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	689c      	ldr	r4, [r3, #8]
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	4a07      	ldr	r2, [pc, #28]	; (800d0a4 <disk_read+0x3c>)
 800d088:	4413      	add	r3, r2
 800d08a:	7a18      	ldrb	r0, [r3, #8]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	47a0      	blx	r4
 800d094:	4603      	mov	r3, r0
 800d096:	75fb      	strb	r3, [r7, #23]
  return res;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd90      	pop	{r4, r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200004f0 	.word	0x200004f0

0800d0a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	607a      	str	r2, [r7, #4]
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	4a0a      	ldr	r2, [pc, #40]	; (800d0e4 <disk_write+0x3c>)
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	68dc      	ldr	r4, [r3, #12]
 800d0c4:	7bfb      	ldrb	r3, [r7, #15]
 800d0c6:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <disk_write+0x3c>)
 800d0c8:	4413      	add	r3, r2
 800d0ca:	7a18      	ldrb	r0, [r3, #8]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	68b9      	ldr	r1, [r7, #8]
 800d0d2:	47a0      	blx	r4
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd90      	pop	{r4, r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	200004f0 	.word	0x200004f0

0800d0e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	603a      	str	r2, [r7, #0]
 800d0f2:	71fb      	strb	r3, [r7, #7]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	4a09      	ldr	r2, [pc, #36]	; (800d120 <disk_ioctl+0x38>)
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	79fa      	ldrb	r2, [r7, #7]
 800d106:	4906      	ldr	r1, [pc, #24]	; (800d120 <disk_ioctl+0x38>)
 800d108:	440a      	add	r2, r1
 800d10a:	7a10      	ldrb	r0, [r2, #8]
 800d10c:	79b9      	ldrb	r1, [r7, #6]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	4798      	blx	r3
 800d112:	4603      	mov	r3, r0
 800d114:	73fb      	strb	r3, [r7, #15]
  return res;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	200004f0 	.word	0x200004f0

0800d124 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3301      	adds	r3, #1
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	b21a      	sxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4313      	orrs	r3, r2
 800d142:	b21b      	sxth	r3, r3
 800d144:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d146:	89fb      	ldrh	r3, [r7, #14]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3303      	adds	r3, #3
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	3202      	adds	r2, #2
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	4313      	orrs	r3, r2
 800d170:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	3201      	adds	r2, #1
 800d17a:	7812      	ldrb	r2, [r2, #0]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	7812      	ldrb	r2, [r2, #0]
 800d188:	4313      	orrs	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d18c:	68fb      	ldr	r3, [r7, #12]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	607a      	str	r2, [r7, #4]
 800d1ac:	887a      	ldrh	r2, [r7, #2]
 800d1ae:	b2d2      	uxtb	r2, r2
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	887b      	ldrh	r3, [r7, #2]
 800d1b4:	0a1b      	lsrs	r3, r3, #8
 800d1b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	887a      	ldrh	r2, [r7, #2]
 800d1c0:	b2d2      	uxtb	r2, r2
 800d1c2:	701a      	strb	r2, [r3, #0]
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	b2d2      	uxtb	r2, r2
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	0a1b      	lsrs	r3, r3, #8
 800d1ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	607a      	str	r2, [r7, #4]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	0a1b      	lsrs	r3, r3, #8
 800d1fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	0a1b      	lsrs	r3, r3, #8
 800d20e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	607a      	str	r2, [r7, #4]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	b2d2      	uxtb	r2, r2
 800d21a:	701a      	strb	r2, [r3, #0]
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00d      	beq.n	800d25e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	1c53      	adds	r3, r2, #1
 800d246:	613b      	str	r3, [r7, #16]
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	1c59      	adds	r1, r3, #1
 800d24c:	6179      	str	r1, [r7, #20]
 800d24e:	7812      	ldrb	r2, [r2, #0]
 800d250:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3b01      	subs	r3, #1
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1f1      	bne.n	800d242 <mem_cpy+0x1a>
	}
}
 800d25e:	bf00      	nop
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d26a:	b480      	push	{r7}
 800d26c:	b087      	sub	sp, #28
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	1c5a      	adds	r2, r3, #1
 800d27e:	617a      	str	r2, [r7, #20]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3b01      	subs	r3, #1
 800d28a:	607b      	str	r3, [r7, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1f3      	bne.n	800d27a <mem_set+0x10>
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d2a0:	b480      	push	{r7}
 800d2a2:	b089      	sub	sp, #36	; 0x24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	61fa      	str	r2, [r7, #28]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	61ba      	str	r2, [r7, #24]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	1acb      	subs	r3, r1, r3
 800d2cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <mem_cmp+0x40>
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0eb      	beq.n	800d2b8 <mem_cmp+0x18>

	return r;
 800d2e0:	697b      	ldr	r3, [r7, #20]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3724      	adds	r7, #36	; 0x24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d2f8:	e002      	b.n	800d300 <chk_chr+0x12>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <chk_chr+0x26>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	461a      	mov	r2, r3
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	4293      	cmp	r3, r2
 800d312:	d1f2      	bne.n	800d2fa <chk_chr+0xc>
	return *str;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	781b      	ldrb	r3, [r3, #0]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	60fb      	str	r3, [r7, #12]
 800d336:	e029      	b.n	800d38c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d338:	4a27      	ldr	r2, [pc, #156]	; (800d3d8 <chk_lock+0xb4>)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	4413      	add	r3, r2
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d01d      	beq.n	800d382 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d346:	4a24      	ldr	r2, [pc, #144]	; (800d3d8 <chk_lock+0xb4>)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	011b      	lsls	r3, r3, #4
 800d34c:	4413      	add	r3, r2
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d116      	bne.n	800d386 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d358:	4a1f      	ldr	r2, [pc, #124]	; (800d3d8 <chk_lock+0xb4>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	3304      	adds	r3, #4
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d368:	429a      	cmp	r2, r3
 800d36a:	d10c      	bne.n	800d386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d36c:	4a1a      	ldr	r2, [pc, #104]	; (800d3d8 <chk_lock+0xb4>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	011b      	lsls	r3, r3, #4
 800d372:	4413      	add	r3, r2
 800d374:	3308      	adds	r3, #8
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d102      	bne.n	800d386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d380:	e007      	b.n	800d392 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d382:	2301      	movs	r3, #1
 800d384:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3301      	adds	r3, #1
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d9d2      	bls.n	800d338 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d109      	bne.n	800d3ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <chk_lock+0x80>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d101      	bne.n	800d3a8 <chk_lock+0x84>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e010      	b.n	800d3ca <chk_lock+0xa6>
 800d3a8:	2312      	movs	r3, #18
 800d3aa:	e00e      	b.n	800d3ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d108      	bne.n	800d3c4 <chk_lock+0xa0>
 800d3b2:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <chk_lock+0xb4>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	011b      	lsls	r3, r3, #4
 800d3b8:	4413      	add	r3, r2
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3c2:	d101      	bne.n	800d3c8 <chk_lock+0xa4>
 800d3c4:	2310      	movs	r3, #16
 800d3c6:	e000      	b.n	800d3ca <chk_lock+0xa6>
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	200002d0 	.word	0x200002d0

0800d3dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	607b      	str	r3, [r7, #4]
 800d3e6:	e002      	b.n	800d3ee <enq_lock+0x12>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	607b      	str	r3, [r7, #4]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d806      	bhi.n	800d402 <enq_lock+0x26>
 800d3f4:	4a09      	ldr	r2, [pc, #36]	; (800d41c <enq_lock+0x40>)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	011b      	lsls	r3, r3, #4
 800d3fa:	4413      	add	r3, r2
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f2      	bne.n	800d3e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b02      	cmp	r3, #2
 800d406:	bf14      	ite	ne
 800d408:	2301      	movne	r3, #1
 800d40a:	2300      	moveq	r3, #0
 800d40c:	b2db      	uxtb	r3, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	200002d0 	.word	0x200002d0

0800d420 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d42a:	2300      	movs	r3, #0
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	e01f      	b.n	800d470 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d430:	4a41      	ldr	r2, [pc, #260]	; (800d538 <inc_lock+0x118>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	4413      	add	r3, r2
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d113      	bne.n	800d46a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d442:	4a3d      	ldr	r2, [pc, #244]	; (800d538 <inc_lock+0x118>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	4413      	add	r3, r2
 800d44a:	3304      	adds	r3, #4
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d452:	429a      	cmp	r2, r3
 800d454:	d109      	bne.n	800d46a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d456:	4a38      	ldr	r2, [pc, #224]	; (800d538 <inc_lock+0x118>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	4413      	add	r3, r2
 800d45e:	3308      	adds	r3, #8
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d466:	429a      	cmp	r2, r3
 800d468:	d006      	beq.n	800d478 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3301      	adds	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d9dc      	bls.n	800d430 <inc_lock+0x10>
 800d476:	e000      	b.n	800d47a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d478:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d132      	bne.n	800d4e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e002      	b.n	800d48c <inc_lock+0x6c>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d806      	bhi.n	800d4a0 <inc_lock+0x80>
 800d492:	4a29      	ldr	r2, [pc, #164]	; (800d538 <inc_lock+0x118>)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	4413      	add	r3, r2
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f2      	bne.n	800d486 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d101      	bne.n	800d4aa <inc_lock+0x8a>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e040      	b.n	800d52c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4922      	ldr	r1, [pc, #136]	; (800d538 <inc_lock+0x118>)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	011b      	lsls	r3, r3, #4
 800d4b4:	440b      	add	r3, r1
 800d4b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	491e      	ldr	r1, [pc, #120]	; (800d538 <inc_lock+0x118>)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	011b      	lsls	r3, r3, #4
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	695a      	ldr	r2, [r3, #20]
 800d4cc:	491a      	ldr	r1, [pc, #104]	; (800d538 <inc_lock+0x118>)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4d8:	4a17      	ldr	r2, [pc, #92]	; (800d538 <inc_lock+0x118>)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	4413      	add	r3, r2
 800d4e0:	330c      	adds	r3, #12
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d009      	beq.n	800d500 <inc_lock+0xe0>
 800d4ec:	4a12      	ldr	r2, [pc, #72]	; (800d538 <inc_lock+0x118>)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	011b      	lsls	r3, r3, #4
 800d4f2:	4413      	add	r3, r2
 800d4f4:	330c      	adds	r3, #12
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <inc_lock+0xe0>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	e015      	b.n	800d52c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d108      	bne.n	800d518 <inc_lock+0xf8>
 800d506:	4a0c      	ldr	r2, [pc, #48]	; (800d538 <inc_lock+0x118>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	4413      	add	r3, r2
 800d50e:	330c      	adds	r3, #12
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	3301      	adds	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	e001      	b.n	800d51c <inc_lock+0xfc>
 800d518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51c:	4906      	ldr	r1, [pc, #24]	; (800d538 <inc_lock+0x118>)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	440b      	add	r3, r1
 800d524:	330c      	adds	r3, #12
 800d526:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3301      	adds	r3, #1
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	200002d0 	.word	0x200002d0

0800d53c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3b01      	subs	r3, #1
 800d548:	607b      	str	r3, [r7, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d825      	bhi.n	800d59c <dec_lock+0x60>
		n = Files[i].ctr;
 800d550:	4a17      	ldr	r2, [pc, #92]	; (800d5b0 <dec_lock+0x74>)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	011b      	lsls	r3, r3, #4
 800d556:	4413      	add	r3, r2
 800d558:	330c      	adds	r3, #12
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d55e:	89fb      	ldrh	r3, [r7, #14]
 800d560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d564:	d101      	bne.n	800d56a <dec_lock+0x2e>
 800d566:	2300      	movs	r3, #0
 800d568:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d56a:	89fb      	ldrh	r3, [r7, #14]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <dec_lock+0x3a>
 800d570:	89fb      	ldrh	r3, [r7, #14]
 800d572:	3b01      	subs	r3, #1
 800d574:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d576:	4a0e      	ldr	r2, [pc, #56]	; (800d5b0 <dec_lock+0x74>)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4413      	add	r3, r2
 800d57e:	330c      	adds	r3, #12
 800d580:	89fa      	ldrh	r2, [r7, #14]
 800d582:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d584:	89fb      	ldrh	r3, [r7, #14]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d105      	bne.n	800d596 <dec_lock+0x5a>
 800d58a:	4a09      	ldr	r2, [pc, #36]	; (800d5b0 <dec_lock+0x74>)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	4413      	add	r3, r2
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	737b      	strb	r3, [r7, #13]
 800d59a:	e001      	b.n	800d5a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d59c:	2302      	movs	r3, #2
 800d59e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d5a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	200002d0 	.word	0x200002d0

0800d5b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d5bc:	2300      	movs	r3, #0
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	e010      	b.n	800d5e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d5c2:	4a0d      	ldr	r2, [pc, #52]	; (800d5f8 <clear_lock+0x44>)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	011b      	lsls	r3, r3, #4
 800d5c8:	4413      	add	r3, r2
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d105      	bne.n	800d5de <clear_lock+0x2a>
 800d5d2:	4a09      	ldr	r2, [pc, #36]	; (800d5f8 <clear_lock+0x44>)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	011b      	lsls	r3, r3, #4
 800d5d8:	4413      	add	r3, r2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d9eb      	bls.n	800d5c2 <clear_lock+0xe>
	}
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	200002d0 	.word	0x200002d0

0800d5fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	78db      	ldrb	r3, [r3, #3]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d034      	beq.n	800d67a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d614:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	7858      	ldrb	r0, [r3, #1]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d620:	2301      	movs	r3, #1
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	f7ff fd40 	bl	800d0a8 <disk_write>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d62e:	2301      	movs	r3, #1
 800d630:	73fb      	strb	r3, [r7, #15]
 800d632:	e022      	b.n	800d67a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	1ad2      	subs	r2, r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	429a      	cmp	r2, r3
 800d648:	d217      	bcs.n	800d67a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	789b      	ldrb	r3, [r3, #2]
 800d64e:	613b      	str	r3, [r7, #16]
 800d650:	e010      	b.n	800d674 <sync_window+0x78>
					wsect += fs->fsize;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	697a      	ldr	r2, [r7, #20]
 800d658:	4413      	add	r3, r2
 800d65a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7858      	ldrb	r0, [r3, #1]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d666:	2301      	movs	r3, #1
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	f7ff fd1d 	bl	800d0a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	3b01      	subs	r3, #1
 800d672:	613b      	str	r3, [r7, #16]
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d8eb      	bhi.n	800d652 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d01b      	beq.n	800d6d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff ffad 	bl	800d5fc <sync_window>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d113      	bne.n	800d6d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7858      	ldrb	r0, [r3, #1]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	f7ff fcd5 	bl	800d068 <disk_read>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d004      	beq.n	800d6ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
	...

0800d6e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ff87 	bl	800d5fc <sync_window>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d159      	bne.n	800d7ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d149      	bne.n	800d794 <sync_fs+0xb4>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	791b      	ldrb	r3, [r3, #4]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d145      	bne.n	800d794 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	899b      	ldrh	r3, [r3, #12]
 800d712:	461a      	mov	r2, r3
 800d714:	2100      	movs	r1, #0
 800d716:	f7ff fda8 	bl	800d26a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3338      	adds	r3, #56	; 0x38
 800d71e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d722:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff fd37 	bl	800d19a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	3338      	adds	r3, #56	; 0x38
 800d730:	4921      	ldr	r1, [pc, #132]	; (800d7b8 <sync_fs+0xd8>)
 800d732:	4618      	mov	r0, r3
 800d734:	f7ff fd4c 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3338      	adds	r3, #56	; 0x38
 800d73c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d740:	491e      	ldr	r1, [pc, #120]	; (800d7bc <sync_fs+0xdc>)
 800d742:	4618      	mov	r0, r3
 800d744:	f7ff fd44 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3338      	adds	r3, #56	; 0x38
 800d74c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7ff fd3a 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3338      	adds	r3, #56	; 0x38
 800d760:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7ff fd30 	bl	800d1d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7858      	ldrb	r0, [r3, #1]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d788:	2301      	movs	r3, #1
 800d78a:	f7ff fc8d 	bl	800d0a8 <disk_write>
			fs->fsi_flag = 0;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	785b      	ldrb	r3, [r3, #1]
 800d798:	2200      	movs	r2, #0
 800d79a:	2100      	movs	r1, #0
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff fca3 	bl	800d0e8 <disk_ioctl>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <sync_fs+0xcc>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	41615252 	.word	0x41615252
 800d7bc:	61417272 	.word	0x61417272

0800d7c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	3b02      	subs	r3, #2
 800d7ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	69db      	ldr	r3, [r3, #28]
 800d7d4:	3b02      	subs	r3, #2
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d301      	bcc.n	800d7e0 <clust2sect+0x20>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	e008      	b.n	800d7f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	895b      	ldrh	r3, [r3, #10]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	fb03 f202 	mul.w	r2, r3, r2
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f0:	4413      	add	r3, r2
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d904      	bls.n	800d81e <get_fat+0x20>
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	69db      	ldr	r3, [r3, #28]
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d302      	bcc.n	800d824 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d81e:	2301      	movs	r3, #1
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	e0bb      	b.n	800d99c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d824:	f04f 33ff 	mov.w	r3, #4294967295
 800d828:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b03      	cmp	r3, #3
 800d830:	f000 8083 	beq.w	800d93a <get_fat+0x13c>
 800d834:	2b03      	cmp	r3, #3
 800d836:	f300 80a7 	bgt.w	800d988 <get_fat+0x18a>
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d002      	beq.n	800d844 <get_fat+0x46>
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d056      	beq.n	800d8f0 <get_fat+0xf2>
 800d842:	e0a1      	b.n	800d988 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	085b      	lsrs	r3, r3, #1
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	4413      	add	r3, r2
 800d850:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	899b      	ldrh	r3, [r3, #12]
 800d85a:	4619      	mov	r1, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d862:	4413      	add	r3, r2
 800d864:	4619      	mov	r1, r3
 800d866:	6938      	ldr	r0, [r7, #16]
 800d868:	f7ff ff0c 	bl	800d684 <move_window>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f040 808d 	bne.w	800d98e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	60fa      	str	r2, [r7, #12]
 800d87a:	693a      	ldr	r2, [r7, #16]
 800d87c:	8992      	ldrh	r2, [r2, #12]
 800d87e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d882:	fb02 f201 	mul.w	r2, r2, r1
 800d886:	1a9b      	subs	r3, r3, r2
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	4413      	add	r3, r2
 800d88c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d890:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	899b      	ldrh	r3, [r3, #12]
 800d89a:	4619      	mov	r1, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f7ff feec 	bl	800d684 <move_window>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d16f      	bne.n	800d992 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	899b      	ldrh	r3, [r3, #12]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8be:	fb02 f201 	mul.w	r2, r2, r1
 800d8c2:	1a9b      	subs	r3, r3, r2
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	f003 0301 	and.w	r3, r3, #1
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <get_fat+0xe8>
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	091b      	lsrs	r3, r3, #4
 800d8e4:	e002      	b.n	800d8ec <get_fat+0xee>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8ec:	617b      	str	r3, [r7, #20]
			break;
 800d8ee:	e055      	b.n	800d99c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	899b      	ldrh	r3, [r3, #12]
 800d8f8:	085b      	lsrs	r3, r3, #1
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	fbb3 f3f1 	udiv	r3, r3, r1
 800d904:	4413      	add	r3, r2
 800d906:	4619      	mov	r1, r3
 800d908:	6938      	ldr	r0, [r7, #16]
 800d90a:	f7ff febb 	bl	800d684 <move_window>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d140      	bne.n	800d996 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	8992      	ldrh	r2, [r2, #12]
 800d922:	fbb3 f0f2 	udiv	r0, r3, r2
 800d926:	fb02 f200 	mul.w	r2, r2, r0
 800d92a:	1a9b      	subs	r3, r3, r2
 800d92c:	440b      	add	r3, r1
 800d92e:	4618      	mov	r0, r3
 800d930:	f7ff fbf8 	bl	800d124 <ld_word>
 800d934:	4603      	mov	r3, r0
 800d936:	617b      	str	r3, [r7, #20]
			break;
 800d938:	e030      	b.n	800d99c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	899b      	ldrh	r3, [r3, #12]
 800d942:	089b      	lsrs	r3, r3, #2
 800d944:	b29b      	uxth	r3, r3
 800d946:	4619      	mov	r1, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d94e:	4413      	add	r3, r2
 800d950:	4619      	mov	r1, r3
 800d952:	6938      	ldr	r0, [r7, #16]
 800d954:	f7ff fe96 	bl	800d684 <move_window>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d11d      	bne.n	800d99a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	8992      	ldrh	r2, [r2, #12]
 800d96c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d970:	fb02 f200 	mul.w	r2, r2, r0
 800d974:	1a9b      	subs	r3, r3, r2
 800d976:	440b      	add	r3, r1
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff fbeb 	bl	800d154 <ld_dword>
 800d97e:	4603      	mov	r3, r0
 800d980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d984:	617b      	str	r3, [r7, #20]
			break;
 800d986:	e009      	b.n	800d99c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d988:	2301      	movs	r3, #1
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e006      	b.n	800d99c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d98e:	bf00      	nop
 800d990:	e004      	b.n	800d99c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d992:	bf00      	nop
 800d994:	e002      	b.n	800d99c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d996:	bf00      	nop
 800d998:	e000      	b.n	800d99c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d99a:	bf00      	nop
		}
	}

	return val;
 800d99c:	697b      	ldr	r3, [r7, #20]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d9a6:	b590      	push	{r4, r7, lr}
 800d9a8:	b089      	sub	sp, #36	; 0x24
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	60f8      	str	r0, [r7, #12]
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	f240 8102 	bls.w	800dbc2 <put_fat+0x21c>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	f080 80fc 	bcs.w	800dbc2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	f000 80b6 	beq.w	800db40 <put_fat+0x19a>
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	f300 80fd 	bgt.w	800dbd4 <put_fat+0x22e>
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d003      	beq.n	800d9e6 <put_fat+0x40>
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	f000 8083 	beq.w	800daea <put_fat+0x144>
 800d9e4:	e0f6      	b.n	800dbd4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	61bb      	str	r3, [r7, #24]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	085b      	lsrs	r3, r3, #1
 800d9ee:	69ba      	ldr	r2, [r7, #24]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	899b      	ldrh	r3, [r3, #12]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	fbb3 f3f1 	udiv	r3, r3, r1
 800da04:	4413      	add	r3, r2
 800da06:	4619      	mov	r1, r3
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f7ff fe3b 	bl	800d684 <move_window>
 800da0e:	4603      	mov	r3, r0
 800da10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da12:	7ffb      	ldrb	r3, [r7, #31]
 800da14:	2b00      	cmp	r3, #0
 800da16:	f040 80d6 	bne.w	800dbc6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	61ba      	str	r2, [r7, #24]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	8992      	ldrh	r2, [r2, #12]
 800da2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800da2e:	fb02 f200 	mul.w	r2, r2, r0
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	440b      	add	r3, r1
 800da36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	f003 0301 	and.w	r3, r3, #1
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00d      	beq.n	800da5e <put_fat+0xb8>
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	b25b      	sxtb	r3, r3
 800da48:	f003 030f 	and.w	r3, r3, #15
 800da4c:	b25a      	sxtb	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	b2db      	uxtb	r3, r3
 800da52:	011b      	lsls	r3, r3, #4
 800da54:	b25b      	sxtb	r3, r3
 800da56:	4313      	orrs	r3, r2
 800da58:	b25b      	sxtb	r3, r3
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	e001      	b.n	800da62 <put_fat+0xbc>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	b2db      	uxtb	r3, r3
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2201      	movs	r2, #1
 800da6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	899b      	ldrh	r3, [r3, #12]
 800da74:	4619      	mov	r1, r3
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	fbb3 f3f1 	udiv	r3, r3, r1
 800da7c:	4413      	add	r3, r2
 800da7e:	4619      	mov	r1, r3
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f7ff fdff 	bl	800d684 <move_window>
 800da86:	4603      	mov	r3, r0
 800da88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da8a:	7ffb      	ldrb	r3, [r7, #31]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f040 809c 	bne.w	800dbca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	899b      	ldrh	r3, [r3, #12]
 800da9c:	461a      	mov	r2, r3
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	fbb3 f0f2 	udiv	r0, r3, r2
 800daa4:	fb02 f200 	mul.w	r2, r2, r0
 800daa8:	1a9b      	subs	r3, r3, r2
 800daaa:	440b      	add	r3, r1
 800daac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d003      	beq.n	800dac0 <put_fat+0x11a>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	091b      	lsrs	r3, r3, #4
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	e00e      	b.n	800dade <put_fat+0x138>
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	f023 030f 	bic.w	r3, r3, #15
 800daca:	b25a      	sxtb	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	0a1b      	lsrs	r3, r3, #8
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	f003 030f 	and.w	r3, r3, #15
 800dad6:	b25b      	sxtb	r3, r3
 800dad8:	4313      	orrs	r3, r2
 800dada:	b25b      	sxtb	r3, r3
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2201      	movs	r2, #1
 800dae6:	70da      	strb	r2, [r3, #3]
			break;
 800dae8:	e074      	b.n	800dbd4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	899b      	ldrh	r3, [r3, #12]
 800daf2:	085b      	lsrs	r3, r3, #1
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	4619      	mov	r1, r3
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	fbb3 f3f1 	udiv	r3, r3, r1
 800dafe:	4413      	add	r3, r2
 800db00:	4619      	mov	r1, r3
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7ff fdbe 	bl	800d684 <move_window>
 800db08:	4603      	mov	r3, r0
 800db0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db0c:	7ffb      	ldrb	r3, [r7, #31]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d15d      	bne.n	800dbce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	8992      	ldrh	r2, [r2, #12]
 800db20:	fbb3 f0f2 	udiv	r0, r3, r2
 800db24:	fb02 f200 	mul.w	r2, r2, r0
 800db28:	1a9b      	subs	r3, r3, r2
 800db2a:	440b      	add	r3, r1
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	b292      	uxth	r2, r2
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fb31 	bl	800d19a <st_word>
			fs->wflag = 1;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2201      	movs	r2, #1
 800db3c:	70da      	strb	r2, [r3, #3]
			break;
 800db3e:	e049      	b.n	800dbd4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	899b      	ldrh	r3, [r3, #12]
 800db48:	089b      	lsrs	r3, r3, #2
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	4619      	mov	r1, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	fbb3 f3f1 	udiv	r3, r3, r1
 800db54:	4413      	add	r3, r2
 800db56:	4619      	mov	r1, r3
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f7ff fd93 	bl	800d684 <move_window>
 800db5e:	4603      	mov	r3, r0
 800db60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db62:	7ffb      	ldrb	r3, [r7, #31]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d134      	bne.n	800dbd2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	8992      	ldrh	r2, [r2, #12]
 800db7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800db80:	fb02 f200 	mul.w	r2, r2, r0
 800db84:	1a9b      	subs	r3, r3, r2
 800db86:	440b      	add	r3, r1
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff fae3 	bl	800d154 <ld_dword>
 800db8e:	4603      	mov	r3, r0
 800db90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db94:	4323      	orrs	r3, r4
 800db96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	8992      	ldrh	r2, [r2, #12]
 800dba6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbaa:	fb02 f200 	mul.w	r2, r2, r0
 800dbae:	1a9b      	subs	r3, r3, r2
 800dbb0:	440b      	add	r3, r1
 800dbb2:	6879      	ldr	r1, [r7, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff fb0b 	bl	800d1d0 <st_dword>
			fs->wflag = 1;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	70da      	strb	r2, [r3, #3]
			break;
 800dbc0:	e008      	b.n	800dbd4 <put_fat+0x22e>
		}
	}
 800dbc2:	bf00      	nop
 800dbc4:	e006      	b.n	800dbd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dbc6:	bf00      	nop
 800dbc8:	e004      	b.n	800dbd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dbca:	bf00      	nop
 800dbcc:	e002      	b.n	800dbd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dbce:	bf00      	nop
 800dbd0:	e000      	b.n	800dbd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dbd2:	bf00      	nop
	return res;
 800dbd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3724      	adds	r7, #36	; 0x24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd90      	pop	{r4, r7, pc}

0800dbde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b088      	sub	sp, #32
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	60f8      	str	r0, [r7, #12]
 800dbe6:	60b9      	str	r1, [r7, #8]
 800dbe8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d904      	bls.n	800dc04 <remove_chain+0x26>
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d301      	bcc.n	800dc08 <remove_chain+0x2a>
 800dc04:	2302      	movs	r3, #2
 800dc06:	e04b      	b.n	800dca0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00c      	beq.n	800dc28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	69b8      	ldr	r0, [r7, #24]
 800dc16:	f7ff fec6 	bl	800d9a6 <put_fat>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dc1e:	7ffb      	ldrb	r3, [r7, #31]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <remove_chain+0x4a>
 800dc24:	7ffb      	ldrb	r3, [r7, #31]
 800dc26:	e03b      	b.n	800dca0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dc28:	68b9      	ldr	r1, [r7, #8]
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7ff fde7 	bl	800d7fe <get_fat>
 800dc30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d031      	beq.n	800dc9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d101      	bne.n	800dc42 <remove_chain+0x64>
 800dc3e:	2302      	movs	r3, #2
 800dc40:	e02e      	b.n	800dca0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc48:	d101      	bne.n	800dc4e <remove_chain+0x70>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e028      	b.n	800dca0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dc4e:	2200      	movs	r2, #0
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	69b8      	ldr	r0, [r7, #24]
 800dc54:	f7ff fea7 	bl	800d9a6 <put_fat>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dc5c:	7ffb      	ldrb	r3, [r7, #31]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <remove_chain+0x88>
 800dc62:	7ffb      	ldrb	r3, [r7, #31]
 800dc64:	e01c      	b.n	800dca0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	699a      	ldr	r2, [r3, #24]
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	3b02      	subs	r3, #2
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d20b      	bcs.n	800dc8c <remove_chain+0xae>
			fs->free_clst++;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	791b      	ldrb	r3, [r3, #4]
 800dc82:	f043 0301 	orr.w	r3, r3, #1
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	69db      	ldr	r3, [r3, #28]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d3c6      	bcc.n	800dc28 <remove_chain+0x4a>
 800dc9a:	e000      	b.n	800dc9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3720      	adds	r7, #32
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10d      	bne.n	800dcda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d004      	beq.n	800dcd4 <create_chain+0x2c>
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d31b      	bcc.n	800dd0c <create_chain+0x64>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	61bb      	str	r3, [r7, #24]
 800dcd8:	e018      	b.n	800dd0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff fd8e 	bl	800d7fe <get_fat>
 800dce2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d801      	bhi.n	800dcee <create_chain+0x46>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e070      	b.n	800ddd0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf4:	d101      	bne.n	800dcfa <create_chain+0x52>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	e06a      	b.n	800ddd0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	69db      	ldr	r3, [r3, #28]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d201      	bcs.n	800dd08 <create_chain+0x60>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	e063      	b.n	800ddd0 <create_chain+0x128>
		scl = clst;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	3301      	adds	r3, #1
 800dd14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	69fa      	ldr	r2, [r7, #28]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d307      	bcc.n	800dd30 <create_chain+0x88>
				ncl = 2;
 800dd20:	2302      	movs	r3, #2
 800dd22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dd24:	69fa      	ldr	r2, [r7, #28]
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d901      	bls.n	800dd30 <create_chain+0x88>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	e04f      	b.n	800ddd0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dd30:	69f9      	ldr	r1, [r7, #28]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fd63 	bl	800d7fe <get_fat>
 800dd38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00e      	beq.n	800dd5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d003      	beq.n	800dd4e <create_chain+0xa6>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d101      	bne.n	800dd52 <create_chain+0xaa>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	e03e      	b.n	800ddd0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dd52:	69fa      	ldr	r2, [r7, #28]
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d1da      	bne.n	800dd10 <create_chain+0x68>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e038      	b.n	800ddd0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dd5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dd60:	f04f 32ff 	mov.w	r2, #4294967295
 800dd64:	69f9      	ldr	r1, [r7, #28]
 800dd66:	6938      	ldr	r0, [r7, #16]
 800dd68:	f7ff fe1d 	bl	800d9a6 <put_fat>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <create_chain+0xe2>
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d006      	beq.n	800dd8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd7c:	69fa      	ldr	r2, [r7, #28]
 800dd7e:	6839      	ldr	r1, [r7, #0]
 800dd80:	6938      	ldr	r0, [r7, #16]
 800dd82:	f7ff fe10 	bl	800d9a6 <put_fat>
 800dd86:	4603      	mov	r3, r0
 800dd88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd8a:	7dfb      	ldrb	r3, [r7, #23]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d116      	bne.n	800ddbe <create_chain+0x116>
		fs->last_clst = ncl;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	69fa      	ldr	r2, [r7, #28]
 800dd94:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	699a      	ldr	r2, [r3, #24]
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	3b02      	subs	r3, #2
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d804      	bhi.n	800ddae <create_chain+0x106>
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	1e5a      	subs	r2, r3, #1
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	791b      	ldrb	r3, [r3, #4]
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	711a      	strb	r2, [r3, #4]
 800ddbc:	e007      	b.n	800ddce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d102      	bne.n	800ddca <create_chain+0x122>
 800ddc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc8:	e000      	b.n	800ddcc <create_chain+0x124>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ddce:	69fb      	ldr	r3, [r7, #28]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3720      	adds	r7, #32
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	3304      	adds	r3, #4
 800ddee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	899b      	ldrh	r3, [r3, #12]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	8952      	ldrh	r2, [r2, #10]
 800de00:	fbb3 f3f2 	udiv	r3, r3, r2
 800de04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	1d1a      	adds	r2, r3, #4
 800de0a:	613a      	str	r2, [r7, #16]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <clmt_clust+0x42>
 800de16:	2300      	movs	r3, #0
 800de18:	e010      	b.n	800de3c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d307      	bcc.n	800de32 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	617b      	str	r3, [r7, #20]
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3304      	adds	r3, #4
 800de2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800de30:	e7e9      	b.n	800de06 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800de32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	4413      	add	r3, r2
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	371c      	adds	r7, #28
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de5e:	d204      	bcs.n	800de6a <dir_sdi+0x22>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	f003 031f 	and.w	r3, r3, #31
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <dir_sdi+0x26>
		return FR_INT_ERR;
 800de6a:	2302      	movs	r3, #2
 800de6c:	e071      	b.n	800df52 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d106      	bne.n	800de8e <dir_sdi+0x46>
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d902      	bls.n	800de8e <dir_sdi+0x46>
		clst = fs->dirbase;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10c      	bne.n	800deae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	095b      	lsrs	r3, r3, #5
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	8912      	ldrh	r2, [r2, #8]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d301      	bcc.n	800dea4 <dir_sdi+0x5c>
 800dea0:	2302      	movs	r3, #2
 800dea2:	e056      	b.n	800df52 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	61da      	str	r2, [r3, #28]
 800deac:	e02d      	b.n	800df0a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	895b      	ldrh	r3, [r3, #10]
 800deb2:	461a      	mov	r2, r3
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	899b      	ldrh	r3, [r3, #12]
 800deb8:	fb03 f302 	mul.w	r3, r3, r2
 800debc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800debe:	e019      	b.n	800def4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6979      	ldr	r1, [r7, #20]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7ff fc9a 	bl	800d7fe <get_fat>
 800deca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded2:	d101      	bne.n	800ded8 <dir_sdi+0x90>
 800ded4:	2301      	movs	r3, #1
 800ded6:	e03c      	b.n	800df52 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d904      	bls.n	800dee8 <dir_sdi+0xa0>
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	697a      	ldr	r2, [r7, #20]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d301      	bcc.n	800deec <dir_sdi+0xa4>
 800dee8:	2302      	movs	r3, #2
 800deea:	e032      	b.n	800df52 <dir_sdi+0x10a>
			ofs -= csz;
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	429a      	cmp	r2, r3
 800defa:	d2e1      	bcs.n	800dec0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800defc:	6979      	ldr	r1, [r7, #20]
 800defe:	6938      	ldr	r0, [r7, #16]
 800df00:	f7ff fc5e 	bl	800d7c0 <clust2sect>
 800df04:	4602      	mov	r2, r0
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d101      	bne.n	800df1c <dir_sdi+0xd4>
 800df18:	2302      	movs	r3, #2
 800df1a:	e01a      	b.n	800df52 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	69da      	ldr	r2, [r3, #28]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	899b      	ldrh	r3, [r3, #12]
 800df24:	4619      	mov	r1, r3
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	fbb3 f3f1 	udiv	r3, r3, r1
 800df2c:	441a      	add	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	899b      	ldrh	r3, [r3, #12]
 800df3c:	461a      	mov	r2, r3
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	fbb3 f0f2 	udiv	r0, r3, r2
 800df44:	fb02 f200 	mul.w	r2, r2, r0
 800df48:	1a9b      	subs	r3, r3, r2
 800df4a:	18ca      	adds	r2, r1, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b086      	sub	sp, #24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	695b      	ldr	r3, [r3, #20]
 800df6e:	3320      	adds	r3, #32
 800df70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <dir_next+0x28>
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df80:	d301      	bcc.n	800df86 <dir_next+0x2c>
 800df82:	2304      	movs	r3, #4
 800df84:	e0bb      	b.n	800e0fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	899b      	ldrh	r3, [r3, #12]
 800df8a:	461a      	mov	r2, r3
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df92:	fb02 f201 	mul.w	r2, r2, r1
 800df96:	1a9b      	subs	r3, r3, r2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f040 809d 	bne.w	800e0d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	69db      	ldr	r3, [r3, #28]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10b      	bne.n	800dfc8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	095b      	lsrs	r3, r3, #5
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	8912      	ldrh	r2, [r2, #8]
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	f0c0 808d 	bcc.w	800e0d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	61da      	str	r2, [r3, #28]
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	e09a      	b.n	800e0fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	899b      	ldrh	r3, [r3, #12]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	8952      	ldrh	r2, [r2, #10]
 800dfd8:	3a01      	subs	r2, #1
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d17b      	bne.n	800e0d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7ff fc08 	bl	800d7fe <get_fat>
 800dfee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d801      	bhi.n	800dffa <dir_next+0xa0>
 800dff6:	2302      	movs	r3, #2
 800dff8:	e081      	b.n	800e0fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e000:	d101      	bne.n	800e006 <dir_next+0xac>
 800e002:	2301      	movs	r3, #1
 800e004:	e07b      	b.n	800e0fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d359      	bcc.n	800e0c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	61da      	str	r2, [r3, #28]
 800e01c:	2304      	movs	r3, #4
 800e01e:	e06e      	b.n	800e0fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	4619      	mov	r1, r3
 800e028:	4610      	mov	r0, r2
 800e02a:	f7ff fe3d 	bl	800dca8 <create_chain>
 800e02e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <dir_next+0xe0>
 800e036:	2307      	movs	r3, #7
 800e038:	e061      	b.n	800e0fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d101      	bne.n	800e044 <dir_next+0xea>
 800e040:	2302      	movs	r3, #2
 800e042:	e05c      	b.n	800e0fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04a:	d101      	bne.n	800e050 <dir_next+0xf6>
 800e04c:	2301      	movs	r3, #1
 800e04e:	e056      	b.n	800e0fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7ff fad3 	bl	800d5fc <sync_window>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <dir_next+0x106>
 800e05c:	2301      	movs	r3, #1
 800e05e:	e04e      	b.n	800e0fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	899b      	ldrh	r3, [r3, #12]
 800e06a:	461a      	mov	r2, r3
 800e06c:	2100      	movs	r1, #0
 800e06e:	f7ff f8fc 	bl	800d26a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e072:	2300      	movs	r3, #0
 800e074:	613b      	str	r3, [r7, #16]
 800e076:	6979      	ldr	r1, [r7, #20]
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7ff fba1 	bl	800d7c0 <clust2sect>
 800e07e:	4602      	mov	r2, r0
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	635a      	str	r2, [r3, #52]	; 0x34
 800e084:	e012      	b.n	800e0ac <dir_next+0x152>
						fs->wflag = 1;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2201      	movs	r2, #1
 800e08a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f7ff fab5 	bl	800d5fc <sync_window>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <dir_next+0x142>
 800e098:	2301      	movs	r3, #1
 800e09a:	e030      	b.n	800e0fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	635a      	str	r2, [r3, #52]	; 0x34
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	895b      	ldrh	r3, [r3, #10]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d3e6      	bcc.n	800e086 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	1ad2      	subs	r2, r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e0ca:	6979      	ldr	r1, [r7, #20]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7ff fb77 	bl	800d7c0 <clust2sect>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	899b      	ldrh	r3, [r3, #12]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0f0:	fb02 f200 	mul.w	r2, r2, r0
 800e0f4:	1a9b      	subs	r3, r3, r2
 800e0f6:	18ca      	adds	r2, r1, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b086      	sub	sp, #24
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e116:	2100      	movs	r1, #0
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff fe95 	bl	800de48 <dir_sdi>
 800e11e:	4603      	mov	r3, r0
 800e120:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d12b      	bne.n	800e180 <dir_alloc+0x7a>
		n = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	4619      	mov	r1, r3
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7ff faa6 	bl	800d684 <move_window>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d11d      	bne.n	800e17e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2be5      	cmp	r3, #229	; 0xe5
 800e14a:	d004      	beq.n	800e156 <dir_alloc+0x50>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a1b      	ldr	r3, [r3, #32]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d107      	bne.n	800e166 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	3301      	adds	r3, #1
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	429a      	cmp	r2, r3
 800e162:	d102      	bne.n	800e16a <dir_alloc+0x64>
 800e164:	e00c      	b.n	800e180 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e166:	2300      	movs	r3, #0
 800e168:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e16a:	2101      	movs	r1, #1
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fef4 	bl	800df5a <dir_next>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d0d7      	beq.n	800e12c <dir_alloc+0x26>
 800e17c:	e000      	b.n	800e180 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e17e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e180:	7dfb      	ldrb	r3, [r7, #23]
 800e182:	2b04      	cmp	r3, #4
 800e184:	d101      	bne.n	800e18a <dir_alloc+0x84>
 800e186:	2307      	movs	r3, #7
 800e188:	75fb      	strb	r3, [r7, #23]
	return res;
 800e18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	331a      	adds	r3, #26
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe ffbe 	bl	800d124 <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	2b03      	cmp	r3, #3
 800e1b2:	d109      	bne.n	800e1c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	3314      	adds	r3, #20
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe ffb3 	bl	800d124 <ld_word>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	041b      	lsls	r3, r3, #16
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b084      	sub	sp, #16
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	60f8      	str	r0, [r7, #12]
 800e1da:	60b9      	str	r1, [r7, #8]
 800e1dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	331a      	adds	r3, #26
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe ffd6 	bl	800d19a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d109      	bne.n	800e20a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	f103 0214 	add.w	r2, r3, #20
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	0c1b      	lsrs	r3, r3, #16
 800e200:	b29b      	uxth	r3, r3
 800e202:	4619      	mov	r1, r3
 800e204:	4610      	mov	r0, r2
 800e206:	f7fe ffc8 	bl	800d19a <st_word>
	}
}
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
	...

0800e214 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e214:	b590      	push	{r4, r7, lr}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	331a      	adds	r3, #26
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe ff7e 	bl	800d124 <ld_word>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <cmp_lfn+0x1e>
 800e22e:	2300      	movs	r3, #0
 800e230:	e059      	b.n	800e2e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e23a:	1e5a      	subs	r2, r3, #1
 800e23c:	4613      	mov	r3, r2
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e248:	2301      	movs	r3, #1
 800e24a:	81fb      	strh	r3, [r7, #14]
 800e24c:	2300      	movs	r3, #0
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	e033      	b.n	800e2ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e252:	4a27      	ldr	r2, [pc, #156]	; (800e2f0 <cmp_lfn+0xdc>)
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	4413      	add	r3, r2
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	4413      	add	r3, r2
 800e260:	4618      	mov	r0, r3
 800e262:	f7fe ff5f 	bl	800d124 <ld_word>
 800e266:	4603      	mov	r3, r0
 800e268:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e26a:	89fb      	ldrh	r3, [r7, #14]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01a      	beq.n	800e2a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2bfe      	cmp	r3, #254	; 0xfe
 800e274:	d812      	bhi.n	800e29c <cmp_lfn+0x88>
 800e276:	89bb      	ldrh	r3, [r7, #12]
 800e278:	4618      	mov	r0, r3
 800e27a:	f001 ff9d 	bl	80101b8 <ff_wtoupper>
 800e27e:	4603      	mov	r3, r0
 800e280:	461c      	mov	r4, r3
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	1c5a      	adds	r2, r3, #1
 800e286:	617a      	str	r2, [r7, #20]
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	4413      	add	r3, r2
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	4618      	mov	r0, r3
 800e292:	f001 ff91 	bl	80101b8 <ff_wtoupper>
 800e296:	4603      	mov	r3, r0
 800e298:	429c      	cmp	r4, r3
 800e29a:	d001      	beq.n	800e2a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e29c:	2300      	movs	r3, #0
 800e29e:	e022      	b.n	800e2e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e2a0:	89bb      	ldrh	r3, [r7, #12]
 800e2a2:	81fb      	strh	r3, [r7, #14]
 800e2a4:	e006      	b.n	800e2b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e2a6:	89bb      	ldrh	r3, [r7, #12]
 800e2a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d001      	beq.n	800e2b4 <cmp_lfn+0xa0>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	e018      	b.n	800e2e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	2b0c      	cmp	r3, #12
 800e2be:	d9c8      	bls.n	800e252 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00b      	beq.n	800e2e4 <cmp_lfn+0xd0>
 800e2cc:	89fb      	ldrh	r3, [r7, #14]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d008      	beq.n	800e2e4 <cmp_lfn+0xd0>
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	4413      	add	r3, r2
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <cmp_lfn+0xd0>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e000      	b.n	800e2e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e2e4:	2301      	movs	r3, #1
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	371c      	adds	r7, #28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd90      	pop	{r4, r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	08016f24 	.word	0x08016f24

0800e2f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	4611      	mov	r1, r2
 800e300:	461a      	mov	r2, r3
 800e302:	460b      	mov	r3, r1
 800e304:	71fb      	strb	r3, [r7, #7]
 800e306:	4613      	mov	r3, r2
 800e308:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	330d      	adds	r3, #13
 800e30e:	79ba      	ldrb	r2, [r7, #6]
 800e310:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	330b      	adds	r3, #11
 800e316:	220f      	movs	r2, #15
 800e318:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	330c      	adds	r3, #12
 800e31e:	2200      	movs	r2, #0
 800e320:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	331a      	adds	r3, #26
 800e326:	2100      	movs	r1, #0
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe ff36 	bl	800d19a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	1e5a      	subs	r2, r3, #1
 800e332:	4613      	mov	r3, r2
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4413      	add	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	82fb      	strh	r3, [r7, #22]
 800e342:	2300      	movs	r3, #0
 800e344:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e346:	8afb      	ldrh	r3, [r7, #22]
 800e348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d007      	beq.n	800e360 <put_lfn+0x6c>
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	61fa      	str	r2, [r7, #28]
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e360:	4a17      	ldr	r2, [pc, #92]	; (800e3c0 <put_lfn+0xcc>)
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	4413      	add	r3, r2
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	461a      	mov	r2, r3
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	4413      	add	r3, r2
 800e36e:	8afa      	ldrh	r2, [r7, #22]
 800e370:	4611      	mov	r1, r2
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe ff11 	bl	800d19a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e378:	8afb      	ldrh	r3, [r7, #22]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d102      	bne.n	800e384 <put_lfn+0x90>
 800e37e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e382:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	3301      	adds	r3, #1
 800e388:	61bb      	str	r3, [r7, #24]
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	2b0c      	cmp	r3, #12
 800e38e:	d9da      	bls.n	800e346 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e390:	8afb      	ldrh	r3, [r7, #22]
 800e392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e396:	4293      	cmp	r3, r2
 800e398:	d006      	beq.n	800e3a8 <put_lfn+0xb4>
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d103      	bne.n	800e3b0 <put_lfn+0xbc>
 800e3a8:	79fb      	ldrb	r3, [r7, #7]
 800e3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	79fa      	ldrb	r2, [r7, #7]
 800e3b4:	701a      	strb	r2, [r3, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	3720      	adds	r7, #32
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	08016f24 	.word	0x08016f24

0800e3c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08c      	sub	sp, #48	; 0x30
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e3d2:	220b      	movs	r2, #11
 800e3d4:	68b9      	ldr	r1, [r7, #8]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7fe ff26 	bl	800d228 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	2b05      	cmp	r3, #5
 800e3e0:	d92b      	bls.n	800e43a <gen_numname+0x76>
		sr = seq;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e3e6:	e022      	b.n	800e42e <gen_numname+0x6a>
			wc = *lfn++;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	1c9a      	adds	r2, r3, #2
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3f6:	e017      	b.n	800e428 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	005a      	lsls	r2, r3, #1
 800e3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	4413      	add	r3, r2
 800e404:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e408:	085b      	lsrs	r3, r3, #1
 800e40a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d005      	beq.n	800e422 <gen_numname+0x5e>
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e41c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e420:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	3301      	adds	r3, #1
 800e426:	62bb      	str	r3, [r7, #40]	; 0x28
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	2b0f      	cmp	r3, #15
 800e42c:	d9e4      	bls.n	800e3f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	881b      	ldrh	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1d8      	bne.n	800e3e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e43a:	2307      	movs	r3, #7
 800e43c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	b2db      	uxtb	r3, r3
 800e442:	f003 030f 	and.w	r3, r3, #15
 800e446:	b2db      	uxtb	r3, r3
 800e448:	3330      	adds	r3, #48	; 0x30
 800e44a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e44e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e452:	2b39      	cmp	r3, #57	; 0x39
 800e454:	d904      	bls.n	800e460 <gen_numname+0x9c>
 800e456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e45a:	3307      	adds	r3, #7
 800e45c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	1e5a      	subs	r2, r3, #1
 800e464:	62ba      	str	r2, [r7, #40]	; 0x28
 800e466:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e46a:	4413      	add	r3, r2
 800e46c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e470:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	091b      	lsrs	r3, r3, #4
 800e478:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1de      	bne.n	800e43e <gen_numname+0x7a>
	ns[i] = '~';
 800e480:	f107 0214 	add.w	r2, r7, #20
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	4413      	add	r3, r2
 800e488:	227e      	movs	r2, #126	; 0x7e
 800e48a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e48c:	2300      	movs	r3, #0
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
 800e490:	e002      	b.n	800e498 <gen_numname+0xd4>
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	3301      	adds	r3, #1
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
 800e498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d205      	bcs.n	800e4ac <gen_numname+0xe8>
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	4413      	add	r3, r2
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b20      	cmp	r3, #32
 800e4aa:	d1f2      	bne.n	800e492 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	2b07      	cmp	r3, #7
 800e4b0:	d808      	bhi.n	800e4c4 <gen_numname+0x100>
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	62ba      	str	r2, [r7, #40]	; 0x28
 800e4b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e4bc:	4413      	add	r3, r2
 800e4be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e4c2:	e000      	b.n	800e4c6 <gen_numname+0x102>
 800e4c4:	2120      	movs	r1, #32
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	627a      	str	r2, [r7, #36]	; 0x24
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	460a      	mov	r2, r1
 800e4d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	2b07      	cmp	r3, #7
 800e4d8:	d9e8      	bls.n	800e4ac <gen_numname+0xe8>
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	3730      	adds	r7, #48	; 0x30
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e4f0:	230b      	movs	r3, #11
 800e4f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	0852      	lsrs	r2, r2, #1
 800e4fa:	01db      	lsls	r3, r3, #7
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	1c59      	adds	r1, r3, #1
 800e504:	6079      	str	r1, [r7, #4]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	4413      	add	r3, r2
 800e50a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	3b01      	subs	r3, #1
 800e510:	60bb      	str	r3, [r7, #8]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1ed      	bne.n	800e4f4 <sum_sfn+0x10>
	return sum;
 800e518:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b086      	sub	sp, #24
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e534:	2100      	movs	r1, #0
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff fc86 	bl	800de48 <dir_sdi>
 800e53c:	4603      	mov	r3, r0
 800e53e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e540:	7dfb      	ldrb	r3, [r7, #23]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <dir_find+0x24>
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	e0a9      	b.n	800e69e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e54a:	23ff      	movs	r3, #255	; 0xff
 800e54c:	753b      	strb	r3, [r7, #20]
 800e54e:	7d3b      	ldrb	r3, [r7, #20]
 800e550:	757b      	strb	r3, [r7, #21]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f04f 32ff 	mov.w	r2, #4294967295
 800e558:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	69db      	ldr	r3, [r3, #28]
 800e55e:	4619      	mov	r1, r3
 800e560:	6938      	ldr	r0, [r7, #16]
 800e562:	f7ff f88f 	bl	800d684 <move_window>
 800e566:	4603      	mov	r3, r0
 800e568:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f040 8090 	bne.w	800e692 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e57a:	7dbb      	ldrb	r3, [r7, #22]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <dir_find+0x60>
 800e580:	2304      	movs	r3, #4
 800e582:	75fb      	strb	r3, [r7, #23]
 800e584:	e08a      	b.n	800e69c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a1b      	ldr	r3, [r3, #32]
 800e58a:	330b      	adds	r3, #11
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e592:	73fb      	strb	r3, [r7, #15]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	7bfa      	ldrb	r2, [r7, #15]
 800e598:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e59a:	7dbb      	ldrb	r3, [r7, #22]
 800e59c:	2be5      	cmp	r3, #229	; 0xe5
 800e59e:	d007      	beq.n	800e5b0 <dir_find+0x8a>
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	f003 0308 	and.w	r3, r3, #8
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d009      	beq.n	800e5be <dir_find+0x98>
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	2b0f      	cmp	r3, #15
 800e5ae:	d006      	beq.n	800e5be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5b0:	23ff      	movs	r3, #255	; 0xff
 800e5b2:	757b      	strb	r3, [r7, #21]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ba:	631a      	str	r2, [r3, #48]	; 0x30
 800e5bc:	e05e      	b.n	800e67c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	2b0f      	cmp	r3, #15
 800e5c2:	d136      	bne.n	800e632 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d154      	bne.n	800e67c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e5d2:	7dbb      	ldrb	r3, [r7, #22]
 800e5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00d      	beq.n	800e5f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	7b5b      	ldrb	r3, [r3, #13]
 800e5e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e5e4:	7dbb      	ldrb	r3, [r7, #22]
 800e5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5ea:	75bb      	strb	r3, [r7, #22]
 800e5ec:	7dbb      	ldrb	r3, [r7, #22]
 800e5ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	695a      	ldr	r2, [r3, #20]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e5f8:	7dba      	ldrb	r2, [r7, #22]
 800e5fa:	7d7b      	ldrb	r3, [r7, #21]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d115      	bne.n	800e62c <dir_find+0x106>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a1b      	ldr	r3, [r3, #32]
 800e604:	330d      	adds	r3, #13
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	7d3a      	ldrb	r2, [r7, #20]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d10e      	bne.n	800e62c <dir_find+0x106>
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	691a      	ldr	r2, [r3, #16]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a1b      	ldr	r3, [r3, #32]
 800e616:	4619      	mov	r1, r3
 800e618:	4610      	mov	r0, r2
 800e61a:	f7ff fdfb 	bl	800e214 <cmp_lfn>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d003      	beq.n	800e62c <dir_find+0x106>
 800e624:	7d7b      	ldrb	r3, [r7, #21]
 800e626:	3b01      	subs	r3, #1
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	e000      	b.n	800e62e <dir_find+0x108>
 800e62c:	23ff      	movs	r3, #255	; 0xff
 800e62e:	757b      	strb	r3, [r7, #21]
 800e630:	e024      	b.n	800e67c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e632:	7d7b      	ldrb	r3, [r7, #21]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d109      	bne.n	800e64c <dir_find+0x126>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a1b      	ldr	r3, [r3, #32]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff ff51 	bl	800e4e4 <sum_sfn>
 800e642:	4603      	mov	r3, r0
 800e644:	461a      	mov	r2, r3
 800e646:	7d3b      	ldrb	r3, [r7, #20]
 800e648:	4293      	cmp	r3, r2
 800e64a:	d024      	beq.n	800e696 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10a      	bne.n	800e670 <dir_find+0x14a>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a18      	ldr	r0, [r3, #32]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3324      	adds	r3, #36	; 0x24
 800e662:	220b      	movs	r2, #11
 800e664:	4619      	mov	r1, r3
 800e666:	f7fe fe1b 	bl	800d2a0 <mem_cmp>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d014      	beq.n	800e69a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e670:	23ff      	movs	r3, #255	; 0xff
 800e672:	757b      	strb	r3, [r7, #21]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f04f 32ff 	mov.w	r2, #4294967295
 800e67a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff fc6b 	bl	800df5a <dir_next>
 800e684:	4603      	mov	r3, r0
 800e686:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e688:	7dfb      	ldrb	r3, [r7, #23]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f43f af65 	beq.w	800e55a <dir_find+0x34>
 800e690:	e004      	b.n	800e69c <dir_find+0x176>
		if (res != FR_OK) break;
 800e692:	bf00      	nop
 800e694:	e002      	b.n	800e69c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e696:	bf00      	nop
 800e698:	e000      	b.n	800e69c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e69a:	bf00      	nop

	return res;
 800e69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08c      	sub	sp, #48	; 0x30
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <dir_register+0x20>
 800e6c4:	2306      	movs	r3, #6
 800e6c6:	e0e0      	b.n	800e88a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e6cc:	e002      	b.n	800e6d4 <dir_register+0x2c>
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	691a      	ldr	r2, [r3, #16]
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	4413      	add	r3, r2
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1f4      	bne.n	800e6ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e6ea:	f107 030c 	add.w	r3, r7, #12
 800e6ee:	220c      	movs	r2, #12
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe fd99 	bl	800d228 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	f003 0301 	and.w	r3, r3, #1
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d032      	beq.n	800e766 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2240      	movs	r2, #64	; 0x40
 800e704:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e708:	2301      	movs	r3, #1
 800e70a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e70c:	e016      	b.n	800e73c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	691a      	ldr	r2, [r3, #16]
 800e718:	f107 010c 	add.w	r1, r7, #12
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	f7ff fe51 	bl	800e3c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff feff 	bl	800e526 <dir_find>
 800e728:	4603      	mov	r3, r0
 800e72a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e72e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e732:	2b00      	cmp	r3, #0
 800e734:	d106      	bne.n	800e744 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	3301      	adds	r3, #1
 800e73a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	2b63      	cmp	r3, #99	; 0x63
 800e740:	d9e5      	bls.n	800e70e <dir_register+0x66>
 800e742:	e000      	b.n	800e746 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e744:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e748:	2b64      	cmp	r3, #100	; 0x64
 800e74a:	d101      	bne.n	800e750 <dir_register+0xa8>
 800e74c:	2307      	movs	r3, #7
 800e74e:	e09c      	b.n	800e88a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e754:	2b04      	cmp	r3, #4
 800e756:	d002      	beq.n	800e75e <dir_register+0xb6>
 800e758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e75c:	e095      	b.n	800e88a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e75e:	7dfa      	ldrb	r2, [r7, #23]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e766:	7dfb      	ldrb	r3, [r7, #23]
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d007      	beq.n	800e780 <dir_register+0xd8>
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	330c      	adds	r3, #12
 800e774:	4a47      	ldr	r2, [pc, #284]	; (800e894 <dir_register+0x1ec>)
 800e776:	fba2 2303 	umull	r2, r3, r2, r3
 800e77a:	089b      	lsrs	r3, r3, #2
 800e77c:	3301      	adds	r3, #1
 800e77e:	e000      	b.n	800e782 <dir_register+0xda>
 800e780:	2301      	movs	r3, #1
 800e782:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e784:	6a39      	ldr	r1, [r7, #32]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff fcbd 	bl	800e106 <dir_alloc>
 800e78c:	4603      	mov	r3, r0
 800e78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e796:	2b00      	cmp	r3, #0
 800e798:	d148      	bne.n	800e82c <dir_register+0x184>
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	623b      	str	r3, [r7, #32]
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d042      	beq.n	800e82c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	695a      	ldr	r2, [r3, #20]
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	015b      	lsls	r3, r3, #5
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff fb48 	bl	800de48 <dir_sdi>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e7be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d132      	bne.n	800e82c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	3324      	adds	r3, #36	; 0x24
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff fe8a 	bl	800e4e4 <sum_sfn>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	69db      	ldr	r3, [r3, #28]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	69f8      	ldr	r0, [r7, #28]
 800e7dc:	f7fe ff52 	bl	800d684 <move_window>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d11d      	bne.n	800e82a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	6918      	ldr	r0, [r3, #16]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a19      	ldr	r1, [r3, #32]
 800e7f6:	6a3b      	ldr	r3, [r7, #32]
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	7efb      	ldrb	r3, [r7, #27]
 800e7fc:	f7ff fd7a 	bl	800e2f4 <put_lfn>
				fs->wflag = 1;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	2201      	movs	r2, #1
 800e804:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e806:	2100      	movs	r1, #0
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff fba6 	bl	800df5a <dir_next>
 800e80e:	4603      	mov	r3, r0
 800e810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d107      	bne.n	800e82c <dir_register+0x184>
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	3b01      	subs	r3, #1
 800e820:	623b      	str	r3, [r7, #32]
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1d5      	bne.n	800e7d4 <dir_register+0x12c>
 800e828:	e000      	b.n	800e82c <dir_register+0x184>
				if (res != FR_OK) break;
 800e82a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e82c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e830:	2b00      	cmp	r3, #0
 800e832:	d128      	bne.n	800e886 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	69db      	ldr	r3, [r3, #28]
 800e838:	4619      	mov	r1, r3
 800e83a:	69f8      	ldr	r0, [r7, #28]
 800e83c:	f7fe ff22 	bl	800d684 <move_window>
 800e840:	4603      	mov	r3, r0
 800e842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d11b      	bne.n	800e886 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	2220      	movs	r2, #32
 800e854:	2100      	movs	r1, #0
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fd07 	bl	800d26a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a18      	ldr	r0, [r3, #32]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3324      	adds	r3, #36	; 0x24
 800e864:	220b      	movs	r2, #11
 800e866:	4619      	mov	r1, r3
 800e868:	f7fe fcde 	bl	800d228 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	330c      	adds	r3, #12
 800e878:	f002 0218 	and.w	r2, r2, #24
 800e87c:	b2d2      	uxtb	r2, r2
 800e87e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	2201      	movs	r2, #1
 800e884:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3730      	adds	r7, #48	; 0x30
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	4ec4ec4f 	.word	0x4ec4ec4f

0800e898 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08a      	sub	sp, #40	; 0x28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	613b      	str	r3, [r7, #16]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	1c5a      	adds	r2, r3, #1
 800e8bc:	61ba      	str	r2, [r7, #24]
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c8:	2b1f      	cmp	r3, #31
 800e8ca:	d940      	bls.n	800e94e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ce:	2b2f      	cmp	r3, #47	; 0x2f
 800e8d0:	d006      	beq.n	800e8e0 <create_name+0x48>
 800e8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e8d6:	d110      	bne.n	800e8fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e8d8:	e002      	b.n	800e8e0 <create_name+0x48>
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	61bb      	str	r3, [r7, #24]
 800e8e0:	693a      	ldr	r2, [r7, #16]
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	2b2f      	cmp	r3, #47	; 0x2f
 800e8ea:	d0f6      	beq.n	800e8da <create_name+0x42>
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800e8f6:	d0f0      	beq.n	800e8da <create_name+0x42>
			break;
 800e8f8:	e02a      	b.n	800e950 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2bfe      	cmp	r3, #254	; 0xfe
 800e8fe:	d901      	bls.n	800e904 <create_name+0x6c>
 800e900:	2306      	movs	r3, #6
 800e902:	e177      	b.n	800ebf4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e906:	b2db      	uxtb	r3, r3
 800e908:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e90a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e90c:	2101      	movs	r1, #1
 800e90e:	4618      	mov	r0, r3
 800e910:	f001 fc16 	bl	8010140 <ff_convert>
 800e914:	4603      	mov	r3, r0
 800e916:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d101      	bne.n	800e922 <create_name+0x8a>
 800e91e:	2306      	movs	r3, #6
 800e920:	e168      	b.n	800ebf4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e924:	2b7f      	cmp	r3, #127	; 0x7f
 800e926:	d809      	bhi.n	800e93c <create_name+0xa4>
 800e928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e92a:	4619      	mov	r1, r3
 800e92c:	48b3      	ldr	r0, [pc, #716]	; (800ebfc <create_name+0x364>)
 800e92e:	f7fe fcde 	bl	800d2ee <chk_chr>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <create_name+0xa4>
 800e938:	2306      	movs	r3, #6
 800e93a:	e15b      	b.n	800ebf4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	1c5a      	adds	r2, r3, #1
 800e940:	617a      	str	r2, [r7, #20]
 800e942:	005b      	lsls	r3, r3, #1
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	4413      	add	r3, r2
 800e948:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e94a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e94c:	e7b4      	b.n	800e8b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e94e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	441a      	add	r2, r3
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e95a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e95c:	2b1f      	cmp	r3, #31
 800e95e:	d801      	bhi.n	800e964 <create_name+0xcc>
 800e960:	2304      	movs	r3, #4
 800e962:	e000      	b.n	800e966 <create_name+0xce>
 800e964:	2300      	movs	r3, #0
 800e966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e96a:	e011      	b.n	800e990 <create_name+0xf8>
		w = lfn[di - 1];
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e972:	3b01      	subs	r3, #1
 800e974:	005b      	lsls	r3, r3, #1
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	4413      	add	r3, r2
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e980:	2b20      	cmp	r3, #32
 800e982:	d002      	beq.n	800e98a <create_name+0xf2>
 800e984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e986:	2b2e      	cmp	r3, #46	; 0x2e
 800e988:	d106      	bne.n	800e998 <create_name+0x100>
		di--;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1ea      	bne.n	800e96c <create_name+0xd4>
 800e996:	e000      	b.n	800e99a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e998:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	005b      	lsls	r3, r3, #1
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <create_name+0x118>
 800e9ac:	2306      	movs	r3, #6
 800e9ae:	e121      	b.n	800ebf4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3324      	adds	r3, #36	; 0x24
 800e9b4:	220b      	movs	r2, #11
 800e9b6:	2120      	movs	r1, #32
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7fe fc56 	bl	800d26a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e9be:	2300      	movs	r3, #0
 800e9c0:	61bb      	str	r3, [r7, #24]
 800e9c2:	e002      	b.n	800e9ca <create_name+0x132>
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	61bb      	str	r3, [r7, #24]
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	2b20      	cmp	r3, #32
 800e9d6:	d0f5      	beq.n	800e9c4 <create_name+0x12c>
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	005b      	lsls	r3, r3, #1
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4413      	add	r3, r2
 800e9e0:	881b      	ldrh	r3, [r3, #0]
 800e9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e9e4:	d0ee      	beq.n	800e9c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d009      	beq.n	800ea00 <create_name+0x168>
 800e9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9f0:	f043 0303 	orr.w	r3, r3, #3
 800e9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e9f8:	e002      	b.n	800ea00 <create_name+0x168>
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d009      	beq.n	800ea1a <create_name+0x182>
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	2b2e      	cmp	r3, #46	; 0x2e
 800ea18:	d1ef      	bne.n	800e9fa <create_name+0x162>

	i = b = 0; ni = 8;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea20:	2300      	movs	r3, #0
 800ea22:	623b      	str	r3, [r7, #32]
 800ea24:	2308      	movs	r3, #8
 800ea26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	1c5a      	adds	r2, r3, #1
 800ea2c:	61ba      	str	r2, [r7, #24]
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ea38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 8090 	beq.w	800eb60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ea40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea42:	2b20      	cmp	r3, #32
 800ea44:	d006      	beq.n	800ea54 <create_name+0x1bc>
 800ea46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea48:	2b2e      	cmp	r3, #46	; 0x2e
 800ea4a:	d10a      	bne.n	800ea62 <create_name+0x1ca>
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d006      	beq.n	800ea62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ea54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea58:	f043 0303 	orr.w	r3, r3, #3
 800ea5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea60:	e07d      	b.n	800eb5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ea62:	6a3a      	ldr	r2, [r7, #32]
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d203      	bcs.n	800ea72 <create_name+0x1da>
 800ea6a:	69ba      	ldr	r2, [r7, #24]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d123      	bne.n	800eaba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	2b0b      	cmp	r3, #11
 800ea76:	d106      	bne.n	800ea86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ea78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea7c:	f043 0303 	orr.w	r3, r3, #3
 800ea80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea84:	e06f      	b.n	800eb66 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ea86:	69ba      	ldr	r2, [r7, #24]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d005      	beq.n	800ea9a <create_name+0x202>
 800ea8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea92:	f043 0303 	orr.w	r3, r3, #3
 800ea96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ea9a:	69ba      	ldr	r2, [r7, #24]
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d860      	bhi.n	800eb64 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	61bb      	str	r3, [r7, #24]
 800eaa6:	2308      	movs	r3, #8
 800eaa8:	623b      	str	r3, [r7, #32]
 800eaaa:	230b      	movs	r3, #11
 800eaac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800eaae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eab8:	e051      	b.n	800eb5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800eaba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eabc:	2b7f      	cmp	r3, #127	; 0x7f
 800eabe:	d914      	bls.n	800eaea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eac2:	2100      	movs	r1, #0
 800eac4:	4618      	mov	r0, r3
 800eac6:	f001 fb3b 	bl	8010140 <ff_convert>
 800eaca:	4603      	mov	r3, r0
 800eacc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800eace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d004      	beq.n	800eade <create_name+0x246>
 800ead4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ead6:	3b80      	subs	r3, #128	; 0x80
 800ead8:	4a49      	ldr	r2, [pc, #292]	; (800ec00 <create_name+0x368>)
 800eada:	5cd3      	ldrb	r3, [r2, r3]
 800eadc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800eade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eae2:	f043 0302 	orr.w	r3, r3, #2
 800eae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800eaea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d007      	beq.n	800eb00 <create_name+0x268>
 800eaf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4843      	ldr	r0, [pc, #268]	; (800ec04 <create_name+0x36c>)
 800eaf6:	f7fe fbfa 	bl	800d2ee <chk_chr>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d008      	beq.n	800eb12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800eb00:	235f      	movs	r3, #95	; 0x5f
 800eb02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eb04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb08:	f043 0303 	orr.w	r3, r3, #3
 800eb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb10:	e01b      	b.n	800eb4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800eb12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb14:	2b40      	cmp	r3, #64	; 0x40
 800eb16:	d909      	bls.n	800eb2c <create_name+0x294>
 800eb18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb1a:	2b5a      	cmp	r3, #90	; 0x5a
 800eb1c:	d806      	bhi.n	800eb2c <create_name+0x294>
					b |= 2;
 800eb1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb22:	f043 0302 	orr.w	r3, r3, #2
 800eb26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb2a:	e00e      	b.n	800eb4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800eb2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb2e:	2b60      	cmp	r3, #96	; 0x60
 800eb30:	d90b      	bls.n	800eb4a <create_name+0x2b2>
 800eb32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb34:	2b7a      	cmp	r3, #122	; 0x7a
 800eb36:	d808      	bhi.n	800eb4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eb38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb3c:	f043 0301 	orr.w	r3, r3, #1
 800eb40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb46:	3b20      	subs	r3, #32
 800eb48:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	623a      	str	r2, [r7, #32]
 800eb50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb52:	b2d1      	uxtb	r1, r2
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	4413      	add	r3, r2
 800eb58:	460a      	mov	r2, r1
 800eb5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800eb5e:	e763      	b.n	800ea28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eb60:	bf00      	nop
 800eb62:	e000      	b.n	800eb66 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800eb64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb6c:	2be5      	cmp	r3, #229	; 0xe5
 800eb6e:	d103      	bne.n	800eb78 <create_name+0x2e0>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2205      	movs	r2, #5
 800eb74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b08      	cmp	r3, #8
 800eb7c:	d104      	bne.n	800eb88 <create_name+0x2f0>
 800eb7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eb88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb8c:	f003 030c 	and.w	r3, r3, #12
 800eb90:	2b0c      	cmp	r3, #12
 800eb92:	d005      	beq.n	800eba0 <create_name+0x308>
 800eb94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb98:	f003 0303 	and.w	r3, r3, #3
 800eb9c:	2b03      	cmp	r3, #3
 800eb9e:	d105      	bne.n	800ebac <create_name+0x314>
 800eba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eba4:	f043 0302 	orr.w	r3, r3, #2
 800eba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ebac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebb0:	f003 0302 	and.w	r3, r3, #2
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d117      	bne.n	800ebe8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ebb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebbc:	f003 0303 	and.w	r3, r3, #3
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d105      	bne.n	800ebd0 <create_name+0x338>
 800ebc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebc8:	f043 0310 	orr.w	r3, r3, #16
 800ebcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ebd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebd4:	f003 030c 	and.w	r3, r3, #12
 800ebd8:	2b04      	cmp	r3, #4
 800ebda:	d105      	bne.n	800ebe8 <create_name+0x350>
 800ebdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe0:	f043 0308 	orr.w	r3, r3, #8
 800ebe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ebee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ebf2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3728      	adds	r7, #40	; 0x28
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	08016e30 	.word	0x08016e30
 800ec00:	08016ea4 	.word	0x08016ea4
 800ec04:	08016e3c 	.word	0x08016e3c

0800ec08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ec1c:	e002      	b.n	800ec24 <follow_path+0x1c>
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	3301      	adds	r3, #1
 800ec22:	603b      	str	r3, [r7, #0]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b2f      	cmp	r3, #47	; 0x2f
 800ec2a:	d0f8      	beq.n	800ec1e <follow_path+0x16>
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b5c      	cmp	r3, #92	; 0x5c
 800ec32:	d0f4      	beq.n	800ec1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2200      	movs	r2, #0
 800ec38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	2b1f      	cmp	r3, #31
 800ec40:	d80a      	bhi.n	800ec58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2280      	movs	r2, #128	; 0x80
 800ec46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff f8fb 	bl	800de48 <dir_sdi>
 800ec52:	4603      	mov	r3, r0
 800ec54:	75fb      	strb	r3, [r7, #23]
 800ec56:	e048      	b.n	800ecea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec58:	463b      	mov	r3, r7
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fe1b 	bl	800e898 <create_name>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec66:	7dfb      	ldrb	r3, [r7, #23]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d139      	bne.n	800ece0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff fc5a 	bl	800e526 <dir_find>
 800ec72:	4603      	mov	r3, r0
 800ec74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00a      	beq.n	800ec9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	d12c      	bne.n	800ece4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec8a:	7afb      	ldrb	r3, [r7, #11]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d127      	bne.n	800ece4 <follow_path+0xdc>
 800ec94:	2305      	movs	r3, #5
 800ec96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ec98:	e024      	b.n	800ece4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	f003 0304 	and.w	r3, r3, #4
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d121      	bne.n	800ece8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	799b      	ldrb	r3, [r3, #6]
 800eca8:	f003 0310 	and.w	r3, r3, #16
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ecb0:	2305      	movs	r3, #5
 800ecb2:	75fb      	strb	r3, [r7, #23]
 800ecb4:	e019      	b.n	800ecea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	8992      	ldrh	r2, [r2, #12]
 800ecc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecc8:	fb02 f200 	mul.w	r2, r2, r0
 800eccc:	1a9b      	subs	r3, r3, r2
 800ecce:	440b      	add	r3, r1
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fa5e 	bl	800e194 <ld_clust>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ecde:	e7bb      	b.n	800ec58 <follow_path+0x50>
			if (res != FR_OK) break;
 800ece0:	bf00      	nop
 800ece2:	e002      	b.n	800ecea <follow_path+0xe2>
				break;
 800ece4:	bf00      	nop
 800ece6:	e000      	b.n	800ecea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ece8:	bf00      	nop
			}
		}
	}

	return res;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ecfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ed00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d031      	beq.n	800ed6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	617b      	str	r3, [r7, #20]
 800ed10:	e002      	b.n	800ed18 <get_ldnumber+0x24>
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	3301      	adds	r3, #1
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b1f      	cmp	r3, #31
 800ed1e:	d903      	bls.n	800ed28 <get_ldnumber+0x34>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b3a      	cmp	r3, #58	; 0x3a
 800ed26:	d1f4      	bne.n	800ed12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b3a      	cmp	r3, #58	; 0x3a
 800ed2e:	d11c      	bne.n	800ed6a <get_ldnumber+0x76>
			tp = *path;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	60fa      	str	r2, [r7, #12]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	3b30      	subs	r3, #48	; 0x30
 800ed40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b09      	cmp	r3, #9
 800ed46:	d80e      	bhi.n	800ed66 <get_ldnumber+0x72>
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d10a      	bne.n	800ed66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d107      	bne.n	800ed66 <get_ldnumber+0x72>
					vol = (int)i;
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	e002      	b.n	800ed70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed6e:	693b      	ldr	r3, [r7, #16]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	371c      	adds	r7, #28
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	70da      	strb	r2, [r3, #3]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed92:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7fe fc74 	bl	800d684 <move_window>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <check_fs+0x2a>
 800eda2:	2304      	movs	r3, #4
 800eda4:	e038      	b.n	800ee18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3338      	adds	r3, #56	; 0x38
 800edaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe f9b8 	bl	800d124 <ld_word>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d001      	beq.n	800edc4 <check_fs+0x48>
 800edc0:	2303      	movs	r3, #3
 800edc2:	e029      	b.n	800ee18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edca:	2be9      	cmp	r3, #233	; 0xe9
 800edcc:	d009      	beq.n	800ede2 <check_fs+0x66>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edd4:	2beb      	cmp	r3, #235	; 0xeb
 800edd6:	d11e      	bne.n	800ee16 <check_fs+0x9a>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800edde:	2b90      	cmp	r3, #144	; 0x90
 800ede0:	d119      	bne.n	800ee16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3338      	adds	r3, #56	; 0x38
 800ede6:	3336      	adds	r3, #54	; 0x36
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe f9b3 	bl	800d154 <ld_dword>
 800edee:	4603      	mov	r3, r0
 800edf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800edf4:	4a0a      	ldr	r2, [pc, #40]	; (800ee20 <check_fs+0xa4>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d101      	bne.n	800edfe <check_fs+0x82>
 800edfa:	2300      	movs	r3, #0
 800edfc:	e00c      	b.n	800ee18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3338      	adds	r3, #56	; 0x38
 800ee02:	3352      	adds	r3, #82	; 0x52
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe f9a5 	bl	800d154 <ld_dword>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4a05      	ldr	r2, [pc, #20]	; (800ee24 <check_fs+0xa8>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d101      	bne.n	800ee16 <check_fs+0x9a>
 800ee12:	2300      	movs	r3, #0
 800ee14:	e000      	b.n	800ee18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee16:	2302      	movs	r3, #2
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	00544146 	.word	0x00544146
 800ee24:	33544146 	.word	0x33544146

0800ee28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b096      	sub	sp, #88	; 0x58
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7ff ff59 	bl	800ecf4 <get_ldnumber>
 800ee42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da01      	bge.n	800ee4e <find_volume+0x26>
 800ee4a:	230b      	movs	r3, #11
 800ee4c:	e268      	b.n	800f320 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee4e:	4ab0      	ldr	r2, [pc, #704]	; (800f110 <find_volume+0x2e8>)
 800ee50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <find_volume+0x3a>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	e25e      	b.n	800f320 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	f023 0301 	bic.w	r3, r3, #1
 800ee6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01a      	beq.n	800eeae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	785b      	ldrb	r3, [r3, #1]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe f8b3 	bl	800cfe8 <disk_status>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10c      	bne.n	800eeae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <find_volume+0x82>
 800ee9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eea6:	230a      	movs	r3, #10
 800eea8:	e23a      	b.n	800f320 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e238      	b.n	800f320 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe f8ab 	bl	800d01c <disk_initialize>
 800eec6:	4603      	mov	r3, r0
 800eec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eed8:	2303      	movs	r3, #3
 800eeda:	e221      	b.n	800f320 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eedc:	79fb      	ldrb	r3, [r7, #7]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d007      	beq.n	800eef2 <find_volume+0xca>
 800eee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eee6:	f003 0304 	and.w	r3, r3, #4
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eeee:	230a      	movs	r3, #10
 800eef0:	e216      	b.n	800f320 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800eef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef4:	7858      	ldrb	r0, [r3, #1]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	330c      	adds	r3, #12
 800eefa:	461a      	mov	r2, r3
 800eefc:	2102      	movs	r1, #2
 800eefe:	f7fe f8f3 	bl	800d0e8 <disk_ioctl>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d001      	beq.n	800ef0c <find_volume+0xe4>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e209      	b.n	800f320 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	899b      	ldrh	r3, [r3, #12]
 800ef10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef14:	d80d      	bhi.n	800ef32 <find_volume+0x10a>
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	899b      	ldrh	r3, [r3, #12]
 800ef1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef1e:	d308      	bcc.n	800ef32 <find_volume+0x10a>
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	899b      	ldrh	r3, [r3, #12]
 800ef24:	461a      	mov	r2, r3
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	899b      	ldrh	r3, [r3, #12]
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d001      	beq.n	800ef36 <find_volume+0x10e>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e1f4      	b.n	800f320 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ef3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef3e:	f7ff ff1d 	bl	800ed7c <check_fs>
 800ef42:	4603      	mov	r3, r0
 800ef44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d14b      	bne.n	800efe8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef50:	2300      	movs	r3, #0
 800ef52:	643b      	str	r3, [r7, #64]	; 0x40
 800ef54:	e01f      	b.n	800ef96 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ef64:	4413      	add	r3, r2
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <find_volume+0x158>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	3308      	adds	r3, #8
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe f8ec 	bl	800d154 <ld_dword>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	e000      	b.n	800ef82 <find_volume+0x15a>
 800ef80:	2200      	movs	r2, #0
 800ef82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef8a:	440b      	add	r3, r1
 800ef8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef92:	3301      	adds	r3, #1
 800ef94:	643b      	str	r3, [r7, #64]	; 0x40
 800ef96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef98:	2b03      	cmp	r3, #3
 800ef9a:	d9dc      	bls.n	800ef56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <find_volume+0x184>
 800efa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa8:	3b01      	subs	r3, #1
 800efaa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800efac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800efb4:	4413      	add	r3, r2
 800efb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800efba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800efbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <find_volume+0x1a6>
 800efc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800efc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efc6:	f7ff fed9 	bl	800ed7c <check_fs>
 800efca:	4603      	mov	r3, r0
 800efcc:	e000      	b.n	800efd0 <find_volume+0x1a8>
 800efce:	2303      	movs	r3, #3
 800efd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800efd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d905      	bls.n	800efe8 <find_volume+0x1c0>
 800efdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efde:	3301      	adds	r3, #1
 800efe0:	643b      	str	r3, [r7, #64]	; 0x40
 800efe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe4:	2b03      	cmp	r3, #3
 800efe6:	d9e1      	bls.n	800efac <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800efe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efec:	2b04      	cmp	r3, #4
 800efee:	d101      	bne.n	800eff4 <find_volume+0x1cc>
 800eff0:	2301      	movs	r3, #1
 800eff2:	e195      	b.n	800f320 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d901      	bls.n	800f000 <find_volume+0x1d8>
 800effc:	230d      	movs	r3, #13
 800effe:	e18f      	b.n	800f320 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	3338      	adds	r3, #56	; 0x38
 800f004:	330b      	adds	r3, #11
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe f88c 	bl	800d124 <ld_word>
 800f00c:	4603      	mov	r3, r0
 800f00e:	461a      	mov	r2, r3
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	899b      	ldrh	r3, [r3, #12]
 800f014:	429a      	cmp	r2, r3
 800f016:	d001      	beq.n	800f01c <find_volume+0x1f4>
 800f018:	230d      	movs	r3, #13
 800f01a:	e181      	b.n	800f320 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	3338      	adds	r3, #56	; 0x38
 800f020:	3316      	adds	r3, #22
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe f87e 	bl	800d124 <ld_word>
 800f028:	4603      	mov	r3, r0
 800f02a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <find_volume+0x218>
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	3338      	adds	r3, #56	; 0x38
 800f036:	3324      	adds	r3, #36	; 0x24
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe f88b 	bl	800d154 <ld_dword>
 800f03e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f044:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	789b      	ldrb	r3, [r3, #2]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d005      	beq.n	800f064 <find_volume+0x23c>
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	789b      	ldrb	r3, [r3, #2]
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d001      	beq.n	800f064 <find_volume+0x23c>
 800f060:	230d      	movs	r3, #13
 800f062:	e15d      	b.n	800f320 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	789b      	ldrb	r3, [r3, #2]
 800f068:	461a      	mov	r2, r3
 800f06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f06c:	fb02 f303 	mul.w	r3, r2, r3
 800f070:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f078:	b29a      	uxth	r2, r3
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f080:	895b      	ldrh	r3, [r3, #10]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d008      	beq.n	800f098 <find_volume+0x270>
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	895b      	ldrh	r3, [r3, #10]
 800f08a:	461a      	mov	r2, r3
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	895b      	ldrh	r3, [r3, #10]
 800f090:	3b01      	subs	r3, #1
 800f092:	4013      	ands	r3, r2
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <find_volume+0x274>
 800f098:	230d      	movs	r3, #13
 800f09a:	e141      	b.n	800f320 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	3338      	adds	r3, #56	; 0x38
 800f0a0:	3311      	adds	r3, #17
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe f83e 	bl	800d124 <ld_word>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0b6:	8992      	ldrh	r2, [r2, #12]
 800f0b8:	0952      	lsrs	r2, r2, #5
 800f0ba:	b292      	uxth	r2, r2
 800f0bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0c0:	fb02 f201 	mul.w	r2, r2, r1
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <find_volume+0x2a8>
 800f0cc:	230d      	movs	r3, #13
 800f0ce:	e127      	b.n	800f320 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	3338      	adds	r3, #56	; 0x38
 800f0d4:	3313      	adds	r3, #19
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe f824 	bl	800d124 <ld_word>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <find_volume+0x2cc>
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	3338      	adds	r3, #56	; 0x38
 800f0ea:	3320      	adds	r3, #32
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fe f831 	bl	800d154 <ld_dword>
 800f0f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	3338      	adds	r3, #56	; 0x38
 800f0f8:	330e      	adds	r3, #14
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe f812 	bl	800d124 <ld_word>
 800f100:	4603      	mov	r3, r0
 800f102:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f106:	2b00      	cmp	r3, #0
 800f108:	d104      	bne.n	800f114 <find_volume+0x2ec>
 800f10a:	230d      	movs	r3, #13
 800f10c:	e108      	b.n	800f320 <find_volume+0x4f8>
 800f10e:	bf00      	nop
 800f110:	200002c8 	.word	0x200002c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f118:	4413      	add	r3, r2
 800f11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f11c:	8911      	ldrh	r1, [r2, #8]
 800f11e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f120:	8992      	ldrh	r2, [r2, #12]
 800f122:	0952      	lsrs	r2, r2, #5
 800f124:	b292      	uxth	r2, r2
 800f126:	fbb1 f2f2 	udiv	r2, r1, r2
 800f12a:	b292      	uxth	r2, r2
 800f12c:	4413      	add	r3, r2
 800f12e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	429a      	cmp	r2, r3
 800f136:	d201      	bcs.n	800f13c <find_volume+0x314>
 800f138:	230d      	movs	r3, #13
 800f13a:	e0f1      	b.n	800f320 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f13c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f144:	8952      	ldrh	r2, [r2, #10]
 800f146:	fbb3 f3f2 	udiv	r3, r3, r2
 800f14a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <find_volume+0x32e>
 800f152:	230d      	movs	r3, #13
 800f154:	e0e4      	b.n	800f320 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800f156:	2303      	movs	r3, #3
 800f158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f162:	4293      	cmp	r3, r2
 800f164:	d802      	bhi.n	800f16c <find_volume+0x344>
 800f166:	2302      	movs	r3, #2
 800f168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f172:	4293      	cmp	r3, r2
 800f174:	d802      	bhi.n	800f17c <find_volume+0x354>
 800f176:	2301      	movs	r3, #1
 800f178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	1c9a      	adds	r2, r3, #2
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f188:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f18a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18e:	441a      	add	r2, r3
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f198:	441a      	add	r2, r3
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f19e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d11e      	bne.n	800f1e4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a8:	3338      	adds	r3, #56	; 0x38
 800f1aa:	332a      	adds	r3, #42	; 0x2a
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fd ffb9 	bl	800d124 <ld_word>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <find_volume+0x394>
 800f1b8:	230d      	movs	r3, #13
 800f1ba:	e0b1      	b.n	800f320 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1be:	891b      	ldrh	r3, [r3, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <find_volume+0x3a0>
 800f1c4:	230d      	movs	r3, #13
 800f1c6:	e0ab      	b.n	800f320 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	3338      	adds	r3, #56	; 0x38
 800f1cc:	332c      	adds	r3, #44	; 0x2c
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fd ffc0 	bl	800d154 <ld_dword>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1dc:	69db      	ldr	r3, [r3, #28]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	647b      	str	r3, [r7, #68]	; 0x44
 800f1e2:	e01f      	b.n	800f224 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d101      	bne.n	800f1f0 <find_volume+0x3c8>
 800f1ec:	230d      	movs	r3, #13
 800f1ee:	e097      	b.n	800f320 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f6:	441a      	add	r2, r3
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f200:	2b02      	cmp	r3, #2
 800f202:	d103      	bne.n	800f20c <find_volume+0x3e4>
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	69db      	ldr	r3, [r3, #28]
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	e00a      	b.n	800f222 <find_volume+0x3fa>
 800f20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20e:	69da      	ldr	r2, [r3, #28]
 800f210:	4613      	mov	r3, r2
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	4413      	add	r3, r2
 800f216:	085a      	lsrs	r2, r3, #1
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	69db      	ldr	r3, [r3, #28]
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f222:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f226:	6a1a      	ldr	r2, [r3, #32]
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	899b      	ldrh	r3, [r3, #12]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f230:	440b      	add	r3, r1
 800f232:	3b01      	subs	r3, #1
 800f234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f236:	8989      	ldrh	r1, [r1, #12]
 800f238:	fbb3 f3f1 	udiv	r3, r3, r1
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d201      	bcs.n	800f244 <find_volume+0x41c>
 800f240:	230d      	movs	r3, #13
 800f242:	e06d      	b.n	800f320 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	f04f 32ff 	mov.w	r2, #4294967295
 800f24a:	619a      	str	r2, [r3, #24]
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	699a      	ldr	r2, [r3, #24]
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	2280      	movs	r2, #128	; 0x80
 800f258:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f25a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d149      	bne.n	800f2f6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	3338      	adds	r3, #56	; 0x38
 800f266:	3330      	adds	r3, #48	; 0x30
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fd ff5b 	bl	800d124 <ld_word>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b01      	cmp	r3, #1
 800f272:	d140      	bne.n	800f2f6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f276:	3301      	adds	r3, #1
 800f278:	4619      	mov	r1, r3
 800f27a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f27c:	f7fe fa02 	bl	800d684 <move_window>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d137      	bne.n	800f2f6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	2200      	movs	r2, #0
 800f28a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28e:	3338      	adds	r3, #56	; 0x38
 800f290:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f294:	4618      	mov	r0, r3
 800f296:	f7fd ff45 	bl	800d124 <ld_word>
 800f29a:	4603      	mov	r3, r0
 800f29c:	461a      	mov	r2, r3
 800f29e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d127      	bne.n	800f2f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	3338      	adds	r3, #56	; 0x38
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fd ff52 	bl	800d154 <ld_dword>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4a1d      	ldr	r2, [pc, #116]	; (800f328 <find_volume+0x500>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d11e      	bne.n	800f2f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	3338      	adds	r3, #56	; 0x38
 800f2bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fd ff47 	bl	800d154 <ld_dword>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	4a18      	ldr	r2, [pc, #96]	; (800f32c <find_volume+0x504>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d113      	bne.n	800f2f6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d0:	3338      	adds	r3, #56	; 0x38
 800f2d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fd ff3c 	bl	800d154 <ld_dword>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	3338      	adds	r3, #56	; 0x38
 800f2e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd ff32 	bl	800d154 <ld_dword>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f2fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f2fe:	4b0c      	ldr	r3, [pc, #48]	; (800f330 <find_volume+0x508>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	b29a      	uxth	r2, r3
 800f306:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <find_volume+0x508>)
 800f308:	801a      	strh	r2, [r3, #0]
 800f30a:	4b09      	ldr	r3, [pc, #36]	; (800f330 <find_volume+0x508>)
 800f30c:	881a      	ldrh	r2, [r3, #0]
 800f30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f310:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f314:	4a07      	ldr	r2, [pc, #28]	; (800f334 <find_volume+0x50c>)
 800f316:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f31a:	f7fe f94b 	bl	800d5b4 <clear_lock>
#endif
	return FR_OK;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3758      	adds	r7, #88	; 0x58
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	41615252 	.word	0x41615252
 800f32c:	61417272 	.word	0x61417272
 800f330:	200002cc 	.word	0x200002cc
 800f334:	200002f0 	.word	0x200002f0

0800f338 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f342:	2309      	movs	r3, #9
 800f344:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01c      	beq.n	800f386 <validate+0x4e>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d018      	beq.n	800f386 <validate+0x4e>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d013      	beq.n	800f386 <validate+0x4e>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	889a      	ldrh	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	88db      	ldrh	r3, [r3, #6]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d10c      	bne.n	800f386 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	785b      	ldrb	r3, [r3, #1]
 800f372:	4618      	mov	r0, r3
 800f374:	f7fd fe38 	bl	800cfe8 <disk_status>
 800f378:	4603      	mov	r3, r0
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d101      	bne.n	800f386 <validate+0x4e>
			res = FR_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f386:	7bfb      	ldrb	r3, [r7, #15]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <validate+0x5a>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	e000      	b.n	800f394 <validate+0x5c>
 800f392:	2300      	movs	r3, #0
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	6013      	str	r3, [r2, #0]
	return res;
 800f398:	7bfb      	ldrb	r3, [r7, #15]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
	...

0800f3a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b088      	sub	sp, #32
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f3b6:	f107 0310 	add.w	r3, r7, #16
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7ff fc9a 	bl	800ecf4 <get_ldnumber>
 800f3c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	da01      	bge.n	800f3cc <f_mount+0x28>
 800f3c8:	230b      	movs	r3, #11
 800f3ca:	e02b      	b.n	800f424 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f3cc:	4a17      	ldr	r2, [pc, #92]	; (800f42c <f_mount+0x88>)
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d005      	beq.n	800f3e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f3dc:	69b8      	ldr	r0, [r7, #24]
 800f3de:	f7fe f8e9 	bl	800d5b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d002      	beq.n	800f3f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	490d      	ldr	r1, [pc, #52]	; (800f42c <f_mount+0x88>)
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <f_mount+0x66>
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d001      	beq.n	800f40e <f_mount+0x6a>
 800f40a:	2300      	movs	r3, #0
 800f40c:	e00a      	b.n	800f424 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f40e:	f107 010c 	add.w	r1, r7, #12
 800f412:	f107 0308 	add.w	r3, r7, #8
 800f416:	2200      	movs	r2, #0
 800f418:	4618      	mov	r0, r3
 800f41a:	f7ff fd05 	bl	800ee28 <find_volume>
 800f41e:	4603      	mov	r3, r0
 800f420:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f422:	7dfb      	ldrb	r3, [r7, #23]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3720      	adds	r7, #32
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	200002c8 	.word	0x200002c8

0800f430 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b09a      	sub	sp, #104	; 0x68
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	4613      	mov	r3, r2
 800f43c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <f_open+0x18>
 800f444:	2309      	movs	r3, #9
 800f446:	e1bb      	b.n	800f7c0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f44e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f450:	79fa      	ldrb	r2, [r7, #7]
 800f452:	f107 0114 	add.w	r1, r7, #20
 800f456:	f107 0308 	add.w	r3, r7, #8
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff fce4 	bl	800ee28 <find_volume>
 800f460:	4603      	mov	r3, r0
 800f462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f466:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f040 819f 	bne.w	800f7ae <f_open+0x37e>
		dj.obj.fs = fs;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	f107 0318 	add.w	r3, r7, #24
 800f47a:	4611      	mov	r1, r2
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7ff fbc3 	bl	800ec08 <follow_path>
 800f482:	4603      	mov	r3, r0
 800f484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d11a      	bne.n	800f4c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f494:	b25b      	sxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	da03      	bge.n	800f4a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f49a:	2306      	movs	r3, #6
 800f49c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f4a0:	e011      	b.n	800f4c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4a2:	79fb      	ldrb	r3, [r7, #7]
 800f4a4:	f023 0301 	bic.w	r3, r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bf14      	ite	ne
 800f4ac:	2301      	movne	r3, #1
 800f4ae:	2300      	moveq	r3, #0
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	f107 0318 	add.w	r3, r7, #24
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd ff32 	bl	800d324 <chk_lock>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4c6:	79fb      	ldrb	r3, [r7, #7]
 800f4c8:	f003 031c 	and.w	r3, r3, #28
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d07f      	beq.n	800f5d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d017      	beq.n	800f508 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f4d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	d10e      	bne.n	800f4fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4e0:	f7fd ff7c 	bl	800d3dc <enq_lock>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d006      	beq.n	800f4f8 <f_open+0xc8>
 800f4ea:	f107 0318 	add.w	r3, r7, #24
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7ff f8da 	bl	800e6a8 <dir_register>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	e000      	b.n	800f4fa <f_open+0xca>
 800f4f8:	2312      	movs	r3, #18
 800f4fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	f043 0308 	orr.w	r3, r3, #8
 800f504:	71fb      	strb	r3, [r7, #7]
 800f506:	e010      	b.n	800f52a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f508:	7fbb      	ldrb	r3, [r7, #30]
 800f50a:	f003 0311 	and.w	r3, r3, #17
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d003      	beq.n	800f51a <f_open+0xea>
					res = FR_DENIED;
 800f512:	2307      	movs	r3, #7
 800f514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f518:	e007      	b.n	800f52a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f51a:	79fb      	ldrb	r3, [r7, #7]
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <f_open+0xfa>
 800f524:	2308      	movs	r3, #8
 800f526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f52a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d168      	bne.n	800f604 <f_open+0x1d4>
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	f003 0308 	and.w	r3, r3, #8
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d063      	beq.n	800f604 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f53c:	f7fd fcf6 	bl	800cf2c <get_fattime>
 800f540:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f544:	330e      	adds	r3, #14
 800f546:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd fe41 	bl	800d1d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	3316      	adds	r3, #22
 800f552:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f554:	4618      	mov	r0, r3
 800f556:	f7fd fe3b 	bl	800d1d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	330b      	adds	r3, #11
 800f55e:	2220      	movs	r2, #32
 800f560:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f566:	4611      	mov	r1, r2
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe fe13 	bl	800e194 <ld_clust>
 800f56e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f574:	2200      	movs	r2, #0
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe fe2b 	bl	800e1d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	331c      	adds	r3, #28
 800f580:	2100      	movs	r1, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f7fd fe24 	bl	800d1d0 <st_dword>
					fs->wflag = 1;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	2201      	movs	r2, #1
 800f58c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f590:	2b00      	cmp	r3, #0
 800f592:	d037      	beq.n	800f604 <f_open+0x1d4>
						dw = fs->winsect;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f598:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f59a:	f107 0318 	add.w	r3, r7, #24
 800f59e:	2200      	movs	r2, #0
 800f5a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fe fb1b 	bl	800dbde <remove_chain>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f5ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d126      	bne.n	800f604 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fe f862 	bl	800d684 <move_window>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5ca:	3a01      	subs	r2, #1
 800f5cc:	615a      	str	r2, [r3, #20]
 800f5ce:	e019      	b.n	800f604 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d115      	bne.n	800f604 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5d8:	7fbb      	ldrb	r3, [r7, #30]
 800f5da:	f003 0310 	and.w	r3, r3, #16
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d003      	beq.n	800f5ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800f5e2:	2304      	movs	r3, #4
 800f5e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f5e8:	e00c      	b.n	800f604 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f5ea:	79fb      	ldrb	r3, [r7, #7]
 800f5ec:	f003 0302 	and.w	r3, r3, #2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d007      	beq.n	800f604 <f_open+0x1d4>
 800f5f4:	7fbb      	ldrb	r3, [r7, #30]
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d002      	beq.n	800f604 <f_open+0x1d4>
						res = FR_DENIED;
 800f5fe:	2307      	movs	r3, #7
 800f600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d128      	bne.n	800f65e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	f003 0308 	and.w	r3, r3, #8
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	f023 0301 	bic.w	r3, r3, #1
 800f632:	2b00      	cmp	r3, #0
 800f634:	bf14      	ite	ne
 800f636:	2301      	movne	r3, #1
 800f638:	2300      	moveq	r3, #0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	461a      	mov	r2, r3
 800f63e:	f107 0318 	add.w	r3, r7, #24
 800f642:	4611      	mov	r1, r2
 800f644:	4618      	mov	r0, r3
 800f646:	f7fd feeb 	bl	800d420 <inc_lock>
 800f64a:	4602      	mov	r2, r0
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	691b      	ldr	r3, [r3, #16]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d102      	bne.n	800f65e <f_open+0x22e>
 800f658:	2302      	movs	r3, #2
 800f65a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f65e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f662:	2b00      	cmp	r3, #0
 800f664:	f040 80a3 	bne.w	800f7ae <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f66c:	4611      	mov	r1, r2
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fe fd90 	bl	800e194 <ld_clust>
 800f674:	4602      	mov	r2, r0
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67c:	331c      	adds	r3, #28
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fd fd68 	bl	800d154 <ld_dword>
 800f684:	4602      	mov	r2, r0
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	88da      	ldrh	r2, [r3, #6]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	79fa      	ldrb	r2, [r7, #7]
 800f6a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3330      	adds	r3, #48	; 0x30
 800f6ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f6be:	2100      	movs	r1, #0
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fd fdd2 	bl	800d26a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	f003 0320 	and.w	r3, r3, #32
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d06e      	beq.n	800f7ae <f_open+0x37e>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d06a      	beq.n	800f7ae <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68da      	ldr	r2, [r3, #12]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	895b      	ldrh	r3, [r3, #10]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	fb03 f302 	mul.w	r3, r3, r2
 800f6ee:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6fc:	e016      	b.n	800f72c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe f87b 	bl	800d7fe <get_fat>
 800f708:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f70a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d802      	bhi.n	800f716 <f_open+0x2e6>
 800f710:	2302      	movs	r3, #2
 800f712:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71c:	d102      	bne.n	800f724 <f_open+0x2f4>
 800f71e:	2301      	movs	r3, #1
 800f720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f72c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f730:	2b00      	cmp	r3, #0
 800f732:	d103      	bne.n	800f73c <f_open+0x30c>
 800f734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f738:	429a      	cmp	r2, r3
 800f73a:	d8e0      	bhi.n	800f6fe <f_open+0x2ce>
				}
				fp->clust = clst;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f740:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f746:	2b00      	cmp	r3, #0
 800f748:	d131      	bne.n	800f7ae <f_open+0x37e>
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	899b      	ldrh	r3, [r3, #12]
 800f74e:	461a      	mov	r2, r3
 800f750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f752:	fbb3 f1f2 	udiv	r1, r3, r2
 800f756:	fb02 f201 	mul.w	r2, r2, r1
 800f75a:	1a9b      	subs	r3, r3, r2
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d026      	beq.n	800f7ae <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe f82b 	bl	800d7c0 <clust2sect>
 800f76a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d103      	bne.n	800f77a <f_open+0x34a>
						res = FR_INT_ERR;
 800f772:	2302      	movs	r3, #2
 800f774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f778:	e019      	b.n	800f7ae <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	899b      	ldrh	r3, [r3, #12]
 800f77e:	461a      	mov	r2, r3
 800f780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f782:	fbb3 f2f2 	udiv	r2, r3, r2
 800f786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f788:	441a      	add	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	7858      	ldrb	r0, [r3, #1]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6a1a      	ldr	r2, [r3, #32]
 800f79c:	2301      	movs	r3, #1
 800f79e:	f7fd fc63 	bl	800d068 <disk_read>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <f_open+0x37e>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f7ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <f_open+0x38c>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3768      	adds	r7, #104	; 0x68
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08c      	sub	sp, #48	; 0x30
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
 800f7d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f107 0210 	add.w	r2, r7, #16
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7ff fda5 	bl	800f338 <validate>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f7f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d107      	bne.n	800f80c <f_write+0x44>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	7d5b      	ldrb	r3, [r3, #21]
 800f800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <f_write+0x4a>
 800f80c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f810:	e16a      	b.n	800fae8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	7d1b      	ldrb	r3, [r3, #20]
 800f816:	f003 0302 	and.w	r3, r3, #2
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <f_write+0x5a>
 800f81e:	2307      	movs	r3, #7
 800f820:	e162      	b.n	800fae8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	699a      	ldr	r2, [r3, #24]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	441a      	add	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	429a      	cmp	r2, r3
 800f830:	f080 814c 	bcs.w	800facc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	699b      	ldr	r3, [r3, #24]
 800f838:	43db      	mvns	r3, r3
 800f83a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f83c:	e146      	b.n	800facc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	693a      	ldr	r2, [r7, #16]
 800f844:	8992      	ldrh	r2, [r2, #12]
 800f846:	fbb3 f1f2 	udiv	r1, r3, r2
 800f84a:	fb02 f201 	mul.w	r2, r2, r1
 800f84e:	1a9b      	subs	r3, r3, r2
 800f850:	2b00      	cmp	r3, #0
 800f852:	f040 80f1 	bne.w	800fa38 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	8992      	ldrh	r2, [r2, #12]
 800f85e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f862:	693a      	ldr	r2, [r7, #16]
 800f864:	8952      	ldrh	r2, [r2, #10]
 800f866:	3a01      	subs	r2, #1
 800f868:	4013      	ands	r3, r2
 800f86a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d143      	bne.n	800f8fa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10c      	bne.n	800f894 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f882:	2b00      	cmp	r3, #0
 800f884:	d11a      	bne.n	800f8bc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2100      	movs	r1, #0
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fa0c 	bl	800dca8 <create_chain>
 800f890:	62b8      	str	r0, [r7, #40]	; 0x28
 800f892:	e013      	b.n	800f8bc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d007      	beq.n	800f8ac <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	699b      	ldr	r3, [r3, #24]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f7fe fa98 	bl	800ddd8 <clmt_clust>
 800f8a8:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8aa:	e007      	b.n	800f8bc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	69db      	ldr	r3, [r3, #28]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	f7fe f9f7 	bl	800dca8 <create_chain>
 800f8ba:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 8109 	beq.w	800fad6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d104      	bne.n	800f8d4 <f_write+0x10c>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	755a      	strb	r2, [r3, #21]
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	e109      	b.n	800fae8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8da:	d104      	bne.n	800f8e6 <f_write+0x11e>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	755a      	strb	r2, [r3, #21]
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e100      	b.n	800fae8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d102      	bne.n	800f8fa <f_write+0x132>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	7d1b      	ldrb	r3, [r3, #20]
 800f8fe:	b25b      	sxtb	r3, r3
 800f900:	2b00      	cmp	r3, #0
 800f902:	da18      	bge.n	800f936 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	7858      	ldrb	r0, [r3, #1]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6a1a      	ldr	r2, [r3, #32]
 800f912:	2301      	movs	r3, #1
 800f914:	f7fd fbc8 	bl	800d0a8 <disk_write>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d004      	beq.n	800f928 <f_write+0x160>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2201      	movs	r2, #1
 800f922:	755a      	strb	r2, [r3, #21]
 800f924:	2301      	movs	r3, #1
 800f926:	e0df      	b.n	800fae8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	7d1b      	ldrb	r3, [r3, #20]
 800f92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f930:	b2da      	uxtb	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f936:	693a      	ldr	r2, [r7, #16]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	69db      	ldr	r3, [r3, #28]
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f7fd ff3e 	bl	800d7c0 <clust2sect>
 800f944:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d104      	bne.n	800f956 <f_write+0x18e>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2202      	movs	r2, #2
 800f950:	755a      	strb	r2, [r3, #21]
 800f952:	2302      	movs	r3, #2
 800f954:	e0c8      	b.n	800fae8 <f_write+0x320>
			sect += csect;
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	4413      	add	r3, r2
 800f95c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	899b      	ldrh	r3, [r3, #12]
 800f962:	461a      	mov	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	fbb3 f3f2 	udiv	r3, r3, r2
 800f96a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d043      	beq.n	800f9fa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f972:	69ba      	ldr	r2, [r7, #24]
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	4413      	add	r3, r2
 800f978:	693a      	ldr	r2, [r7, #16]
 800f97a:	8952      	ldrh	r2, [r2, #10]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d905      	bls.n	800f98c <f_write+0x1c4>
					cc = fs->csize - csect;
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	895b      	ldrh	r3, [r3, #10]
 800f984:	461a      	mov	r2, r3
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	7858      	ldrb	r0, [r3, #1]
 800f990:	6a3b      	ldr	r3, [r7, #32]
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	69f9      	ldr	r1, [r7, #28]
 800f996:	f7fd fb87 	bl	800d0a8 <disk_write>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <f_write+0x1e2>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	755a      	strb	r2, [r3, #21]
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e09e      	b.n	800fae8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6a1a      	ldr	r2, [r3, #32]
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	6a3a      	ldr	r2, [r7, #32]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d918      	bls.n	800f9ea <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1a      	ldr	r2, [r3, #32]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	1ad3      	subs	r3, r2, r3
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	8992      	ldrh	r2, [r2, #12]
 800f9ca:	fb02 f303 	mul.w	r3, r2, r3
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	18d1      	adds	r1, r2, r3
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	899b      	ldrh	r3, [r3, #12]
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	f7fd fc26 	bl	800d228 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	7d1b      	ldrb	r3, [r3, #20]
 800f9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	899b      	ldrh	r3, [r3, #12]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	6a3b      	ldr	r3, [r7, #32]
 800f9f2:	fb02 f303 	mul.w	r3, r2, r3
 800f9f6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f9f8:	e04b      	b.n	800fa92 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d016      	beq.n	800fa32 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	699a      	ldr	r2, [r3, #24]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d210      	bcs.n	800fa32 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	7858      	ldrb	r0, [r3, #1]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	f7fd fb23 	bl	800d068 <disk_read>
 800fa22:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d004      	beq.n	800fa32 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	755a      	strb	r2, [r3, #21]
 800fa2e:	2301      	movs	r3, #1
 800fa30:	e05a      	b.n	800fae8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	697a      	ldr	r2, [r7, #20]
 800fa36:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	899b      	ldrh	r3, [r3, #12]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	8992      	ldrh	r2, [r2, #12]
 800fa46:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa4a:	fb02 f201 	mul.w	r2, r2, r1
 800fa4e:	1a9b      	subs	r3, r3, r2
 800fa50:	1ac3      	subs	r3, r0, r3
 800fa52:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d901      	bls.n	800fa60 <f_write+0x298>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	8992      	ldrh	r2, [r2, #12]
 800fa6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa72:	fb02 f200 	mul.w	r2, r2, r0
 800fa76:	1a9b      	subs	r3, r3, r2
 800fa78:	440b      	add	r3, r1
 800fa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa7c:	69f9      	ldr	r1, [r7, #28]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fd fbd2 	bl	800d228 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	7d1b      	ldrb	r3, [r3, #20]
 800fa88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa8c:	b2da      	uxtb	r2, r3
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fa92:	69fa      	ldr	r2, [r7, #28]
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	4413      	add	r3, r2
 800fa98:	61fb      	str	r3, [r7, #28]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	699a      	ldr	r2, [r3, #24]
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	441a      	add	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	619a      	str	r2, [r3, #24]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	68da      	ldr	r2, [r3, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	429a      	cmp	r2, r3
 800fab0:	bf38      	it	cc
 800fab2:	461a      	movcc	r2, r3
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	60da      	str	r2, [r3, #12]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	441a      	add	r2, r3
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	1ad3      	subs	r3, r2, r3
 800faca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	f47f aeb5 	bne.w	800f83e <f_write+0x76>
 800fad4:	e000      	b.n	800fad8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fad6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	7d1b      	ldrb	r3, [r3, #20]
 800fadc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3730      	adds	r7, #48	; 0x30
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f107 0208 	add.w	r2, r7, #8
 800fafe:	4611      	mov	r1, r2
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7ff fc19 	bl	800f338 <validate>
 800fb06:	4603      	mov	r3, r0
 800fb08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d168      	bne.n	800fbe2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7d1b      	ldrb	r3, [r3, #20]
 800fb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d062      	beq.n	800fbe2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7d1b      	ldrb	r3, [r3, #20]
 800fb20:	b25b      	sxtb	r3, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	da15      	bge.n	800fb52 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	7858      	ldrb	r0, [r3, #1]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a1a      	ldr	r2, [r3, #32]
 800fb34:	2301      	movs	r3, #1
 800fb36:	f7fd fab7 	bl	800d0a8 <disk_write>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d001      	beq.n	800fb44 <f_sync+0x54>
 800fb40:	2301      	movs	r3, #1
 800fb42:	e04f      	b.n	800fbe4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	7d1b      	ldrb	r3, [r3, #20]
 800fb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb52:	f7fd f9eb 	bl	800cf2c <get_fattime>
 800fb56:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	4619      	mov	r1, r3
 800fb60:	4610      	mov	r0, r2
 800fb62:	f7fd fd8f 	bl	800d684 <move_window>
 800fb66:	4603      	mov	r3, r0
 800fb68:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb6a:	7dfb      	ldrb	r3, [r7, #23]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d138      	bne.n	800fbe2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb74:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	330b      	adds	r3, #11
 800fb7a:	781a      	ldrb	r2, [r3, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	330b      	adds	r3, #11
 800fb80:	f042 0220 	orr.w	r2, r2, #32
 800fb84:	b2d2      	uxtb	r2, r2
 800fb86:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6818      	ldr	r0, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	461a      	mov	r2, r3
 800fb92:	68f9      	ldr	r1, [r7, #12]
 800fb94:	f7fe fb1d 	bl	800e1d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f103 021c 	add.w	r2, r3, #28
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	4619      	mov	r1, r3
 800fba4:	4610      	mov	r0, r2
 800fba6:	f7fd fb13 	bl	800d1d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3316      	adds	r3, #22
 800fbae:	6939      	ldr	r1, [r7, #16]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fd fb0d 	bl	800d1d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3312      	adds	r3, #18
 800fbba:	2100      	movs	r1, #0
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7fd faec 	bl	800d19a <st_word>
					fs->wflag = 1;
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fd fd88 	bl	800d6e0 <sync_fs>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
 800fbd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff ff7b 	bl	800faf0 <f_sync>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fbfe:	7bfb      	ldrb	r3, [r7, #15]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d118      	bne.n	800fc36 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f107 0208 	add.w	r2, r7, #8
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7ff fb93 	bl	800f338 <validate>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10c      	bne.n	800fc36 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fd fc8b 	bl	800d53c <dec_lock>
 800fc26:	4603      	mov	r3, r0
 800fc28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d102      	bne.n	800fc36 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b090      	sub	sp, #64	; 0x40
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f107 0208 	add.w	r2, r7, #8
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fb70 	bl	800f338 <validate>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fc5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d103      	bne.n	800fc6e <f_lseek+0x2e>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	7d5b      	ldrb	r3, [r3, #21]
 800fc6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fc6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <f_lseek+0x3c>
 800fc76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc7a:	e201      	b.n	8010080 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f000 80d9 	beq.w	800fe38 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8c:	d15a      	bne.n	800fd44 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc92:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	1d1a      	adds	r2, r3, #4
 800fc98:	627a      	str	r2, [r7, #36]	; 0x24
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	617b      	str	r3, [r7, #20]
 800fc9e:	2302      	movs	r3, #2
 800fca0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d03a      	beq.n	800fd24 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	613b      	str	r3, [r7, #16]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	3302      	adds	r3, #2
 800fcba:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fd fd97 	bl	800d7fe <get_fat>
 800fcd0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d804      	bhi.n	800fce2 <f_lseek+0xa2>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2202      	movs	r2, #2
 800fcdc:	755a      	strb	r2, [r3, #21]
 800fcde:	2302      	movs	r3, #2
 800fce0:	e1ce      	b.n	8010080 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce8:	d104      	bne.n	800fcf4 <f_lseek+0xb4>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2201      	movs	r2, #1
 800fcee:	755a      	strb	r2, [r3, #21]
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e1c5      	b.n	8010080 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d0de      	beq.n	800fcbc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fcfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d809      	bhi.n	800fd1a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd08:	1d1a      	adds	r2, r3, #4
 800fd0a:	627a      	str	r2, [r7, #36]	; 0x24
 800fd0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd0e:	601a      	str	r2, [r3, #0]
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	1d1a      	adds	r2, r3, #4
 800fd14:	627a      	str	r2, [r7, #36]	; 0x24
 800fd16:	693a      	ldr	r2, [r7, #16]
 800fd18:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	69db      	ldr	r3, [r3, #28]
 800fd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d3c4      	bcc.n	800fcae <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fd2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d803      	bhi.n	800fd3c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	2200      	movs	r2, #0
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	e19f      	b.n	801007c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fd3c:	2311      	movs	r3, #17
 800fd3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd42:	e19b      	b.n	801007c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d902      	bls.n	800fd54 <f_lseek+0x114>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 818d 	beq.w	801007c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	4619      	mov	r1, r3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f7fe f835 	bl	800ddd8 <clmt_clust>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fd74:	68ba      	ldr	r2, [r7, #8]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	f7fd fd1f 	bl	800d7c0 <clust2sect>
 800fd82:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d104      	bne.n	800fd94 <f_lseek+0x154>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2202      	movs	r2, #2
 800fd8e:	755a      	strb	r2, [r3, #21]
 800fd90:	2302      	movs	r3, #2
 800fd92:	e175      	b.n	8010080 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	8992      	ldrh	r2, [r2, #12]
 800fd9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	8952      	ldrh	r2, [r2, #10]
 800fda4:	3a01      	subs	r2, #1
 800fda6:	4013      	ands	r3, r2
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	4413      	add	r3, r2
 800fdac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	68ba      	ldr	r2, [r7, #8]
 800fdb4:	8992      	ldrh	r2, [r2, #12]
 800fdb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdba:	fb02 f201 	mul.w	r2, r2, r1
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 815b 	beq.w	801007c <f_lseek+0x43c>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	69ba      	ldr	r2, [r7, #24]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	f000 8155 	beq.w	801007c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	7d1b      	ldrb	r3, [r3, #20]
 800fdd6:	b25b      	sxtb	r3, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da18      	bge.n	800fe0e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	7858      	ldrb	r0, [r3, #1]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1a      	ldr	r2, [r3, #32]
 800fdea:	2301      	movs	r3, #1
 800fdec:	f7fd f95c 	bl	800d0a8 <disk_write>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d004      	beq.n	800fe00 <f_lseek+0x1c0>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	755a      	strb	r2, [r3, #21]
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e13f      	b.n	8010080 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
 800fe04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	7858      	ldrb	r0, [r3, #1]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe18:	2301      	movs	r3, #1
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	f7fd f924 	bl	800d068 <disk_read>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <f_lseek+0x1f0>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	755a      	strb	r2, [r3, #21]
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e127      	b.n	8010080 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	69ba      	ldr	r2, [r7, #24]
 800fe34:	621a      	str	r2, [r3, #32]
 800fe36:	e121      	b.n	801007c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d908      	bls.n	800fe54 <f_lseek+0x214>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7d1b      	ldrb	r3, [r3, #20]
 800fe46:	f003 0302 	and.w	r3, r3, #2
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d102      	bne.n	800fe54 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	699b      	ldr	r3, [r3, #24]
 800fe58:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe62:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	f000 80b5 	beq.w	800ffd6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	895b      	ldrh	r3, [r3, #10]
 800fe70:	461a      	mov	r2, r3
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	fb03 f302 	mul.w	r3, r3, r2
 800fe7a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d01b      	beq.n	800feba <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	1e5a      	subs	r2, r3, #1
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	fbb2 f2f3 	udiv	r2, r2, r3
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	1e59      	subs	r1, r3, #1
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d30f      	bcc.n	800feba <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	1e5a      	subs	r2, r3, #1
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	425b      	negs	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	1ad3      	subs	r3, r2, r3
 800feb0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	69db      	ldr	r3, [r3, #28]
 800feb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800feb8:	e022      	b.n	800ff00 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d119      	bne.n	800fefa <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2100      	movs	r1, #0
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fd feec 	bl	800dca8 <create_chain>
 800fed0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d104      	bne.n	800fee2 <f_lseek+0x2a2>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2202      	movs	r2, #2
 800fedc:	755a      	strb	r2, [r3, #21]
 800fede:	2302      	movs	r3, #2
 800fee0:	e0ce      	b.n	8010080 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee8:	d104      	bne.n	800fef4 <f_lseek+0x2b4>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2201      	movs	r2, #1
 800feee:	755a      	strb	r2, [r3, #21]
 800fef0:	2301      	movs	r3, #1
 800fef2:	e0c5      	b.n	8010080 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fef8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fefe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d067      	beq.n	800ffd6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ff06:	e03a      	b.n	800ff7e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	1ad3      	subs	r3, r2, r3
 800ff0e:	603b      	str	r3, [r7, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	699a      	ldr	r2, [r3, #24]
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	441a      	add	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	7d1b      	ldrb	r3, [r3, #20]
 800ff20:	f003 0302 	and.w	r3, r3, #2
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00b      	beq.n	800ff40 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fd febb 	bl	800dca8 <create_chain>
 800ff32:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d108      	bne.n	800ff4c <f_lseek+0x30c>
							ofs = 0; break;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	603b      	str	r3, [r7, #0]
 800ff3e:	e022      	b.n	800ff86 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fd fc5a 	bl	800d7fe <get_fat>
 800ff4a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff52:	d104      	bne.n	800ff5e <f_lseek+0x31e>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	755a      	strb	r2, [r3, #21]
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e090      	b.n	8010080 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d904      	bls.n	800ff6e <f_lseek+0x32e>
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	69db      	ldr	r3, [r3, #28]
 800ff68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d304      	bcc.n	800ff78 <f_lseek+0x338>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2202      	movs	r2, #2
 800ff72:	755a      	strb	r2, [r3, #21]
 800ff74:	2302      	movs	r3, #2
 800ff76:	e083      	b.n	8010080 <f_lseek+0x440>
					fp->clust = clst;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff7c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d8c0      	bhi.n	800ff08 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	699a      	ldr	r2, [r3, #24]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	441a      	add	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	461a      	mov	r2, r3
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff9e:	fb02 f201 	mul.w	r2, r2, r1
 800ffa2:	1a9b      	subs	r3, r3, r2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d016      	beq.n	800ffd6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fd fc07 	bl	800d7c0 <clust2sect>
 800ffb2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ffb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d104      	bne.n	800ffc4 <f_lseek+0x384>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2202      	movs	r2, #2
 800ffbe:	755a      	strb	r2, [r3, #21]
 800ffc0:	2302      	movs	r3, #2
 800ffc2:	e05d      	b.n	8010080 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	899b      	ldrh	r3, [r3, #12]
 800ffc8:	461a      	mov	r2, r3
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffd2:	4413      	add	r3, r2
 800ffd4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	699a      	ldr	r2, [r3, #24]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d90a      	bls.n	800fff8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	699a      	ldr	r2, [r3, #24]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	7d1b      	ldrb	r3, [r3, #20]
 800ffee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fff2:	b2da      	uxtb	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	8992      	ldrh	r2, [r2, #12]
 8010000:	fbb3 f1f2 	udiv	r1, r3, r2
 8010004:	fb02 f201 	mul.w	r2, r2, r1
 8010008:	1a9b      	subs	r3, r3, r2
 801000a:	2b00      	cmp	r3, #0
 801000c:	d036      	beq.n	801007c <f_lseek+0x43c>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a1b      	ldr	r3, [r3, #32]
 8010012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010014:	429a      	cmp	r2, r3
 8010016:	d031      	beq.n	801007c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	7d1b      	ldrb	r3, [r3, #20]
 801001c:	b25b      	sxtb	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	da18      	bge.n	8010054 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	7858      	ldrb	r0, [r3, #1]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a1a      	ldr	r2, [r3, #32]
 8010030:	2301      	movs	r3, #1
 8010032:	f7fd f839 	bl	800d0a8 <disk_write>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d004      	beq.n	8010046 <f_lseek+0x406>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2201      	movs	r2, #1
 8010040:	755a      	strb	r2, [r3, #21]
 8010042:	2301      	movs	r3, #1
 8010044:	e01c      	b.n	8010080 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	7d1b      	ldrb	r3, [r3, #20]
 801004a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	7858      	ldrb	r0, [r3, #1]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801005e:	2301      	movs	r3, #1
 8010060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010062:	f7fd f801 	bl	800d068 <disk_read>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d004      	beq.n	8010076 <f_lseek+0x436>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	755a      	strb	r2, [r3, #21]
 8010072:	2301      	movs	r3, #1
 8010074:	e004      	b.n	8010080 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801007a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801007c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010080:	4618      	mov	r0, r3
 8010082:	3740      	adds	r7, #64	; 0x40
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010088:	b480      	push	{r7}
 801008a:	b087      	sub	sp, #28
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	4613      	mov	r3, r2
 8010094:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010096:	2301      	movs	r3, #1
 8010098:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801009e:	4b1f      	ldr	r3, [pc, #124]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100a0:	7a5b      	ldrb	r3, [r3, #9]
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d131      	bne.n	801010c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80100a8:	4b1c      	ldr	r3, [pc, #112]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100aa:	7a5b      	ldrb	r3, [r3, #9]
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b1a      	ldr	r3, [pc, #104]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100b2:	2100      	movs	r1, #0
 80100b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80100b6:	4b19      	ldr	r3, [pc, #100]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100b8:	7a5b      	ldrb	r3, [r3, #9]
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	4a17      	ldr	r2, [pc, #92]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80100c6:	4b15      	ldr	r3, [pc, #84]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100c8:	7a5b      	ldrb	r3, [r3, #9]
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b13      	ldr	r3, [pc, #76]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100d0:	4413      	add	r3, r2
 80100d2:	79fa      	ldrb	r2, [r7, #7]
 80100d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80100d6:	4b11      	ldr	r3, [pc, #68]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100d8:	7a5b      	ldrb	r3, [r3, #9]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	1c5a      	adds	r2, r3, #1
 80100de:	b2d1      	uxtb	r1, r2
 80100e0:	4a0e      	ldr	r2, [pc, #56]	; (801011c <FATFS_LinkDriverEx+0x94>)
 80100e2:	7251      	strb	r1, [r2, #9]
 80100e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80100e6:	7dbb      	ldrb	r3, [r7, #22]
 80100e8:	3330      	adds	r3, #48	; 0x30
 80100ea:	b2da      	uxtb	r2, r3
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	3301      	adds	r3, #1
 80100f4:	223a      	movs	r2, #58	; 0x3a
 80100f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3302      	adds	r3, #2
 80100fc:	222f      	movs	r2, #47	; 0x2f
 80100fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	3303      	adds	r3, #3
 8010104:	2200      	movs	r2, #0
 8010106:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801010c:	7dfb      	ldrb	r3, [r7, #23]
}
 801010e:	4618      	mov	r0, r3
 8010110:	371c      	adds	r7, #28
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	200004f0 	.word	0x200004f0

08010120 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801012a:	2200      	movs	r2, #0
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff ffaa 	bl	8010088 <FATFS_LinkDriverEx>
 8010134:	4603      	mov	r3, r0
}
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010140:	b480      	push	{r7}
 8010142:	b085      	sub	sp, #20
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801014c:	88fb      	ldrh	r3, [r7, #6]
 801014e:	2b7f      	cmp	r3, #127	; 0x7f
 8010150:	d802      	bhi.n	8010158 <ff_convert+0x18>
		c = chr;
 8010152:	88fb      	ldrh	r3, [r7, #6]
 8010154:	81fb      	strh	r3, [r7, #14]
 8010156:	e025      	b.n	80101a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00b      	beq.n	8010176 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801015e:	88fb      	ldrh	r3, [r7, #6]
 8010160:	2bff      	cmp	r3, #255	; 0xff
 8010162:	d805      	bhi.n	8010170 <ff_convert+0x30>
 8010164:	88fb      	ldrh	r3, [r7, #6]
 8010166:	3b80      	subs	r3, #128	; 0x80
 8010168:	4a12      	ldr	r2, [pc, #72]	; (80101b4 <ff_convert+0x74>)
 801016a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801016e:	e000      	b.n	8010172 <ff_convert+0x32>
 8010170:	2300      	movs	r3, #0
 8010172:	81fb      	strh	r3, [r7, #14]
 8010174:	e016      	b.n	80101a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010176:	2300      	movs	r3, #0
 8010178:	81fb      	strh	r3, [r7, #14]
 801017a:	e009      	b.n	8010190 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	4a0d      	ldr	r2, [pc, #52]	; (80101b4 <ff_convert+0x74>)
 8010180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010184:	88fa      	ldrh	r2, [r7, #6]
 8010186:	429a      	cmp	r2, r3
 8010188:	d006      	beq.n	8010198 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801018a:	89fb      	ldrh	r3, [r7, #14]
 801018c:	3301      	adds	r3, #1
 801018e:	81fb      	strh	r3, [r7, #14]
 8010190:	89fb      	ldrh	r3, [r7, #14]
 8010192:	2b7f      	cmp	r3, #127	; 0x7f
 8010194:	d9f2      	bls.n	801017c <ff_convert+0x3c>
 8010196:	e000      	b.n	801019a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010198:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801019a:	89fb      	ldrh	r3, [r7, #14]
 801019c:	3380      	adds	r3, #128	; 0x80
 801019e:	b29b      	uxth	r3, r3
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80101a4:	89fb      	ldrh	r3, [r7, #14]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	08016f34 	.word	0x08016f34

080101b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b087      	sub	sp, #28
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80101c2:	88fb      	ldrh	r3, [r7, #6]
 80101c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101c8:	d201      	bcs.n	80101ce <ff_wtoupper+0x16>
 80101ca:	4b3e      	ldr	r3, [pc, #248]	; (80102c4 <ff_wtoupper+0x10c>)
 80101cc:	e000      	b.n	80101d0 <ff_wtoupper+0x18>
 80101ce:	4b3e      	ldr	r3, [pc, #248]	; (80102c8 <ff_wtoupper+0x110>)
 80101d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	1c9a      	adds	r2, r3, #2
 80101d6:	617a      	str	r2, [r7, #20]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80101dc:	8a7b      	ldrh	r3, [r7, #18]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d068      	beq.n	80102b4 <ff_wtoupper+0xfc>
 80101e2:	88fa      	ldrh	r2, [r7, #6]
 80101e4:	8a7b      	ldrh	r3, [r7, #18]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d364      	bcc.n	80102b4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	1c9a      	adds	r2, r3, #2
 80101ee:	617a      	str	r2, [r7, #20]
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	823b      	strh	r3, [r7, #16]
 80101f4:	8a3b      	ldrh	r3, [r7, #16]
 80101f6:	0a1b      	lsrs	r3, r3, #8
 80101f8:	81fb      	strh	r3, [r7, #14]
 80101fa:	8a3b      	ldrh	r3, [r7, #16]
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010200:	88fa      	ldrh	r2, [r7, #6]
 8010202:	8a79      	ldrh	r1, [r7, #18]
 8010204:	8a3b      	ldrh	r3, [r7, #16]
 8010206:	440b      	add	r3, r1
 8010208:	429a      	cmp	r2, r3
 801020a:	da49      	bge.n	80102a0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801020c:	89fb      	ldrh	r3, [r7, #14]
 801020e:	2b08      	cmp	r3, #8
 8010210:	d84f      	bhi.n	80102b2 <ff_wtoupper+0xfa>
 8010212:	a201      	add	r2, pc, #4	; (adr r2, 8010218 <ff_wtoupper+0x60>)
 8010214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010218:	0801023d 	.word	0x0801023d
 801021c:	0801024f 	.word	0x0801024f
 8010220:	08010265 	.word	0x08010265
 8010224:	0801026d 	.word	0x0801026d
 8010228:	08010275 	.word	0x08010275
 801022c:	0801027d 	.word	0x0801027d
 8010230:	08010285 	.word	0x08010285
 8010234:	0801028d 	.word	0x0801028d
 8010238:	08010295 	.word	0x08010295
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801023c:	88fa      	ldrh	r2, [r7, #6]
 801023e:	8a7b      	ldrh	r3, [r7, #18]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	4413      	add	r3, r2
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	80fb      	strh	r3, [r7, #6]
 801024c:	e027      	b.n	801029e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801024e:	88fa      	ldrh	r2, [r7, #6]
 8010250:	8a7b      	ldrh	r3, [r7, #18]
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	b29b      	uxth	r3, r3
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	b29b      	uxth	r3, r3
 801025c:	88fa      	ldrh	r2, [r7, #6]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	80fb      	strh	r3, [r7, #6]
 8010262:	e01c      	b.n	801029e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010264:	88fb      	ldrh	r3, [r7, #6]
 8010266:	3b10      	subs	r3, #16
 8010268:	80fb      	strh	r3, [r7, #6]
 801026a:	e018      	b.n	801029e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801026c:	88fb      	ldrh	r3, [r7, #6]
 801026e:	3b20      	subs	r3, #32
 8010270:	80fb      	strh	r3, [r7, #6]
 8010272:	e014      	b.n	801029e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010274:	88fb      	ldrh	r3, [r7, #6]
 8010276:	3b30      	subs	r3, #48	; 0x30
 8010278:	80fb      	strh	r3, [r7, #6]
 801027a:	e010      	b.n	801029e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801027c:	88fb      	ldrh	r3, [r7, #6]
 801027e:	3b1a      	subs	r3, #26
 8010280:	80fb      	strh	r3, [r7, #6]
 8010282:	e00c      	b.n	801029e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010284:	88fb      	ldrh	r3, [r7, #6]
 8010286:	3308      	adds	r3, #8
 8010288:	80fb      	strh	r3, [r7, #6]
 801028a:	e008      	b.n	801029e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801028c:	88fb      	ldrh	r3, [r7, #6]
 801028e:	3b50      	subs	r3, #80	; 0x50
 8010290:	80fb      	strh	r3, [r7, #6]
 8010292:	e004      	b.n	801029e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010294:	88fb      	ldrh	r3, [r7, #6]
 8010296:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801029a:	80fb      	strh	r3, [r7, #6]
 801029c:	bf00      	nop
			}
			break;
 801029e:	e008      	b.n	80102b2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80102a0:	89fb      	ldrh	r3, [r7, #14]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d195      	bne.n	80101d2 <ff_wtoupper+0x1a>
 80102a6:	8a3b      	ldrh	r3, [r7, #16]
 80102a8:	005b      	lsls	r3, r3, #1
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	4413      	add	r3, r2
 80102ae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80102b0:	e78f      	b.n	80101d2 <ff_wtoupper+0x1a>
			break;
 80102b2:	bf00      	nop
	}

	return chr;
 80102b4:	88fb      	ldrh	r3, [r7, #6]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	371c      	adds	r7, #28
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr
 80102c2:	bf00      	nop
 80102c4:	08017034 	.word	0x08017034
 80102c8:	08017228 	.word	0x08017228

080102cc <__errno>:
 80102cc:	4b01      	ldr	r3, [pc, #4]	; (80102d4 <__errno+0x8>)
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20000050 	.word	0x20000050

080102d8 <__libc_init_array>:
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	4d0d      	ldr	r5, [pc, #52]	; (8010310 <__libc_init_array+0x38>)
 80102dc:	4c0d      	ldr	r4, [pc, #52]	; (8010314 <__libc_init_array+0x3c>)
 80102de:	1b64      	subs	r4, r4, r5
 80102e0:	10a4      	asrs	r4, r4, #2
 80102e2:	2600      	movs	r6, #0
 80102e4:	42a6      	cmp	r6, r4
 80102e6:	d109      	bne.n	80102fc <__libc_init_array+0x24>
 80102e8:	4d0b      	ldr	r5, [pc, #44]	; (8010318 <__libc_init_array+0x40>)
 80102ea:	4c0c      	ldr	r4, [pc, #48]	; (801031c <__libc_init_array+0x44>)
 80102ec:	f006 fc92 	bl	8016c14 <_init>
 80102f0:	1b64      	subs	r4, r4, r5
 80102f2:	10a4      	asrs	r4, r4, #2
 80102f4:	2600      	movs	r6, #0
 80102f6:	42a6      	cmp	r6, r4
 80102f8:	d105      	bne.n	8010306 <__libc_init_array+0x2e>
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010300:	4798      	blx	r3
 8010302:	3601      	adds	r6, #1
 8010304:	e7ee      	b.n	80102e4 <__libc_init_array+0xc>
 8010306:	f855 3b04 	ldr.w	r3, [r5], #4
 801030a:	4798      	blx	r3
 801030c:	3601      	adds	r6, #1
 801030e:	e7f2      	b.n	80102f6 <__libc_init_array+0x1e>
 8010310:	08017840 	.word	0x08017840
 8010314:	08017840 	.word	0x08017840
 8010318:	08017840 	.word	0x08017840
 801031c:	08017844 	.word	0x08017844

08010320 <memcpy>:
 8010320:	440a      	add	r2, r1
 8010322:	4291      	cmp	r1, r2
 8010324:	f100 33ff 	add.w	r3, r0, #4294967295
 8010328:	d100      	bne.n	801032c <memcpy+0xc>
 801032a:	4770      	bx	lr
 801032c:	b510      	push	{r4, lr}
 801032e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010336:	4291      	cmp	r1, r2
 8010338:	d1f9      	bne.n	801032e <memcpy+0xe>
 801033a:	bd10      	pop	{r4, pc}

0801033c <memset>:
 801033c:	4402      	add	r2, r0
 801033e:	4603      	mov	r3, r0
 8010340:	4293      	cmp	r3, r2
 8010342:	d100      	bne.n	8010346 <memset+0xa>
 8010344:	4770      	bx	lr
 8010346:	f803 1b01 	strb.w	r1, [r3], #1
 801034a:	e7f9      	b.n	8010340 <memset+0x4>

0801034c <__cvt>:
 801034c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010350:	ec55 4b10 	vmov	r4, r5, d0
 8010354:	2d00      	cmp	r5, #0
 8010356:	460e      	mov	r6, r1
 8010358:	4619      	mov	r1, r3
 801035a:	462b      	mov	r3, r5
 801035c:	bfbb      	ittet	lt
 801035e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010362:	461d      	movlt	r5, r3
 8010364:	2300      	movge	r3, #0
 8010366:	232d      	movlt	r3, #45	; 0x2d
 8010368:	700b      	strb	r3, [r1, #0]
 801036a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801036c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010370:	4691      	mov	r9, r2
 8010372:	f023 0820 	bic.w	r8, r3, #32
 8010376:	bfbc      	itt	lt
 8010378:	4622      	movlt	r2, r4
 801037a:	4614      	movlt	r4, r2
 801037c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010380:	d005      	beq.n	801038e <__cvt+0x42>
 8010382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010386:	d100      	bne.n	801038a <__cvt+0x3e>
 8010388:	3601      	adds	r6, #1
 801038a:	2102      	movs	r1, #2
 801038c:	e000      	b.n	8010390 <__cvt+0x44>
 801038e:	2103      	movs	r1, #3
 8010390:	ab03      	add	r3, sp, #12
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	ab02      	add	r3, sp, #8
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	ec45 4b10 	vmov	d0, r4, r5
 801039c:	4653      	mov	r3, sl
 801039e:	4632      	mov	r2, r6
 80103a0:	f001 fe92 	bl	80120c8 <_dtoa_r>
 80103a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80103a8:	4607      	mov	r7, r0
 80103aa:	d102      	bne.n	80103b2 <__cvt+0x66>
 80103ac:	f019 0f01 	tst.w	r9, #1
 80103b0:	d022      	beq.n	80103f8 <__cvt+0xac>
 80103b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103b6:	eb07 0906 	add.w	r9, r7, r6
 80103ba:	d110      	bne.n	80103de <__cvt+0x92>
 80103bc:	783b      	ldrb	r3, [r7, #0]
 80103be:	2b30      	cmp	r3, #48	; 0x30
 80103c0:	d10a      	bne.n	80103d8 <__cvt+0x8c>
 80103c2:	2200      	movs	r2, #0
 80103c4:	2300      	movs	r3, #0
 80103c6:	4620      	mov	r0, r4
 80103c8:	4629      	mov	r1, r5
 80103ca:	f7f0 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ce:	b918      	cbnz	r0, 80103d8 <__cvt+0x8c>
 80103d0:	f1c6 0601 	rsb	r6, r6, #1
 80103d4:	f8ca 6000 	str.w	r6, [sl]
 80103d8:	f8da 3000 	ldr.w	r3, [sl]
 80103dc:	4499      	add	r9, r3
 80103de:	2200      	movs	r2, #0
 80103e0:	2300      	movs	r3, #0
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7f0 fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ea:	b108      	cbz	r0, 80103f0 <__cvt+0xa4>
 80103ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80103f0:	2230      	movs	r2, #48	; 0x30
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	454b      	cmp	r3, r9
 80103f6:	d307      	bcc.n	8010408 <__cvt+0xbc>
 80103f8:	9b03      	ldr	r3, [sp, #12]
 80103fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103fc:	1bdb      	subs	r3, r3, r7
 80103fe:	4638      	mov	r0, r7
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	b004      	add	sp, #16
 8010404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010408:	1c59      	adds	r1, r3, #1
 801040a:	9103      	str	r1, [sp, #12]
 801040c:	701a      	strb	r2, [r3, #0]
 801040e:	e7f0      	b.n	80103f2 <__cvt+0xa6>

08010410 <__exponent>:
 8010410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010412:	4603      	mov	r3, r0
 8010414:	2900      	cmp	r1, #0
 8010416:	bfb8      	it	lt
 8010418:	4249      	neglt	r1, r1
 801041a:	f803 2b02 	strb.w	r2, [r3], #2
 801041e:	bfb4      	ite	lt
 8010420:	222d      	movlt	r2, #45	; 0x2d
 8010422:	222b      	movge	r2, #43	; 0x2b
 8010424:	2909      	cmp	r1, #9
 8010426:	7042      	strb	r2, [r0, #1]
 8010428:	dd2a      	ble.n	8010480 <__exponent+0x70>
 801042a:	f10d 0407 	add.w	r4, sp, #7
 801042e:	46a4      	mov	ip, r4
 8010430:	270a      	movs	r7, #10
 8010432:	46a6      	mov	lr, r4
 8010434:	460a      	mov	r2, r1
 8010436:	fb91 f6f7 	sdiv	r6, r1, r7
 801043a:	fb07 1516 	mls	r5, r7, r6, r1
 801043e:	3530      	adds	r5, #48	; 0x30
 8010440:	2a63      	cmp	r2, #99	; 0x63
 8010442:	f104 34ff 	add.w	r4, r4, #4294967295
 8010446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801044a:	4631      	mov	r1, r6
 801044c:	dcf1      	bgt.n	8010432 <__exponent+0x22>
 801044e:	3130      	adds	r1, #48	; 0x30
 8010450:	f1ae 0502 	sub.w	r5, lr, #2
 8010454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010458:	1c44      	adds	r4, r0, #1
 801045a:	4629      	mov	r1, r5
 801045c:	4561      	cmp	r1, ip
 801045e:	d30a      	bcc.n	8010476 <__exponent+0x66>
 8010460:	f10d 0209 	add.w	r2, sp, #9
 8010464:	eba2 020e 	sub.w	r2, r2, lr
 8010468:	4565      	cmp	r5, ip
 801046a:	bf88      	it	hi
 801046c:	2200      	movhi	r2, #0
 801046e:	4413      	add	r3, r2
 8010470:	1a18      	subs	r0, r3, r0
 8010472:	b003      	add	sp, #12
 8010474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010476:	f811 2b01 	ldrb.w	r2, [r1], #1
 801047a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801047e:	e7ed      	b.n	801045c <__exponent+0x4c>
 8010480:	2330      	movs	r3, #48	; 0x30
 8010482:	3130      	adds	r1, #48	; 0x30
 8010484:	7083      	strb	r3, [r0, #2]
 8010486:	70c1      	strb	r1, [r0, #3]
 8010488:	1d03      	adds	r3, r0, #4
 801048a:	e7f1      	b.n	8010470 <__exponent+0x60>

0801048c <_printf_float>:
 801048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010490:	ed2d 8b02 	vpush	{d8}
 8010494:	b08d      	sub	sp, #52	; 0x34
 8010496:	460c      	mov	r4, r1
 8010498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801049c:	4616      	mov	r6, r2
 801049e:	461f      	mov	r7, r3
 80104a0:	4605      	mov	r5, r0
 80104a2:	f002 ff6d 	bl	8013380 <_localeconv_r>
 80104a6:	f8d0 a000 	ldr.w	sl, [r0]
 80104aa:	4650      	mov	r0, sl
 80104ac:	f7ef fe98 	bl	80001e0 <strlen>
 80104b0:	2300      	movs	r3, #0
 80104b2:	930a      	str	r3, [sp, #40]	; 0x28
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	9305      	str	r3, [sp, #20]
 80104b8:	f8d8 3000 	ldr.w	r3, [r8]
 80104bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80104c0:	3307      	adds	r3, #7
 80104c2:	f023 0307 	bic.w	r3, r3, #7
 80104c6:	f103 0208 	add.w	r2, r3, #8
 80104ca:	f8c8 2000 	str.w	r2, [r8]
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80104d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80104da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104de:	9307      	str	r3, [sp, #28]
 80104e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80104e4:	ee08 0a10 	vmov	s16, r0
 80104e8:	4b9f      	ldr	r3, [pc, #636]	; (8010768 <_printf_float+0x2dc>)
 80104ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104ee:	f04f 32ff 	mov.w	r2, #4294967295
 80104f2:	f7f0 fb23 	bl	8000b3c <__aeabi_dcmpun>
 80104f6:	bb88      	cbnz	r0, 801055c <_printf_float+0xd0>
 80104f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104fc:	4b9a      	ldr	r3, [pc, #616]	; (8010768 <_printf_float+0x2dc>)
 80104fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010502:	f7f0 fafd 	bl	8000b00 <__aeabi_dcmple>
 8010506:	bb48      	cbnz	r0, 801055c <_printf_float+0xd0>
 8010508:	2200      	movs	r2, #0
 801050a:	2300      	movs	r3, #0
 801050c:	4640      	mov	r0, r8
 801050e:	4649      	mov	r1, r9
 8010510:	f7f0 faec 	bl	8000aec <__aeabi_dcmplt>
 8010514:	b110      	cbz	r0, 801051c <_printf_float+0x90>
 8010516:	232d      	movs	r3, #45	; 0x2d
 8010518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801051c:	4b93      	ldr	r3, [pc, #588]	; (801076c <_printf_float+0x2e0>)
 801051e:	4894      	ldr	r0, [pc, #592]	; (8010770 <_printf_float+0x2e4>)
 8010520:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010524:	bf94      	ite	ls
 8010526:	4698      	movls	r8, r3
 8010528:	4680      	movhi	r8, r0
 801052a:	2303      	movs	r3, #3
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	9b05      	ldr	r3, [sp, #20]
 8010530:	f023 0204 	bic.w	r2, r3, #4
 8010534:	6022      	str	r2, [r4, #0]
 8010536:	f04f 0900 	mov.w	r9, #0
 801053a:	9700      	str	r7, [sp, #0]
 801053c:	4633      	mov	r3, r6
 801053e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010540:	4621      	mov	r1, r4
 8010542:	4628      	mov	r0, r5
 8010544:	f000 f9d8 	bl	80108f8 <_printf_common>
 8010548:	3001      	adds	r0, #1
 801054a:	f040 8090 	bne.w	801066e <_printf_float+0x1e2>
 801054e:	f04f 30ff 	mov.w	r0, #4294967295
 8010552:	b00d      	add	sp, #52	; 0x34
 8010554:	ecbd 8b02 	vpop	{d8}
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	4640      	mov	r0, r8
 8010562:	4649      	mov	r1, r9
 8010564:	f7f0 faea 	bl	8000b3c <__aeabi_dcmpun>
 8010568:	b140      	cbz	r0, 801057c <_printf_float+0xf0>
 801056a:	464b      	mov	r3, r9
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfbc      	itt	lt
 8010570:	232d      	movlt	r3, #45	; 0x2d
 8010572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010576:	487f      	ldr	r0, [pc, #508]	; (8010774 <_printf_float+0x2e8>)
 8010578:	4b7f      	ldr	r3, [pc, #508]	; (8010778 <_printf_float+0x2ec>)
 801057a:	e7d1      	b.n	8010520 <_printf_float+0x94>
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010582:	9206      	str	r2, [sp, #24]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	d13f      	bne.n	8010608 <_printf_float+0x17c>
 8010588:	2306      	movs	r3, #6
 801058a:	6063      	str	r3, [r4, #4]
 801058c:	9b05      	ldr	r3, [sp, #20]
 801058e:	6861      	ldr	r1, [r4, #4]
 8010590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010594:	2300      	movs	r3, #0
 8010596:	9303      	str	r3, [sp, #12]
 8010598:	ab0a      	add	r3, sp, #40	; 0x28
 801059a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801059e:	ab09      	add	r3, sp, #36	; 0x24
 80105a0:	ec49 8b10 	vmov	d0, r8, r9
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff fecd 	bl	801034c <__cvt>
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105b6:	2b47      	cmp	r3, #71	; 0x47
 80105b8:	4680      	mov	r8, r0
 80105ba:	d108      	bne.n	80105ce <_printf_float+0x142>
 80105bc:	1cc8      	adds	r0, r1, #3
 80105be:	db02      	blt.n	80105c6 <_printf_float+0x13a>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	4299      	cmp	r1, r3
 80105c4:	dd41      	ble.n	801064a <_printf_float+0x1be>
 80105c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80105ca:	fa5f fb8b 	uxtb.w	fp, fp
 80105ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105d2:	d820      	bhi.n	8010616 <_printf_float+0x18a>
 80105d4:	3901      	subs	r1, #1
 80105d6:	465a      	mov	r2, fp
 80105d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105dc:	9109      	str	r1, [sp, #36]	; 0x24
 80105de:	f7ff ff17 	bl	8010410 <__exponent>
 80105e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105e4:	1813      	adds	r3, r2, r0
 80105e6:	2a01      	cmp	r2, #1
 80105e8:	4681      	mov	r9, r0
 80105ea:	6123      	str	r3, [r4, #16]
 80105ec:	dc02      	bgt.n	80105f4 <_printf_float+0x168>
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	07d2      	lsls	r2, r2, #31
 80105f2:	d501      	bpl.n	80105f8 <_printf_float+0x16c>
 80105f4:	3301      	adds	r3, #1
 80105f6:	6123      	str	r3, [r4, #16]
 80105f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d09c      	beq.n	801053a <_printf_float+0xae>
 8010600:	232d      	movs	r3, #45	; 0x2d
 8010602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010606:	e798      	b.n	801053a <_printf_float+0xae>
 8010608:	9a06      	ldr	r2, [sp, #24]
 801060a:	2a47      	cmp	r2, #71	; 0x47
 801060c:	d1be      	bne.n	801058c <_printf_float+0x100>
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1bc      	bne.n	801058c <_printf_float+0x100>
 8010612:	2301      	movs	r3, #1
 8010614:	e7b9      	b.n	801058a <_printf_float+0xfe>
 8010616:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801061a:	d118      	bne.n	801064e <_printf_float+0x1c2>
 801061c:	2900      	cmp	r1, #0
 801061e:	6863      	ldr	r3, [r4, #4]
 8010620:	dd0b      	ble.n	801063a <_printf_float+0x1ae>
 8010622:	6121      	str	r1, [r4, #16]
 8010624:	b913      	cbnz	r3, 801062c <_printf_float+0x1a0>
 8010626:	6822      	ldr	r2, [r4, #0]
 8010628:	07d0      	lsls	r0, r2, #31
 801062a:	d502      	bpl.n	8010632 <_printf_float+0x1a6>
 801062c:	3301      	adds	r3, #1
 801062e:	440b      	add	r3, r1
 8010630:	6123      	str	r3, [r4, #16]
 8010632:	65a1      	str	r1, [r4, #88]	; 0x58
 8010634:	f04f 0900 	mov.w	r9, #0
 8010638:	e7de      	b.n	80105f8 <_printf_float+0x16c>
 801063a:	b913      	cbnz	r3, 8010642 <_printf_float+0x1b6>
 801063c:	6822      	ldr	r2, [r4, #0]
 801063e:	07d2      	lsls	r2, r2, #31
 8010640:	d501      	bpl.n	8010646 <_printf_float+0x1ba>
 8010642:	3302      	adds	r3, #2
 8010644:	e7f4      	b.n	8010630 <_printf_float+0x1a4>
 8010646:	2301      	movs	r3, #1
 8010648:	e7f2      	b.n	8010630 <_printf_float+0x1a4>
 801064a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801064e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010650:	4299      	cmp	r1, r3
 8010652:	db05      	blt.n	8010660 <_printf_float+0x1d4>
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	6121      	str	r1, [r4, #16]
 8010658:	07d8      	lsls	r0, r3, #31
 801065a:	d5ea      	bpl.n	8010632 <_printf_float+0x1a6>
 801065c:	1c4b      	adds	r3, r1, #1
 801065e:	e7e7      	b.n	8010630 <_printf_float+0x1a4>
 8010660:	2900      	cmp	r1, #0
 8010662:	bfd4      	ite	le
 8010664:	f1c1 0202 	rsble	r2, r1, #2
 8010668:	2201      	movgt	r2, #1
 801066a:	4413      	add	r3, r2
 801066c:	e7e0      	b.n	8010630 <_printf_float+0x1a4>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	055a      	lsls	r2, r3, #21
 8010672:	d407      	bmi.n	8010684 <_printf_float+0x1f8>
 8010674:	6923      	ldr	r3, [r4, #16]
 8010676:	4642      	mov	r2, r8
 8010678:	4631      	mov	r1, r6
 801067a:	4628      	mov	r0, r5
 801067c:	47b8      	blx	r7
 801067e:	3001      	adds	r0, #1
 8010680:	d12c      	bne.n	80106dc <_printf_float+0x250>
 8010682:	e764      	b.n	801054e <_printf_float+0xc2>
 8010684:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010688:	f240 80e0 	bls.w	801084c <_printf_float+0x3c0>
 801068c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010690:	2200      	movs	r2, #0
 8010692:	2300      	movs	r3, #0
 8010694:	f7f0 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8010698:	2800      	cmp	r0, #0
 801069a:	d034      	beq.n	8010706 <_printf_float+0x27a>
 801069c:	4a37      	ldr	r2, [pc, #220]	; (801077c <_printf_float+0x2f0>)
 801069e:	2301      	movs	r3, #1
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	47b8      	blx	r7
 80106a6:	3001      	adds	r0, #1
 80106a8:	f43f af51 	beq.w	801054e <_printf_float+0xc2>
 80106ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106b0:	429a      	cmp	r2, r3
 80106b2:	db02      	blt.n	80106ba <_printf_float+0x22e>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	07d8      	lsls	r0, r3, #31
 80106b8:	d510      	bpl.n	80106dc <_printf_float+0x250>
 80106ba:	ee18 3a10 	vmov	r3, s16
 80106be:	4652      	mov	r2, sl
 80106c0:	4631      	mov	r1, r6
 80106c2:	4628      	mov	r0, r5
 80106c4:	47b8      	blx	r7
 80106c6:	3001      	adds	r0, #1
 80106c8:	f43f af41 	beq.w	801054e <_printf_float+0xc2>
 80106cc:	f04f 0800 	mov.w	r8, #0
 80106d0:	f104 091a 	add.w	r9, r4, #26
 80106d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d6:	3b01      	subs	r3, #1
 80106d8:	4543      	cmp	r3, r8
 80106da:	dc09      	bgt.n	80106f0 <_printf_float+0x264>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	079b      	lsls	r3, r3, #30
 80106e0:	f100 8105 	bmi.w	80108ee <_printf_float+0x462>
 80106e4:	68e0      	ldr	r0, [r4, #12]
 80106e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106e8:	4298      	cmp	r0, r3
 80106ea:	bfb8      	it	lt
 80106ec:	4618      	movlt	r0, r3
 80106ee:	e730      	b.n	8010552 <_printf_float+0xc6>
 80106f0:	2301      	movs	r3, #1
 80106f2:	464a      	mov	r2, r9
 80106f4:	4631      	mov	r1, r6
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b8      	blx	r7
 80106fa:	3001      	adds	r0, #1
 80106fc:	f43f af27 	beq.w	801054e <_printf_float+0xc2>
 8010700:	f108 0801 	add.w	r8, r8, #1
 8010704:	e7e6      	b.n	80106d4 <_printf_float+0x248>
 8010706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010708:	2b00      	cmp	r3, #0
 801070a:	dc39      	bgt.n	8010780 <_printf_float+0x2f4>
 801070c:	4a1b      	ldr	r2, [pc, #108]	; (801077c <_printf_float+0x2f0>)
 801070e:	2301      	movs	r3, #1
 8010710:	4631      	mov	r1, r6
 8010712:	4628      	mov	r0, r5
 8010714:	47b8      	blx	r7
 8010716:	3001      	adds	r0, #1
 8010718:	f43f af19 	beq.w	801054e <_printf_float+0xc2>
 801071c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010720:	4313      	orrs	r3, r2
 8010722:	d102      	bne.n	801072a <_printf_float+0x29e>
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	07d9      	lsls	r1, r3, #31
 8010728:	d5d8      	bpl.n	80106dc <_printf_float+0x250>
 801072a:	ee18 3a10 	vmov	r3, s16
 801072e:	4652      	mov	r2, sl
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	47b8      	blx	r7
 8010736:	3001      	adds	r0, #1
 8010738:	f43f af09 	beq.w	801054e <_printf_float+0xc2>
 801073c:	f04f 0900 	mov.w	r9, #0
 8010740:	f104 0a1a 	add.w	sl, r4, #26
 8010744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010746:	425b      	negs	r3, r3
 8010748:	454b      	cmp	r3, r9
 801074a:	dc01      	bgt.n	8010750 <_printf_float+0x2c4>
 801074c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801074e:	e792      	b.n	8010676 <_printf_float+0x1ea>
 8010750:	2301      	movs	r3, #1
 8010752:	4652      	mov	r2, sl
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f aef7 	beq.w	801054e <_printf_float+0xc2>
 8010760:	f109 0901 	add.w	r9, r9, #1
 8010764:	e7ee      	b.n	8010744 <_printf_float+0x2b8>
 8010766:	bf00      	nop
 8010768:	7fefffff 	.word	0x7fefffff
 801076c:	080172e8 	.word	0x080172e8
 8010770:	080172ec 	.word	0x080172ec
 8010774:	080172f4 	.word	0x080172f4
 8010778:	080172f0 	.word	0x080172f0
 801077c:	080176f9 	.word	0x080176f9
 8010780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010784:	429a      	cmp	r2, r3
 8010786:	bfa8      	it	ge
 8010788:	461a      	movge	r2, r3
 801078a:	2a00      	cmp	r2, #0
 801078c:	4691      	mov	r9, r2
 801078e:	dc37      	bgt.n	8010800 <_printf_float+0x374>
 8010790:	f04f 0b00 	mov.w	fp, #0
 8010794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010798:	f104 021a 	add.w	r2, r4, #26
 801079c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801079e:	9305      	str	r3, [sp, #20]
 80107a0:	eba3 0309 	sub.w	r3, r3, r9
 80107a4:	455b      	cmp	r3, fp
 80107a6:	dc33      	bgt.n	8010810 <_printf_float+0x384>
 80107a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107ac:	429a      	cmp	r2, r3
 80107ae:	db3b      	blt.n	8010828 <_printf_float+0x39c>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	07da      	lsls	r2, r3, #31
 80107b4:	d438      	bmi.n	8010828 <_printf_float+0x39c>
 80107b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107b8:	9b05      	ldr	r3, [sp, #20]
 80107ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	eba2 0901 	sub.w	r9, r2, r1
 80107c2:	4599      	cmp	r9, r3
 80107c4:	bfa8      	it	ge
 80107c6:	4699      	movge	r9, r3
 80107c8:	f1b9 0f00 	cmp.w	r9, #0
 80107cc:	dc35      	bgt.n	801083a <_printf_float+0x3ae>
 80107ce:	f04f 0800 	mov.w	r8, #0
 80107d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107d6:	f104 0a1a 	add.w	sl, r4, #26
 80107da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	eba3 0309 	sub.w	r3, r3, r9
 80107e4:	4543      	cmp	r3, r8
 80107e6:	f77f af79 	ble.w	80106dc <_printf_float+0x250>
 80107ea:	2301      	movs	r3, #1
 80107ec:	4652      	mov	r2, sl
 80107ee:	4631      	mov	r1, r6
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b8      	blx	r7
 80107f4:	3001      	adds	r0, #1
 80107f6:	f43f aeaa 	beq.w	801054e <_printf_float+0xc2>
 80107fa:	f108 0801 	add.w	r8, r8, #1
 80107fe:	e7ec      	b.n	80107da <_printf_float+0x34e>
 8010800:	4613      	mov	r3, r2
 8010802:	4631      	mov	r1, r6
 8010804:	4642      	mov	r2, r8
 8010806:	4628      	mov	r0, r5
 8010808:	47b8      	blx	r7
 801080a:	3001      	adds	r0, #1
 801080c:	d1c0      	bne.n	8010790 <_printf_float+0x304>
 801080e:	e69e      	b.n	801054e <_printf_float+0xc2>
 8010810:	2301      	movs	r3, #1
 8010812:	4631      	mov	r1, r6
 8010814:	4628      	mov	r0, r5
 8010816:	9205      	str	r2, [sp, #20]
 8010818:	47b8      	blx	r7
 801081a:	3001      	adds	r0, #1
 801081c:	f43f ae97 	beq.w	801054e <_printf_float+0xc2>
 8010820:	9a05      	ldr	r2, [sp, #20]
 8010822:	f10b 0b01 	add.w	fp, fp, #1
 8010826:	e7b9      	b.n	801079c <_printf_float+0x310>
 8010828:	ee18 3a10 	vmov	r3, s16
 801082c:	4652      	mov	r2, sl
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	d1be      	bne.n	80107b6 <_printf_float+0x32a>
 8010838:	e689      	b.n	801054e <_printf_float+0xc2>
 801083a:	9a05      	ldr	r2, [sp, #20]
 801083c:	464b      	mov	r3, r9
 801083e:	4442      	add	r2, r8
 8010840:	4631      	mov	r1, r6
 8010842:	4628      	mov	r0, r5
 8010844:	47b8      	blx	r7
 8010846:	3001      	adds	r0, #1
 8010848:	d1c1      	bne.n	80107ce <_printf_float+0x342>
 801084a:	e680      	b.n	801054e <_printf_float+0xc2>
 801084c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801084e:	2a01      	cmp	r2, #1
 8010850:	dc01      	bgt.n	8010856 <_printf_float+0x3ca>
 8010852:	07db      	lsls	r3, r3, #31
 8010854:	d538      	bpl.n	80108c8 <_printf_float+0x43c>
 8010856:	2301      	movs	r3, #1
 8010858:	4642      	mov	r2, r8
 801085a:	4631      	mov	r1, r6
 801085c:	4628      	mov	r0, r5
 801085e:	47b8      	blx	r7
 8010860:	3001      	adds	r0, #1
 8010862:	f43f ae74 	beq.w	801054e <_printf_float+0xc2>
 8010866:	ee18 3a10 	vmov	r3, s16
 801086a:	4652      	mov	r2, sl
 801086c:	4631      	mov	r1, r6
 801086e:	4628      	mov	r0, r5
 8010870:	47b8      	blx	r7
 8010872:	3001      	adds	r0, #1
 8010874:	f43f ae6b 	beq.w	801054e <_printf_float+0xc2>
 8010878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801087c:	2200      	movs	r2, #0
 801087e:	2300      	movs	r3, #0
 8010880:	f7f0 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010884:	b9d8      	cbnz	r0, 80108be <_printf_float+0x432>
 8010886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010888:	f108 0201 	add.w	r2, r8, #1
 801088c:	3b01      	subs	r3, #1
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	47b8      	blx	r7
 8010894:	3001      	adds	r0, #1
 8010896:	d10e      	bne.n	80108b6 <_printf_float+0x42a>
 8010898:	e659      	b.n	801054e <_printf_float+0xc2>
 801089a:	2301      	movs	r3, #1
 801089c:	4652      	mov	r2, sl
 801089e:	4631      	mov	r1, r6
 80108a0:	4628      	mov	r0, r5
 80108a2:	47b8      	blx	r7
 80108a4:	3001      	adds	r0, #1
 80108a6:	f43f ae52 	beq.w	801054e <_printf_float+0xc2>
 80108aa:	f108 0801 	add.w	r8, r8, #1
 80108ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b0:	3b01      	subs	r3, #1
 80108b2:	4543      	cmp	r3, r8
 80108b4:	dcf1      	bgt.n	801089a <_printf_float+0x40e>
 80108b6:	464b      	mov	r3, r9
 80108b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108bc:	e6dc      	b.n	8010678 <_printf_float+0x1ec>
 80108be:	f04f 0800 	mov.w	r8, #0
 80108c2:	f104 0a1a 	add.w	sl, r4, #26
 80108c6:	e7f2      	b.n	80108ae <_printf_float+0x422>
 80108c8:	2301      	movs	r3, #1
 80108ca:	4642      	mov	r2, r8
 80108cc:	e7df      	b.n	801088e <_printf_float+0x402>
 80108ce:	2301      	movs	r3, #1
 80108d0:	464a      	mov	r2, r9
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	f43f ae38 	beq.w	801054e <_printf_float+0xc2>
 80108de:	f108 0801 	add.w	r8, r8, #1
 80108e2:	68e3      	ldr	r3, [r4, #12]
 80108e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108e6:	1a5b      	subs	r3, r3, r1
 80108e8:	4543      	cmp	r3, r8
 80108ea:	dcf0      	bgt.n	80108ce <_printf_float+0x442>
 80108ec:	e6fa      	b.n	80106e4 <_printf_float+0x258>
 80108ee:	f04f 0800 	mov.w	r8, #0
 80108f2:	f104 0919 	add.w	r9, r4, #25
 80108f6:	e7f4      	b.n	80108e2 <_printf_float+0x456>

080108f8 <_printf_common>:
 80108f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	4616      	mov	r6, r2
 80108fe:	4699      	mov	r9, r3
 8010900:	688a      	ldr	r2, [r1, #8]
 8010902:	690b      	ldr	r3, [r1, #16]
 8010904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010908:	4293      	cmp	r3, r2
 801090a:	bfb8      	it	lt
 801090c:	4613      	movlt	r3, r2
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010914:	4607      	mov	r7, r0
 8010916:	460c      	mov	r4, r1
 8010918:	b10a      	cbz	r2, 801091e <_printf_common+0x26>
 801091a:	3301      	adds	r3, #1
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	0699      	lsls	r1, r3, #26
 8010922:	bf42      	ittt	mi
 8010924:	6833      	ldrmi	r3, [r6, #0]
 8010926:	3302      	addmi	r3, #2
 8010928:	6033      	strmi	r3, [r6, #0]
 801092a:	6825      	ldr	r5, [r4, #0]
 801092c:	f015 0506 	ands.w	r5, r5, #6
 8010930:	d106      	bne.n	8010940 <_printf_common+0x48>
 8010932:	f104 0a19 	add.w	sl, r4, #25
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	6832      	ldr	r2, [r6, #0]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	42ab      	cmp	r3, r5
 801093e:	dc26      	bgt.n	801098e <_printf_common+0x96>
 8010940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010944:	1e13      	subs	r3, r2, #0
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	bf18      	it	ne
 801094a:	2301      	movne	r3, #1
 801094c:	0692      	lsls	r2, r2, #26
 801094e:	d42b      	bmi.n	80109a8 <_printf_common+0xb0>
 8010950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010954:	4649      	mov	r1, r9
 8010956:	4638      	mov	r0, r7
 8010958:	47c0      	blx	r8
 801095a:	3001      	adds	r0, #1
 801095c:	d01e      	beq.n	801099c <_printf_common+0xa4>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	68e5      	ldr	r5, [r4, #12]
 8010962:	6832      	ldr	r2, [r6, #0]
 8010964:	f003 0306 	and.w	r3, r3, #6
 8010968:	2b04      	cmp	r3, #4
 801096a:	bf08      	it	eq
 801096c:	1aad      	subeq	r5, r5, r2
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	6922      	ldr	r2, [r4, #16]
 8010972:	bf0c      	ite	eq
 8010974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010978:	2500      	movne	r5, #0
 801097a:	4293      	cmp	r3, r2
 801097c:	bfc4      	itt	gt
 801097e:	1a9b      	subgt	r3, r3, r2
 8010980:	18ed      	addgt	r5, r5, r3
 8010982:	2600      	movs	r6, #0
 8010984:	341a      	adds	r4, #26
 8010986:	42b5      	cmp	r5, r6
 8010988:	d11a      	bne.n	80109c0 <_printf_common+0xc8>
 801098a:	2000      	movs	r0, #0
 801098c:	e008      	b.n	80109a0 <_printf_common+0xa8>
 801098e:	2301      	movs	r3, #1
 8010990:	4652      	mov	r2, sl
 8010992:	4649      	mov	r1, r9
 8010994:	4638      	mov	r0, r7
 8010996:	47c0      	blx	r8
 8010998:	3001      	adds	r0, #1
 801099a:	d103      	bne.n	80109a4 <_printf_common+0xac>
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7c6      	b.n	8010936 <_printf_common+0x3e>
 80109a8:	18e1      	adds	r1, r4, r3
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	2030      	movs	r0, #48	; 0x30
 80109ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109b2:	4422      	add	r2, r4
 80109b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109bc:	3302      	adds	r3, #2
 80109be:	e7c7      	b.n	8010950 <_printf_common+0x58>
 80109c0:	2301      	movs	r3, #1
 80109c2:	4622      	mov	r2, r4
 80109c4:	4649      	mov	r1, r9
 80109c6:	4638      	mov	r0, r7
 80109c8:	47c0      	blx	r8
 80109ca:	3001      	adds	r0, #1
 80109cc:	d0e6      	beq.n	801099c <_printf_common+0xa4>
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7d9      	b.n	8010986 <_printf_common+0x8e>
	...

080109d4 <_printf_i>:
 80109d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	460c      	mov	r4, r1
 80109da:	4691      	mov	r9, r2
 80109dc:	7e27      	ldrb	r7, [r4, #24]
 80109de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109e0:	2f78      	cmp	r7, #120	; 0x78
 80109e2:	4680      	mov	r8, r0
 80109e4:	469a      	mov	sl, r3
 80109e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109ea:	d807      	bhi.n	80109fc <_printf_i+0x28>
 80109ec:	2f62      	cmp	r7, #98	; 0x62
 80109ee:	d80a      	bhi.n	8010a06 <_printf_i+0x32>
 80109f0:	2f00      	cmp	r7, #0
 80109f2:	f000 80d8 	beq.w	8010ba6 <_printf_i+0x1d2>
 80109f6:	2f58      	cmp	r7, #88	; 0x58
 80109f8:	f000 80a3 	beq.w	8010b42 <_printf_i+0x16e>
 80109fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a04:	e03a      	b.n	8010a7c <_printf_i+0xa8>
 8010a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a0a:	2b15      	cmp	r3, #21
 8010a0c:	d8f6      	bhi.n	80109fc <_printf_i+0x28>
 8010a0e:	a001      	add	r0, pc, #4	; (adr r0, 8010a14 <_printf_i+0x40>)
 8010a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a14:	08010a6d 	.word	0x08010a6d
 8010a18:	08010a81 	.word	0x08010a81
 8010a1c:	080109fd 	.word	0x080109fd
 8010a20:	080109fd 	.word	0x080109fd
 8010a24:	080109fd 	.word	0x080109fd
 8010a28:	080109fd 	.word	0x080109fd
 8010a2c:	08010a81 	.word	0x08010a81
 8010a30:	080109fd 	.word	0x080109fd
 8010a34:	080109fd 	.word	0x080109fd
 8010a38:	080109fd 	.word	0x080109fd
 8010a3c:	080109fd 	.word	0x080109fd
 8010a40:	08010b8d 	.word	0x08010b8d
 8010a44:	08010ab1 	.word	0x08010ab1
 8010a48:	08010b6f 	.word	0x08010b6f
 8010a4c:	080109fd 	.word	0x080109fd
 8010a50:	080109fd 	.word	0x080109fd
 8010a54:	08010baf 	.word	0x08010baf
 8010a58:	080109fd 	.word	0x080109fd
 8010a5c:	08010ab1 	.word	0x08010ab1
 8010a60:	080109fd 	.word	0x080109fd
 8010a64:	080109fd 	.word	0x080109fd
 8010a68:	08010b77 	.word	0x08010b77
 8010a6c:	680b      	ldr	r3, [r1, #0]
 8010a6e:	1d1a      	adds	r2, r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	600a      	str	r2, [r1, #0]
 8010a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e0a3      	b.n	8010bc8 <_printf_i+0x1f4>
 8010a80:	6825      	ldr	r5, [r4, #0]
 8010a82:	6808      	ldr	r0, [r1, #0]
 8010a84:	062e      	lsls	r6, r5, #24
 8010a86:	f100 0304 	add.w	r3, r0, #4
 8010a8a:	d50a      	bpl.n	8010aa2 <_printf_i+0xce>
 8010a8c:	6805      	ldr	r5, [r0, #0]
 8010a8e:	600b      	str	r3, [r1, #0]
 8010a90:	2d00      	cmp	r5, #0
 8010a92:	da03      	bge.n	8010a9c <_printf_i+0xc8>
 8010a94:	232d      	movs	r3, #45	; 0x2d
 8010a96:	426d      	negs	r5, r5
 8010a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a9c:	485e      	ldr	r0, [pc, #376]	; (8010c18 <_printf_i+0x244>)
 8010a9e:	230a      	movs	r3, #10
 8010aa0:	e019      	b.n	8010ad6 <_printf_i+0x102>
 8010aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010aa6:	6805      	ldr	r5, [r0, #0]
 8010aa8:	600b      	str	r3, [r1, #0]
 8010aaa:	bf18      	it	ne
 8010aac:	b22d      	sxthne	r5, r5
 8010aae:	e7ef      	b.n	8010a90 <_printf_i+0xbc>
 8010ab0:	680b      	ldr	r3, [r1, #0]
 8010ab2:	6825      	ldr	r5, [r4, #0]
 8010ab4:	1d18      	adds	r0, r3, #4
 8010ab6:	6008      	str	r0, [r1, #0]
 8010ab8:	0628      	lsls	r0, r5, #24
 8010aba:	d501      	bpl.n	8010ac0 <_printf_i+0xec>
 8010abc:	681d      	ldr	r5, [r3, #0]
 8010abe:	e002      	b.n	8010ac6 <_printf_i+0xf2>
 8010ac0:	0669      	lsls	r1, r5, #25
 8010ac2:	d5fb      	bpl.n	8010abc <_printf_i+0xe8>
 8010ac4:	881d      	ldrh	r5, [r3, #0]
 8010ac6:	4854      	ldr	r0, [pc, #336]	; (8010c18 <_printf_i+0x244>)
 8010ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8010aca:	bf0c      	ite	eq
 8010acc:	2308      	moveq	r3, #8
 8010ace:	230a      	movne	r3, #10
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ad6:	6866      	ldr	r6, [r4, #4]
 8010ad8:	60a6      	str	r6, [r4, #8]
 8010ada:	2e00      	cmp	r6, #0
 8010adc:	bfa2      	ittt	ge
 8010ade:	6821      	ldrge	r1, [r4, #0]
 8010ae0:	f021 0104 	bicge.w	r1, r1, #4
 8010ae4:	6021      	strge	r1, [r4, #0]
 8010ae6:	b90d      	cbnz	r5, 8010aec <_printf_i+0x118>
 8010ae8:	2e00      	cmp	r6, #0
 8010aea:	d04d      	beq.n	8010b88 <_printf_i+0x1b4>
 8010aec:	4616      	mov	r6, r2
 8010aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8010af2:	fb03 5711 	mls	r7, r3, r1, r5
 8010af6:	5dc7      	ldrb	r7, [r0, r7]
 8010af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010afc:	462f      	mov	r7, r5
 8010afe:	42bb      	cmp	r3, r7
 8010b00:	460d      	mov	r5, r1
 8010b02:	d9f4      	bls.n	8010aee <_printf_i+0x11a>
 8010b04:	2b08      	cmp	r3, #8
 8010b06:	d10b      	bne.n	8010b20 <_printf_i+0x14c>
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	07df      	lsls	r7, r3, #31
 8010b0c:	d508      	bpl.n	8010b20 <_printf_i+0x14c>
 8010b0e:	6923      	ldr	r3, [r4, #16]
 8010b10:	6861      	ldr	r1, [r4, #4]
 8010b12:	4299      	cmp	r1, r3
 8010b14:	bfde      	ittt	le
 8010b16:	2330      	movle	r3, #48	; 0x30
 8010b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b20:	1b92      	subs	r2, r2, r6
 8010b22:	6122      	str	r2, [r4, #16]
 8010b24:	f8cd a000 	str.w	sl, [sp]
 8010b28:	464b      	mov	r3, r9
 8010b2a:	aa03      	add	r2, sp, #12
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	4640      	mov	r0, r8
 8010b30:	f7ff fee2 	bl	80108f8 <_printf_common>
 8010b34:	3001      	adds	r0, #1
 8010b36:	d14c      	bne.n	8010bd2 <_printf_i+0x1fe>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	b004      	add	sp, #16
 8010b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b42:	4835      	ldr	r0, [pc, #212]	; (8010c18 <_printf_i+0x244>)
 8010b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	680e      	ldr	r6, [r1, #0]
 8010b4c:	061f      	lsls	r7, r3, #24
 8010b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b52:	600e      	str	r6, [r1, #0]
 8010b54:	d514      	bpl.n	8010b80 <_printf_i+0x1ac>
 8010b56:	07d9      	lsls	r1, r3, #31
 8010b58:	bf44      	itt	mi
 8010b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b5e:	6023      	strmi	r3, [r4, #0]
 8010b60:	b91d      	cbnz	r5, 8010b6a <_printf_i+0x196>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	f023 0320 	bic.w	r3, r3, #32
 8010b68:	6023      	str	r3, [r4, #0]
 8010b6a:	2310      	movs	r3, #16
 8010b6c:	e7b0      	b.n	8010ad0 <_printf_i+0xfc>
 8010b6e:	6823      	ldr	r3, [r4, #0]
 8010b70:	f043 0320 	orr.w	r3, r3, #32
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	2378      	movs	r3, #120	; 0x78
 8010b78:	4828      	ldr	r0, [pc, #160]	; (8010c1c <_printf_i+0x248>)
 8010b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b7e:	e7e3      	b.n	8010b48 <_printf_i+0x174>
 8010b80:	065e      	lsls	r6, r3, #25
 8010b82:	bf48      	it	mi
 8010b84:	b2ad      	uxthmi	r5, r5
 8010b86:	e7e6      	b.n	8010b56 <_printf_i+0x182>
 8010b88:	4616      	mov	r6, r2
 8010b8a:	e7bb      	b.n	8010b04 <_printf_i+0x130>
 8010b8c:	680b      	ldr	r3, [r1, #0]
 8010b8e:	6826      	ldr	r6, [r4, #0]
 8010b90:	6960      	ldr	r0, [r4, #20]
 8010b92:	1d1d      	adds	r5, r3, #4
 8010b94:	600d      	str	r5, [r1, #0]
 8010b96:	0635      	lsls	r5, r6, #24
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	d501      	bpl.n	8010ba0 <_printf_i+0x1cc>
 8010b9c:	6018      	str	r0, [r3, #0]
 8010b9e:	e002      	b.n	8010ba6 <_printf_i+0x1d2>
 8010ba0:	0671      	lsls	r1, r6, #25
 8010ba2:	d5fb      	bpl.n	8010b9c <_printf_i+0x1c8>
 8010ba4:	8018      	strh	r0, [r3, #0]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6123      	str	r3, [r4, #16]
 8010baa:	4616      	mov	r6, r2
 8010bac:	e7ba      	b.n	8010b24 <_printf_i+0x150>
 8010bae:	680b      	ldr	r3, [r1, #0]
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	600a      	str	r2, [r1, #0]
 8010bb4:	681e      	ldr	r6, [r3, #0]
 8010bb6:	6862      	ldr	r2, [r4, #4]
 8010bb8:	2100      	movs	r1, #0
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f7ef fb18 	bl	80001f0 <memchr>
 8010bc0:	b108      	cbz	r0, 8010bc6 <_printf_i+0x1f2>
 8010bc2:	1b80      	subs	r0, r0, r6
 8010bc4:	6060      	str	r0, [r4, #4]
 8010bc6:	6863      	ldr	r3, [r4, #4]
 8010bc8:	6123      	str	r3, [r4, #16]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bd0:	e7a8      	b.n	8010b24 <_printf_i+0x150>
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	4632      	mov	r2, r6
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	4640      	mov	r0, r8
 8010bda:	47d0      	blx	sl
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d0ab      	beq.n	8010b38 <_printf_i+0x164>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	079b      	lsls	r3, r3, #30
 8010be4:	d413      	bmi.n	8010c0e <_printf_i+0x23a>
 8010be6:	68e0      	ldr	r0, [r4, #12]
 8010be8:	9b03      	ldr	r3, [sp, #12]
 8010bea:	4298      	cmp	r0, r3
 8010bec:	bfb8      	it	lt
 8010bee:	4618      	movlt	r0, r3
 8010bf0:	e7a4      	b.n	8010b3c <_printf_i+0x168>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	47d0      	blx	sl
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d09b      	beq.n	8010b38 <_printf_i+0x164>
 8010c00:	3501      	adds	r5, #1
 8010c02:	68e3      	ldr	r3, [r4, #12]
 8010c04:	9903      	ldr	r1, [sp, #12]
 8010c06:	1a5b      	subs	r3, r3, r1
 8010c08:	42ab      	cmp	r3, r5
 8010c0a:	dcf2      	bgt.n	8010bf2 <_printf_i+0x21e>
 8010c0c:	e7eb      	b.n	8010be6 <_printf_i+0x212>
 8010c0e:	2500      	movs	r5, #0
 8010c10:	f104 0619 	add.w	r6, r4, #25
 8010c14:	e7f5      	b.n	8010c02 <_printf_i+0x22e>
 8010c16:	bf00      	nop
 8010c18:	080172f8 	.word	0x080172f8
 8010c1c:	08017309 	.word	0x08017309

08010c20 <_scanf_float>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	b087      	sub	sp, #28
 8010c26:	4617      	mov	r7, r2
 8010c28:	9303      	str	r3, [sp, #12]
 8010c2a:	688b      	ldr	r3, [r1, #8]
 8010c2c:	1e5a      	subs	r2, r3, #1
 8010c2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c32:	bf83      	ittte	hi
 8010c34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010c38:	195b      	addhi	r3, r3, r5
 8010c3a:	9302      	strhi	r3, [sp, #8]
 8010c3c:	2300      	movls	r3, #0
 8010c3e:	bf86      	itte	hi
 8010c40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c44:	608b      	strhi	r3, [r1, #8]
 8010c46:	9302      	strls	r3, [sp, #8]
 8010c48:	680b      	ldr	r3, [r1, #0]
 8010c4a:	468b      	mov	fp, r1
 8010c4c:	2500      	movs	r5, #0
 8010c4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010c52:	f84b 3b1c 	str.w	r3, [fp], #28
 8010c56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c5a:	4680      	mov	r8, r0
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	465e      	mov	r6, fp
 8010c60:	46aa      	mov	sl, r5
 8010c62:	46a9      	mov	r9, r5
 8010c64:	9501      	str	r5, [sp, #4]
 8010c66:	68a2      	ldr	r2, [r4, #8]
 8010c68:	b152      	cbz	r2, 8010c80 <_scanf_float+0x60>
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b4e      	cmp	r3, #78	; 0x4e
 8010c70:	d864      	bhi.n	8010d3c <_scanf_float+0x11c>
 8010c72:	2b40      	cmp	r3, #64	; 0x40
 8010c74:	d83c      	bhi.n	8010cf0 <_scanf_float+0xd0>
 8010c76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010c7a:	b2c8      	uxtb	r0, r1
 8010c7c:	280e      	cmp	r0, #14
 8010c7e:	d93a      	bls.n	8010cf6 <_scanf_float+0xd6>
 8010c80:	f1b9 0f00 	cmp.w	r9, #0
 8010c84:	d003      	beq.n	8010c8e <_scanf_float+0x6e>
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c92:	f1ba 0f01 	cmp.w	sl, #1
 8010c96:	f200 8113 	bhi.w	8010ec0 <_scanf_float+0x2a0>
 8010c9a:	455e      	cmp	r6, fp
 8010c9c:	f200 8105 	bhi.w	8010eaa <_scanf_float+0x28a>
 8010ca0:	2501      	movs	r5, #1
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	b007      	add	sp, #28
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010cae:	2a0d      	cmp	r2, #13
 8010cb0:	d8e6      	bhi.n	8010c80 <_scanf_float+0x60>
 8010cb2:	a101      	add	r1, pc, #4	; (adr r1, 8010cb8 <_scanf_float+0x98>)
 8010cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010cb8:	08010df7 	.word	0x08010df7
 8010cbc:	08010c81 	.word	0x08010c81
 8010cc0:	08010c81 	.word	0x08010c81
 8010cc4:	08010c81 	.word	0x08010c81
 8010cc8:	08010e57 	.word	0x08010e57
 8010ccc:	08010e2f 	.word	0x08010e2f
 8010cd0:	08010c81 	.word	0x08010c81
 8010cd4:	08010c81 	.word	0x08010c81
 8010cd8:	08010e05 	.word	0x08010e05
 8010cdc:	08010c81 	.word	0x08010c81
 8010ce0:	08010c81 	.word	0x08010c81
 8010ce4:	08010c81 	.word	0x08010c81
 8010ce8:	08010c81 	.word	0x08010c81
 8010cec:	08010dbd 	.word	0x08010dbd
 8010cf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010cf4:	e7db      	b.n	8010cae <_scanf_float+0x8e>
 8010cf6:	290e      	cmp	r1, #14
 8010cf8:	d8c2      	bhi.n	8010c80 <_scanf_float+0x60>
 8010cfa:	a001      	add	r0, pc, #4	; (adr r0, 8010d00 <_scanf_float+0xe0>)
 8010cfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010d00:	08010daf 	.word	0x08010daf
 8010d04:	08010c81 	.word	0x08010c81
 8010d08:	08010daf 	.word	0x08010daf
 8010d0c:	08010e43 	.word	0x08010e43
 8010d10:	08010c81 	.word	0x08010c81
 8010d14:	08010d5d 	.word	0x08010d5d
 8010d18:	08010d99 	.word	0x08010d99
 8010d1c:	08010d99 	.word	0x08010d99
 8010d20:	08010d99 	.word	0x08010d99
 8010d24:	08010d99 	.word	0x08010d99
 8010d28:	08010d99 	.word	0x08010d99
 8010d2c:	08010d99 	.word	0x08010d99
 8010d30:	08010d99 	.word	0x08010d99
 8010d34:	08010d99 	.word	0x08010d99
 8010d38:	08010d99 	.word	0x08010d99
 8010d3c:	2b6e      	cmp	r3, #110	; 0x6e
 8010d3e:	d809      	bhi.n	8010d54 <_scanf_float+0x134>
 8010d40:	2b60      	cmp	r3, #96	; 0x60
 8010d42:	d8b2      	bhi.n	8010caa <_scanf_float+0x8a>
 8010d44:	2b54      	cmp	r3, #84	; 0x54
 8010d46:	d077      	beq.n	8010e38 <_scanf_float+0x218>
 8010d48:	2b59      	cmp	r3, #89	; 0x59
 8010d4a:	d199      	bne.n	8010c80 <_scanf_float+0x60>
 8010d4c:	2d07      	cmp	r5, #7
 8010d4e:	d197      	bne.n	8010c80 <_scanf_float+0x60>
 8010d50:	2508      	movs	r5, #8
 8010d52:	e029      	b.n	8010da8 <_scanf_float+0x188>
 8010d54:	2b74      	cmp	r3, #116	; 0x74
 8010d56:	d06f      	beq.n	8010e38 <_scanf_float+0x218>
 8010d58:	2b79      	cmp	r3, #121	; 0x79
 8010d5a:	e7f6      	b.n	8010d4a <_scanf_float+0x12a>
 8010d5c:	6821      	ldr	r1, [r4, #0]
 8010d5e:	05c8      	lsls	r0, r1, #23
 8010d60:	d51a      	bpl.n	8010d98 <_scanf_float+0x178>
 8010d62:	9b02      	ldr	r3, [sp, #8]
 8010d64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d68:	6021      	str	r1, [r4, #0]
 8010d6a:	f109 0901 	add.w	r9, r9, #1
 8010d6e:	b11b      	cbz	r3, 8010d78 <_scanf_float+0x158>
 8010d70:	3b01      	subs	r3, #1
 8010d72:	3201      	adds	r2, #1
 8010d74:	9302      	str	r3, [sp, #8]
 8010d76:	60a2      	str	r2, [r4, #8]
 8010d78:	68a3      	ldr	r3, [r4, #8]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	60a3      	str	r3, [r4, #8]
 8010d7e:	6923      	ldr	r3, [r4, #16]
 8010d80:	3301      	adds	r3, #1
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	607b      	str	r3, [r7, #4]
 8010d8c:	f340 8084 	ble.w	8010e98 <_scanf_float+0x278>
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	3301      	adds	r3, #1
 8010d94:	603b      	str	r3, [r7, #0]
 8010d96:	e766      	b.n	8010c66 <_scanf_float+0x46>
 8010d98:	eb1a 0f05 	cmn.w	sl, r5
 8010d9c:	f47f af70 	bne.w	8010c80 <_scanf_float+0x60>
 8010da0:	6822      	ldr	r2, [r4, #0]
 8010da2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010da6:	6022      	str	r2, [r4, #0]
 8010da8:	f806 3b01 	strb.w	r3, [r6], #1
 8010dac:	e7e4      	b.n	8010d78 <_scanf_float+0x158>
 8010dae:	6822      	ldr	r2, [r4, #0]
 8010db0:	0610      	lsls	r0, r2, #24
 8010db2:	f57f af65 	bpl.w	8010c80 <_scanf_float+0x60>
 8010db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dba:	e7f4      	b.n	8010da6 <_scanf_float+0x186>
 8010dbc:	f1ba 0f00 	cmp.w	sl, #0
 8010dc0:	d10e      	bne.n	8010de0 <_scanf_float+0x1c0>
 8010dc2:	f1b9 0f00 	cmp.w	r9, #0
 8010dc6:	d10e      	bne.n	8010de6 <_scanf_float+0x1c6>
 8010dc8:	6822      	ldr	r2, [r4, #0]
 8010dca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010dce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010dd2:	d108      	bne.n	8010de6 <_scanf_float+0x1c6>
 8010dd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	f04f 0a01 	mov.w	sl, #1
 8010dde:	e7e3      	b.n	8010da8 <_scanf_float+0x188>
 8010de0:	f1ba 0f02 	cmp.w	sl, #2
 8010de4:	d055      	beq.n	8010e92 <_scanf_float+0x272>
 8010de6:	2d01      	cmp	r5, #1
 8010de8:	d002      	beq.n	8010df0 <_scanf_float+0x1d0>
 8010dea:	2d04      	cmp	r5, #4
 8010dec:	f47f af48 	bne.w	8010c80 <_scanf_float+0x60>
 8010df0:	3501      	adds	r5, #1
 8010df2:	b2ed      	uxtb	r5, r5
 8010df4:	e7d8      	b.n	8010da8 <_scanf_float+0x188>
 8010df6:	f1ba 0f01 	cmp.w	sl, #1
 8010dfa:	f47f af41 	bne.w	8010c80 <_scanf_float+0x60>
 8010dfe:	f04f 0a02 	mov.w	sl, #2
 8010e02:	e7d1      	b.n	8010da8 <_scanf_float+0x188>
 8010e04:	b97d      	cbnz	r5, 8010e26 <_scanf_float+0x206>
 8010e06:	f1b9 0f00 	cmp.w	r9, #0
 8010e0a:	f47f af3c 	bne.w	8010c86 <_scanf_float+0x66>
 8010e0e:	6822      	ldr	r2, [r4, #0]
 8010e10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010e14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010e18:	f47f af39 	bne.w	8010c8e <_scanf_float+0x6e>
 8010e1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e20:	6022      	str	r2, [r4, #0]
 8010e22:	2501      	movs	r5, #1
 8010e24:	e7c0      	b.n	8010da8 <_scanf_float+0x188>
 8010e26:	2d03      	cmp	r5, #3
 8010e28:	d0e2      	beq.n	8010df0 <_scanf_float+0x1d0>
 8010e2a:	2d05      	cmp	r5, #5
 8010e2c:	e7de      	b.n	8010dec <_scanf_float+0x1cc>
 8010e2e:	2d02      	cmp	r5, #2
 8010e30:	f47f af26 	bne.w	8010c80 <_scanf_float+0x60>
 8010e34:	2503      	movs	r5, #3
 8010e36:	e7b7      	b.n	8010da8 <_scanf_float+0x188>
 8010e38:	2d06      	cmp	r5, #6
 8010e3a:	f47f af21 	bne.w	8010c80 <_scanf_float+0x60>
 8010e3e:	2507      	movs	r5, #7
 8010e40:	e7b2      	b.n	8010da8 <_scanf_float+0x188>
 8010e42:	6822      	ldr	r2, [r4, #0]
 8010e44:	0591      	lsls	r1, r2, #22
 8010e46:	f57f af1b 	bpl.w	8010c80 <_scanf_float+0x60>
 8010e4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010e4e:	6022      	str	r2, [r4, #0]
 8010e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e54:	e7a8      	b.n	8010da8 <_scanf_float+0x188>
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010e5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010e60:	d006      	beq.n	8010e70 <_scanf_float+0x250>
 8010e62:	0550      	lsls	r0, r2, #21
 8010e64:	f57f af0c 	bpl.w	8010c80 <_scanf_float+0x60>
 8010e68:	f1b9 0f00 	cmp.w	r9, #0
 8010e6c:	f43f af0f 	beq.w	8010c8e <_scanf_float+0x6e>
 8010e70:	0591      	lsls	r1, r2, #22
 8010e72:	bf58      	it	pl
 8010e74:	9901      	ldrpl	r1, [sp, #4]
 8010e76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e7a:	bf58      	it	pl
 8010e7c:	eba9 0101 	subpl.w	r1, r9, r1
 8010e80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010e84:	bf58      	it	pl
 8010e86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e8a:	6022      	str	r2, [r4, #0]
 8010e8c:	f04f 0900 	mov.w	r9, #0
 8010e90:	e78a      	b.n	8010da8 <_scanf_float+0x188>
 8010e92:	f04f 0a03 	mov.w	sl, #3
 8010e96:	e787      	b.n	8010da8 <_scanf_float+0x188>
 8010e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	4640      	mov	r0, r8
 8010ea0:	4798      	blx	r3
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f43f aedf 	beq.w	8010c66 <_scanf_float+0x46>
 8010ea8:	e6ea      	b.n	8010c80 <_scanf_float+0x60>
 8010eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010eb2:	463a      	mov	r2, r7
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4798      	blx	r3
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	6123      	str	r3, [r4, #16]
 8010ebe:	e6ec      	b.n	8010c9a <_scanf_float+0x7a>
 8010ec0:	1e6b      	subs	r3, r5, #1
 8010ec2:	2b06      	cmp	r3, #6
 8010ec4:	d825      	bhi.n	8010f12 <_scanf_float+0x2f2>
 8010ec6:	2d02      	cmp	r5, #2
 8010ec8:	d836      	bhi.n	8010f38 <_scanf_float+0x318>
 8010eca:	455e      	cmp	r6, fp
 8010ecc:	f67f aee8 	bls.w	8010ca0 <_scanf_float+0x80>
 8010ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ed4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ed8:	463a      	mov	r2, r7
 8010eda:	4640      	mov	r0, r8
 8010edc:	4798      	blx	r3
 8010ede:	6923      	ldr	r3, [r4, #16]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	e7f1      	b.n	8010eca <_scanf_float+0x2aa>
 8010ee6:	9802      	ldr	r0, [sp, #8]
 8010ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010eec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010ef0:	9002      	str	r0, [sp, #8]
 8010ef2:	463a      	mov	r2, r7
 8010ef4:	4640      	mov	r0, r8
 8010ef6:	4798      	blx	r3
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	6123      	str	r3, [r4, #16]
 8010efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f02:	fa5f fa8a 	uxtb.w	sl, sl
 8010f06:	f1ba 0f02 	cmp.w	sl, #2
 8010f0a:	d1ec      	bne.n	8010ee6 <_scanf_float+0x2c6>
 8010f0c:	3d03      	subs	r5, #3
 8010f0e:	b2ed      	uxtb	r5, r5
 8010f10:	1b76      	subs	r6, r6, r5
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	05da      	lsls	r2, r3, #23
 8010f16:	d52f      	bpl.n	8010f78 <_scanf_float+0x358>
 8010f18:	055b      	lsls	r3, r3, #21
 8010f1a:	d510      	bpl.n	8010f3e <_scanf_float+0x31e>
 8010f1c:	455e      	cmp	r6, fp
 8010f1e:	f67f aebf 	bls.w	8010ca0 <_scanf_float+0x80>
 8010f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f2a:	463a      	mov	r2, r7
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	4798      	blx	r3
 8010f30:	6923      	ldr	r3, [r4, #16]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	6123      	str	r3, [r4, #16]
 8010f36:	e7f1      	b.n	8010f1c <_scanf_float+0x2fc>
 8010f38:	46aa      	mov	sl, r5
 8010f3a:	9602      	str	r6, [sp, #8]
 8010f3c:	e7df      	b.n	8010efe <_scanf_float+0x2de>
 8010f3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	2965      	cmp	r1, #101	; 0x65
 8010f46:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8010f4e:	6123      	str	r3, [r4, #16]
 8010f50:	d00c      	beq.n	8010f6c <_scanf_float+0x34c>
 8010f52:	2945      	cmp	r1, #69	; 0x45
 8010f54:	d00a      	beq.n	8010f6c <_scanf_float+0x34c>
 8010f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f5a:	463a      	mov	r2, r7
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4798      	blx	r3
 8010f60:	6923      	ldr	r3, [r4, #16]
 8010f62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f66:	3b01      	subs	r3, #1
 8010f68:	1eb5      	subs	r5, r6, #2
 8010f6a:	6123      	str	r3, [r4, #16]
 8010f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f70:	463a      	mov	r2, r7
 8010f72:	4640      	mov	r0, r8
 8010f74:	4798      	blx	r3
 8010f76:	462e      	mov	r6, r5
 8010f78:	6825      	ldr	r5, [r4, #0]
 8010f7a:	f015 0510 	ands.w	r5, r5, #16
 8010f7e:	d158      	bne.n	8011032 <_scanf_float+0x412>
 8010f80:	7035      	strb	r5, [r6, #0]
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f8c:	d11c      	bne.n	8010fc8 <_scanf_float+0x3a8>
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	454b      	cmp	r3, r9
 8010f92:	eba3 0209 	sub.w	r2, r3, r9
 8010f96:	d124      	bne.n	8010fe2 <_scanf_float+0x3c2>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	4659      	mov	r1, fp
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	f000 ff59 	bl	8011e54 <_strtod_r>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	6821      	ldr	r1, [r4, #0]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f011 0f02 	tst.w	r1, #2
 8010fac:	ec57 6b10 	vmov	r6, r7, d0
 8010fb0:	f103 0204 	add.w	r2, r3, #4
 8010fb4:	d020      	beq.n	8010ff8 <_scanf_float+0x3d8>
 8010fb6:	9903      	ldr	r1, [sp, #12]
 8010fb8:	600a      	str	r2, [r1, #0]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	e9c3 6700 	strd	r6, r7, [r3]
 8010fc0:	68e3      	ldr	r3, [r4, #12]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	60e3      	str	r3, [r4, #12]
 8010fc6:	e66c      	b.n	8010ca2 <_scanf_float+0x82>
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0e4      	beq.n	8010f98 <_scanf_float+0x378>
 8010fce:	9905      	ldr	r1, [sp, #20]
 8010fd0:	230a      	movs	r3, #10
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	3101      	adds	r1, #1
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	f000 ffc6 	bl	8011f68 <_strtol_r>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	9e05      	ldr	r6, [sp, #20]
 8010fe0:	1ac2      	subs	r2, r0, r3
 8010fe2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010fe6:	429e      	cmp	r6, r3
 8010fe8:	bf28      	it	cs
 8010fea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010fee:	4912      	ldr	r1, [pc, #72]	; (8011038 <_scanf_float+0x418>)
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f000 f85f 	bl	80110b4 <siprintf>
 8010ff6:	e7cf      	b.n	8010f98 <_scanf_float+0x378>
 8010ff8:	f011 0f04 	tst.w	r1, #4
 8010ffc:	9903      	ldr	r1, [sp, #12]
 8010ffe:	600a      	str	r2, [r1, #0]
 8011000:	d1db      	bne.n	8010fba <_scanf_float+0x39a>
 8011002:	f8d3 8000 	ldr.w	r8, [r3]
 8011006:	ee10 2a10 	vmov	r2, s0
 801100a:	ee10 0a10 	vmov	r0, s0
 801100e:	463b      	mov	r3, r7
 8011010:	4639      	mov	r1, r7
 8011012:	f7ef fd93 	bl	8000b3c <__aeabi_dcmpun>
 8011016:	b128      	cbz	r0, 8011024 <_scanf_float+0x404>
 8011018:	4808      	ldr	r0, [pc, #32]	; (801103c <_scanf_float+0x41c>)
 801101a:	f000 f811 	bl	8011040 <nanf>
 801101e:	ed88 0a00 	vstr	s0, [r8]
 8011022:	e7cd      	b.n	8010fc0 <_scanf_float+0x3a0>
 8011024:	4630      	mov	r0, r6
 8011026:	4639      	mov	r1, r7
 8011028:	f7ef fde6 	bl	8000bf8 <__aeabi_d2f>
 801102c:	f8c8 0000 	str.w	r0, [r8]
 8011030:	e7c6      	b.n	8010fc0 <_scanf_float+0x3a0>
 8011032:	2500      	movs	r5, #0
 8011034:	e635      	b.n	8010ca2 <_scanf_float+0x82>
 8011036:	bf00      	nop
 8011038:	0801731a 	.word	0x0801731a
 801103c:	0801774b 	.word	0x0801774b

08011040 <nanf>:
 8011040:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011048 <nanf+0x8>
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	7fc00000 	.word	0x7fc00000

0801104c <sniprintf>:
 801104c:	b40c      	push	{r2, r3}
 801104e:	b530      	push	{r4, r5, lr}
 8011050:	4b17      	ldr	r3, [pc, #92]	; (80110b0 <sniprintf+0x64>)
 8011052:	1e0c      	subs	r4, r1, #0
 8011054:	681d      	ldr	r5, [r3, #0]
 8011056:	b09d      	sub	sp, #116	; 0x74
 8011058:	da08      	bge.n	801106c <sniprintf+0x20>
 801105a:	238b      	movs	r3, #139	; 0x8b
 801105c:	602b      	str	r3, [r5, #0]
 801105e:	f04f 30ff 	mov.w	r0, #4294967295
 8011062:	b01d      	add	sp, #116	; 0x74
 8011064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011068:	b002      	add	sp, #8
 801106a:	4770      	bx	lr
 801106c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011070:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011074:	bf14      	ite	ne
 8011076:	f104 33ff 	addne.w	r3, r4, #4294967295
 801107a:	4623      	moveq	r3, r4
 801107c:	9304      	str	r3, [sp, #16]
 801107e:	9307      	str	r3, [sp, #28]
 8011080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011084:	9002      	str	r0, [sp, #8]
 8011086:	9006      	str	r0, [sp, #24]
 8011088:	f8ad 3016 	strh.w	r3, [sp, #22]
 801108c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801108e:	ab21      	add	r3, sp, #132	; 0x84
 8011090:	a902      	add	r1, sp, #8
 8011092:	4628      	mov	r0, r5
 8011094:	9301      	str	r3, [sp, #4]
 8011096:	f002 ff73 	bl	8013f80 <_svfiprintf_r>
 801109a:	1c43      	adds	r3, r0, #1
 801109c:	bfbc      	itt	lt
 801109e:	238b      	movlt	r3, #139	; 0x8b
 80110a0:	602b      	strlt	r3, [r5, #0]
 80110a2:	2c00      	cmp	r4, #0
 80110a4:	d0dd      	beq.n	8011062 <sniprintf+0x16>
 80110a6:	9b02      	ldr	r3, [sp, #8]
 80110a8:	2200      	movs	r2, #0
 80110aa:	701a      	strb	r2, [r3, #0]
 80110ac:	e7d9      	b.n	8011062 <sniprintf+0x16>
 80110ae:	bf00      	nop
 80110b0:	20000050 	.word	0x20000050

080110b4 <siprintf>:
 80110b4:	b40e      	push	{r1, r2, r3}
 80110b6:	b500      	push	{lr}
 80110b8:	b09c      	sub	sp, #112	; 0x70
 80110ba:	ab1d      	add	r3, sp, #116	; 0x74
 80110bc:	9002      	str	r0, [sp, #8]
 80110be:	9006      	str	r0, [sp, #24]
 80110c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80110c4:	4809      	ldr	r0, [pc, #36]	; (80110ec <siprintf+0x38>)
 80110c6:	9107      	str	r1, [sp, #28]
 80110c8:	9104      	str	r1, [sp, #16]
 80110ca:	4909      	ldr	r1, [pc, #36]	; (80110f0 <siprintf+0x3c>)
 80110cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d0:	9105      	str	r1, [sp, #20]
 80110d2:	6800      	ldr	r0, [r0, #0]
 80110d4:	9301      	str	r3, [sp, #4]
 80110d6:	a902      	add	r1, sp, #8
 80110d8:	f002 ff52 	bl	8013f80 <_svfiprintf_r>
 80110dc:	9b02      	ldr	r3, [sp, #8]
 80110de:	2200      	movs	r2, #0
 80110e0:	701a      	strb	r2, [r3, #0]
 80110e2:	b01c      	add	sp, #112	; 0x70
 80110e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110e8:	b003      	add	sp, #12
 80110ea:	4770      	bx	lr
 80110ec:	20000050 	.word	0x20000050
 80110f0:	ffff0208 	.word	0xffff0208

080110f4 <siscanf>:
 80110f4:	b40e      	push	{r1, r2, r3}
 80110f6:	b510      	push	{r4, lr}
 80110f8:	b09f      	sub	sp, #124	; 0x7c
 80110fa:	ac21      	add	r4, sp, #132	; 0x84
 80110fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011100:	f854 2b04 	ldr.w	r2, [r4], #4
 8011104:	9201      	str	r2, [sp, #4]
 8011106:	f8ad 101c 	strh.w	r1, [sp, #28]
 801110a:	9004      	str	r0, [sp, #16]
 801110c:	9008      	str	r0, [sp, #32]
 801110e:	f7ef f867 	bl	80001e0 <strlen>
 8011112:	4b0c      	ldr	r3, [pc, #48]	; (8011144 <siscanf+0x50>)
 8011114:	9005      	str	r0, [sp, #20]
 8011116:	9009      	str	r0, [sp, #36]	; 0x24
 8011118:	930d      	str	r3, [sp, #52]	; 0x34
 801111a:	480b      	ldr	r0, [pc, #44]	; (8011148 <siscanf+0x54>)
 801111c:	9a01      	ldr	r2, [sp, #4]
 801111e:	6800      	ldr	r0, [r0, #0]
 8011120:	9403      	str	r4, [sp, #12]
 8011122:	2300      	movs	r3, #0
 8011124:	9311      	str	r3, [sp, #68]	; 0x44
 8011126:	9316      	str	r3, [sp, #88]	; 0x58
 8011128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801112c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011130:	a904      	add	r1, sp, #16
 8011132:	4623      	mov	r3, r4
 8011134:	f003 f87e 	bl	8014234 <__ssvfiscanf_r>
 8011138:	b01f      	add	sp, #124	; 0x7c
 801113a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801113e:	b003      	add	sp, #12
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	0801116f 	.word	0x0801116f
 8011148:	20000050 	.word	0x20000050

0801114c <__sread>:
 801114c:	b510      	push	{r4, lr}
 801114e:	460c      	mov	r4, r1
 8011150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011154:	f003 fb32 	bl	80147bc <_read_r>
 8011158:	2800      	cmp	r0, #0
 801115a:	bfab      	itete	ge
 801115c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801115e:	89a3      	ldrhlt	r3, [r4, #12]
 8011160:	181b      	addge	r3, r3, r0
 8011162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011166:	bfac      	ite	ge
 8011168:	6563      	strge	r3, [r4, #84]	; 0x54
 801116a:	81a3      	strhlt	r3, [r4, #12]
 801116c:	bd10      	pop	{r4, pc}

0801116e <__seofread>:
 801116e:	2000      	movs	r0, #0
 8011170:	4770      	bx	lr

08011172 <__swrite>:
 8011172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011176:	461f      	mov	r7, r3
 8011178:	898b      	ldrh	r3, [r1, #12]
 801117a:	05db      	lsls	r3, r3, #23
 801117c:	4605      	mov	r5, r0
 801117e:	460c      	mov	r4, r1
 8011180:	4616      	mov	r6, r2
 8011182:	d505      	bpl.n	8011190 <__swrite+0x1e>
 8011184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011188:	2302      	movs	r3, #2
 801118a:	2200      	movs	r2, #0
 801118c:	f002 f8fc 	bl	8013388 <_lseek_r>
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801119a:	81a3      	strh	r3, [r4, #12]
 801119c:	4632      	mov	r2, r6
 801119e:	463b      	mov	r3, r7
 80111a0:	4628      	mov	r0, r5
 80111a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111a6:	f000 bee1 	b.w	8011f6c <_write_r>

080111aa <__sseek>:
 80111aa:	b510      	push	{r4, lr}
 80111ac:	460c      	mov	r4, r1
 80111ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b2:	f002 f8e9 	bl	8013388 <_lseek_r>
 80111b6:	1c43      	adds	r3, r0, #1
 80111b8:	89a3      	ldrh	r3, [r4, #12]
 80111ba:	bf15      	itete	ne
 80111bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80111be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80111c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80111c6:	81a3      	strheq	r3, [r4, #12]
 80111c8:	bf18      	it	ne
 80111ca:	81a3      	strhne	r3, [r4, #12]
 80111cc:	bd10      	pop	{r4, pc}

080111ce <__sclose>:
 80111ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d2:	f000 bedd 	b.w	8011f90 <_close_r>

080111d6 <strstr>:
 80111d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111d8:	780c      	ldrb	r4, [r1, #0]
 80111da:	b164      	cbz	r4, 80111f6 <strstr+0x20>
 80111dc:	4603      	mov	r3, r0
 80111de:	781a      	ldrb	r2, [r3, #0]
 80111e0:	4618      	mov	r0, r3
 80111e2:	1c5e      	adds	r6, r3, #1
 80111e4:	b90a      	cbnz	r2, 80111ea <strstr+0x14>
 80111e6:	4610      	mov	r0, r2
 80111e8:	e005      	b.n	80111f6 <strstr+0x20>
 80111ea:	4294      	cmp	r4, r2
 80111ec:	d108      	bne.n	8011200 <strstr+0x2a>
 80111ee:	460d      	mov	r5, r1
 80111f0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80111f4:	b902      	cbnz	r2, 80111f8 <strstr+0x22>
 80111f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111f8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80111fc:	4297      	cmp	r7, r2
 80111fe:	d0f7      	beq.n	80111f0 <strstr+0x1a>
 8011200:	4633      	mov	r3, r6
 8011202:	e7ec      	b.n	80111de <strstr+0x8>

08011204 <sulp>:
 8011204:	b570      	push	{r4, r5, r6, lr}
 8011206:	4604      	mov	r4, r0
 8011208:	460d      	mov	r5, r1
 801120a:	ec45 4b10 	vmov	d0, r4, r5
 801120e:	4616      	mov	r6, r2
 8011210:	f002 fc52 	bl	8013ab8 <__ulp>
 8011214:	ec51 0b10 	vmov	r0, r1, d0
 8011218:	b17e      	cbz	r6, 801123a <sulp+0x36>
 801121a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801121e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011222:	2b00      	cmp	r3, #0
 8011224:	dd09      	ble.n	801123a <sulp+0x36>
 8011226:	051b      	lsls	r3, r3, #20
 8011228:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801122c:	2400      	movs	r4, #0
 801122e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011232:	4622      	mov	r2, r4
 8011234:	462b      	mov	r3, r5
 8011236:	f7ef f9e7 	bl	8000608 <__aeabi_dmul>
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	0000      	movs	r0, r0
	...

08011240 <_strtod_l>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	b0a3      	sub	sp, #140	; 0x8c
 8011246:	461f      	mov	r7, r3
 8011248:	2300      	movs	r3, #0
 801124a:	931e      	str	r3, [sp, #120]	; 0x78
 801124c:	4ba4      	ldr	r3, [pc, #656]	; (80114e0 <_strtod_l+0x2a0>)
 801124e:	9219      	str	r2, [sp, #100]	; 0x64
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	9307      	str	r3, [sp, #28]
 8011254:	4604      	mov	r4, r0
 8011256:	4618      	mov	r0, r3
 8011258:	4688      	mov	r8, r1
 801125a:	f7ee ffc1 	bl	80001e0 <strlen>
 801125e:	f04f 0a00 	mov.w	sl, #0
 8011262:	4605      	mov	r5, r0
 8011264:	f04f 0b00 	mov.w	fp, #0
 8011268:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801126c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801126e:	781a      	ldrb	r2, [r3, #0]
 8011270:	2a2b      	cmp	r2, #43	; 0x2b
 8011272:	d04c      	beq.n	801130e <_strtod_l+0xce>
 8011274:	d839      	bhi.n	80112ea <_strtod_l+0xaa>
 8011276:	2a0d      	cmp	r2, #13
 8011278:	d832      	bhi.n	80112e0 <_strtod_l+0xa0>
 801127a:	2a08      	cmp	r2, #8
 801127c:	d832      	bhi.n	80112e4 <_strtod_l+0xa4>
 801127e:	2a00      	cmp	r2, #0
 8011280:	d03c      	beq.n	80112fc <_strtod_l+0xbc>
 8011282:	2300      	movs	r3, #0
 8011284:	930e      	str	r3, [sp, #56]	; 0x38
 8011286:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011288:	7833      	ldrb	r3, [r6, #0]
 801128a:	2b30      	cmp	r3, #48	; 0x30
 801128c:	f040 80b4 	bne.w	80113f8 <_strtod_l+0x1b8>
 8011290:	7873      	ldrb	r3, [r6, #1]
 8011292:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011296:	2b58      	cmp	r3, #88	; 0x58
 8011298:	d16c      	bne.n	8011374 <_strtod_l+0x134>
 801129a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801129c:	9301      	str	r3, [sp, #4]
 801129e:	ab1e      	add	r3, sp, #120	; 0x78
 80112a0:	9702      	str	r7, [sp, #8]
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	4a8f      	ldr	r2, [pc, #572]	; (80114e4 <_strtod_l+0x2a4>)
 80112a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80112a8:	a91d      	add	r1, sp, #116	; 0x74
 80112aa:	4620      	mov	r0, r4
 80112ac:	f001 fd60 	bl	8012d70 <__gethex>
 80112b0:	f010 0707 	ands.w	r7, r0, #7
 80112b4:	4605      	mov	r5, r0
 80112b6:	d005      	beq.n	80112c4 <_strtod_l+0x84>
 80112b8:	2f06      	cmp	r7, #6
 80112ba:	d12a      	bne.n	8011312 <_strtod_l+0xd2>
 80112bc:	3601      	adds	r6, #1
 80112be:	2300      	movs	r3, #0
 80112c0:	961d      	str	r6, [sp, #116]	; 0x74
 80112c2:	930e      	str	r3, [sp, #56]	; 0x38
 80112c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f040 8596 	bne.w	8011df8 <_strtod_l+0xbb8>
 80112cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112ce:	b1db      	cbz	r3, 8011308 <_strtod_l+0xc8>
 80112d0:	4652      	mov	r2, sl
 80112d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80112d6:	ec43 2b10 	vmov	d0, r2, r3
 80112da:	b023      	add	sp, #140	; 0x8c
 80112dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e0:	2a20      	cmp	r2, #32
 80112e2:	d1ce      	bne.n	8011282 <_strtod_l+0x42>
 80112e4:	3301      	adds	r3, #1
 80112e6:	931d      	str	r3, [sp, #116]	; 0x74
 80112e8:	e7c0      	b.n	801126c <_strtod_l+0x2c>
 80112ea:	2a2d      	cmp	r2, #45	; 0x2d
 80112ec:	d1c9      	bne.n	8011282 <_strtod_l+0x42>
 80112ee:	2201      	movs	r2, #1
 80112f0:	920e      	str	r2, [sp, #56]	; 0x38
 80112f2:	1c5a      	adds	r2, r3, #1
 80112f4:	921d      	str	r2, [sp, #116]	; 0x74
 80112f6:	785b      	ldrb	r3, [r3, #1]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1c4      	bne.n	8011286 <_strtod_l+0x46>
 80112fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011302:	2b00      	cmp	r3, #0
 8011304:	f040 8576 	bne.w	8011df4 <_strtod_l+0xbb4>
 8011308:	4652      	mov	r2, sl
 801130a:	465b      	mov	r3, fp
 801130c:	e7e3      	b.n	80112d6 <_strtod_l+0x96>
 801130e:	2200      	movs	r2, #0
 8011310:	e7ee      	b.n	80112f0 <_strtod_l+0xb0>
 8011312:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011314:	b13a      	cbz	r2, 8011326 <_strtod_l+0xe6>
 8011316:	2135      	movs	r1, #53	; 0x35
 8011318:	a820      	add	r0, sp, #128	; 0x80
 801131a:	f002 fcd8 	bl	8013cce <__copybits>
 801131e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011320:	4620      	mov	r0, r4
 8011322:	f002 f89d 	bl	8013460 <_Bfree>
 8011326:	3f01      	subs	r7, #1
 8011328:	2f05      	cmp	r7, #5
 801132a:	d807      	bhi.n	801133c <_strtod_l+0xfc>
 801132c:	e8df f007 	tbb	[pc, r7]
 8011330:	1d180b0e 	.word	0x1d180b0e
 8011334:	030e      	.short	0x030e
 8011336:	f04f 0b00 	mov.w	fp, #0
 801133a:	46da      	mov	sl, fp
 801133c:	0728      	lsls	r0, r5, #28
 801133e:	d5c1      	bpl.n	80112c4 <_strtod_l+0x84>
 8011340:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011344:	e7be      	b.n	80112c4 <_strtod_l+0x84>
 8011346:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801134a:	e7f7      	b.n	801133c <_strtod_l+0xfc>
 801134c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011350:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011356:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801135a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801135e:	e7ed      	b.n	801133c <_strtod_l+0xfc>
 8011360:	f8df b184 	ldr.w	fp, [pc, #388]	; 80114e8 <_strtod_l+0x2a8>
 8011364:	f04f 0a00 	mov.w	sl, #0
 8011368:	e7e8      	b.n	801133c <_strtod_l+0xfc>
 801136a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801136e:	f04f 3aff 	mov.w	sl, #4294967295
 8011372:	e7e3      	b.n	801133c <_strtod_l+0xfc>
 8011374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	921d      	str	r2, [sp, #116]	; 0x74
 801137a:	785b      	ldrb	r3, [r3, #1]
 801137c:	2b30      	cmp	r3, #48	; 0x30
 801137e:	d0f9      	beq.n	8011374 <_strtod_l+0x134>
 8011380:	2b00      	cmp	r3, #0
 8011382:	d09f      	beq.n	80112c4 <_strtod_l+0x84>
 8011384:	2301      	movs	r3, #1
 8011386:	f04f 0900 	mov.w	r9, #0
 801138a:	9304      	str	r3, [sp, #16]
 801138c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801138e:	930a      	str	r3, [sp, #40]	; 0x28
 8011390:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011394:	464f      	mov	r7, r9
 8011396:	220a      	movs	r2, #10
 8011398:	981d      	ldr	r0, [sp, #116]	; 0x74
 801139a:	7806      	ldrb	r6, [r0, #0]
 801139c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80113a0:	b2d9      	uxtb	r1, r3
 80113a2:	2909      	cmp	r1, #9
 80113a4:	d92a      	bls.n	80113fc <_strtod_l+0x1bc>
 80113a6:	9907      	ldr	r1, [sp, #28]
 80113a8:	462a      	mov	r2, r5
 80113aa:	f003 fa6b 	bl	8014884 <strncmp>
 80113ae:	b398      	cbz	r0, 8011418 <_strtod_l+0x1d8>
 80113b0:	2000      	movs	r0, #0
 80113b2:	4633      	mov	r3, r6
 80113b4:	463d      	mov	r5, r7
 80113b6:	9007      	str	r0, [sp, #28]
 80113b8:	4602      	mov	r2, r0
 80113ba:	2b65      	cmp	r3, #101	; 0x65
 80113bc:	d001      	beq.n	80113c2 <_strtod_l+0x182>
 80113be:	2b45      	cmp	r3, #69	; 0x45
 80113c0:	d118      	bne.n	80113f4 <_strtod_l+0x1b4>
 80113c2:	b91d      	cbnz	r5, 80113cc <_strtod_l+0x18c>
 80113c4:	9b04      	ldr	r3, [sp, #16]
 80113c6:	4303      	orrs	r3, r0
 80113c8:	d098      	beq.n	80112fc <_strtod_l+0xbc>
 80113ca:	2500      	movs	r5, #0
 80113cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80113d0:	f108 0301 	add.w	r3, r8, #1
 80113d4:	931d      	str	r3, [sp, #116]	; 0x74
 80113d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80113da:	2b2b      	cmp	r3, #43	; 0x2b
 80113dc:	d075      	beq.n	80114ca <_strtod_l+0x28a>
 80113de:	2b2d      	cmp	r3, #45	; 0x2d
 80113e0:	d07b      	beq.n	80114da <_strtod_l+0x29a>
 80113e2:	f04f 0c00 	mov.w	ip, #0
 80113e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80113ea:	2909      	cmp	r1, #9
 80113ec:	f240 8082 	bls.w	80114f4 <_strtod_l+0x2b4>
 80113f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80113f4:	2600      	movs	r6, #0
 80113f6:	e09d      	b.n	8011534 <_strtod_l+0x2f4>
 80113f8:	2300      	movs	r3, #0
 80113fa:	e7c4      	b.n	8011386 <_strtod_l+0x146>
 80113fc:	2f08      	cmp	r7, #8
 80113fe:	bfd8      	it	le
 8011400:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011402:	f100 0001 	add.w	r0, r0, #1
 8011406:	bfda      	itte	le
 8011408:	fb02 3301 	mlale	r3, r2, r1, r3
 801140c:	9309      	strle	r3, [sp, #36]	; 0x24
 801140e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011412:	3701      	adds	r7, #1
 8011414:	901d      	str	r0, [sp, #116]	; 0x74
 8011416:	e7bf      	b.n	8011398 <_strtod_l+0x158>
 8011418:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801141a:	195a      	adds	r2, r3, r5
 801141c:	921d      	str	r2, [sp, #116]	; 0x74
 801141e:	5d5b      	ldrb	r3, [r3, r5]
 8011420:	2f00      	cmp	r7, #0
 8011422:	d037      	beq.n	8011494 <_strtod_l+0x254>
 8011424:	9007      	str	r0, [sp, #28]
 8011426:	463d      	mov	r5, r7
 8011428:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801142c:	2a09      	cmp	r2, #9
 801142e:	d912      	bls.n	8011456 <_strtod_l+0x216>
 8011430:	2201      	movs	r2, #1
 8011432:	e7c2      	b.n	80113ba <_strtod_l+0x17a>
 8011434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	921d      	str	r2, [sp, #116]	; 0x74
 801143a:	785b      	ldrb	r3, [r3, #1]
 801143c:	3001      	adds	r0, #1
 801143e:	2b30      	cmp	r3, #48	; 0x30
 8011440:	d0f8      	beq.n	8011434 <_strtod_l+0x1f4>
 8011442:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011446:	2a08      	cmp	r2, #8
 8011448:	f200 84db 	bhi.w	8011e02 <_strtod_l+0xbc2>
 801144c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801144e:	9007      	str	r0, [sp, #28]
 8011450:	2000      	movs	r0, #0
 8011452:	920a      	str	r2, [sp, #40]	; 0x28
 8011454:	4605      	mov	r5, r0
 8011456:	3b30      	subs	r3, #48	; 0x30
 8011458:	f100 0201 	add.w	r2, r0, #1
 801145c:	d014      	beq.n	8011488 <_strtod_l+0x248>
 801145e:	9907      	ldr	r1, [sp, #28]
 8011460:	4411      	add	r1, r2
 8011462:	9107      	str	r1, [sp, #28]
 8011464:	462a      	mov	r2, r5
 8011466:	eb00 0e05 	add.w	lr, r0, r5
 801146a:	210a      	movs	r1, #10
 801146c:	4572      	cmp	r2, lr
 801146e:	d113      	bne.n	8011498 <_strtod_l+0x258>
 8011470:	182a      	adds	r2, r5, r0
 8011472:	2a08      	cmp	r2, #8
 8011474:	f105 0501 	add.w	r5, r5, #1
 8011478:	4405      	add	r5, r0
 801147a:	dc1c      	bgt.n	80114b6 <_strtod_l+0x276>
 801147c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801147e:	220a      	movs	r2, #10
 8011480:	fb02 3301 	mla	r3, r2, r1, r3
 8011484:	9309      	str	r3, [sp, #36]	; 0x24
 8011486:	2200      	movs	r2, #0
 8011488:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801148a:	1c59      	adds	r1, r3, #1
 801148c:	911d      	str	r1, [sp, #116]	; 0x74
 801148e:	785b      	ldrb	r3, [r3, #1]
 8011490:	4610      	mov	r0, r2
 8011492:	e7c9      	b.n	8011428 <_strtod_l+0x1e8>
 8011494:	4638      	mov	r0, r7
 8011496:	e7d2      	b.n	801143e <_strtod_l+0x1fe>
 8011498:	2a08      	cmp	r2, #8
 801149a:	dc04      	bgt.n	80114a6 <_strtod_l+0x266>
 801149c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801149e:	434e      	muls	r6, r1
 80114a0:	9609      	str	r6, [sp, #36]	; 0x24
 80114a2:	3201      	adds	r2, #1
 80114a4:	e7e2      	b.n	801146c <_strtod_l+0x22c>
 80114a6:	f102 0c01 	add.w	ip, r2, #1
 80114aa:	f1bc 0f10 	cmp.w	ip, #16
 80114ae:	bfd8      	it	le
 80114b0:	fb01 f909 	mulle.w	r9, r1, r9
 80114b4:	e7f5      	b.n	80114a2 <_strtod_l+0x262>
 80114b6:	2d10      	cmp	r5, #16
 80114b8:	bfdc      	itt	le
 80114ba:	220a      	movle	r2, #10
 80114bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80114c0:	e7e1      	b.n	8011486 <_strtod_l+0x246>
 80114c2:	2300      	movs	r3, #0
 80114c4:	9307      	str	r3, [sp, #28]
 80114c6:	2201      	movs	r2, #1
 80114c8:	e77c      	b.n	80113c4 <_strtod_l+0x184>
 80114ca:	f04f 0c00 	mov.w	ip, #0
 80114ce:	f108 0302 	add.w	r3, r8, #2
 80114d2:	931d      	str	r3, [sp, #116]	; 0x74
 80114d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80114d8:	e785      	b.n	80113e6 <_strtod_l+0x1a6>
 80114da:	f04f 0c01 	mov.w	ip, #1
 80114de:	e7f6      	b.n	80114ce <_strtod_l+0x28e>
 80114e0:	08017570 	.word	0x08017570
 80114e4:	08017320 	.word	0x08017320
 80114e8:	7ff00000 	.word	0x7ff00000
 80114ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114ee:	1c59      	adds	r1, r3, #1
 80114f0:	911d      	str	r1, [sp, #116]	; 0x74
 80114f2:	785b      	ldrb	r3, [r3, #1]
 80114f4:	2b30      	cmp	r3, #48	; 0x30
 80114f6:	d0f9      	beq.n	80114ec <_strtod_l+0x2ac>
 80114f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80114fc:	2908      	cmp	r1, #8
 80114fe:	f63f af79 	bhi.w	80113f4 <_strtod_l+0x1b4>
 8011502:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011508:	9308      	str	r3, [sp, #32]
 801150a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801150c:	1c59      	adds	r1, r3, #1
 801150e:	911d      	str	r1, [sp, #116]	; 0x74
 8011510:	785b      	ldrb	r3, [r3, #1]
 8011512:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011516:	2e09      	cmp	r6, #9
 8011518:	d937      	bls.n	801158a <_strtod_l+0x34a>
 801151a:	9e08      	ldr	r6, [sp, #32]
 801151c:	1b89      	subs	r1, r1, r6
 801151e:	2908      	cmp	r1, #8
 8011520:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011524:	dc02      	bgt.n	801152c <_strtod_l+0x2ec>
 8011526:	4576      	cmp	r6, lr
 8011528:	bfa8      	it	ge
 801152a:	4676      	movge	r6, lr
 801152c:	f1bc 0f00 	cmp.w	ip, #0
 8011530:	d000      	beq.n	8011534 <_strtod_l+0x2f4>
 8011532:	4276      	negs	r6, r6
 8011534:	2d00      	cmp	r5, #0
 8011536:	d14f      	bne.n	80115d8 <_strtod_l+0x398>
 8011538:	9904      	ldr	r1, [sp, #16]
 801153a:	4301      	orrs	r1, r0
 801153c:	f47f aec2 	bne.w	80112c4 <_strtod_l+0x84>
 8011540:	2a00      	cmp	r2, #0
 8011542:	f47f aedb 	bne.w	80112fc <_strtod_l+0xbc>
 8011546:	2b69      	cmp	r3, #105	; 0x69
 8011548:	d027      	beq.n	801159a <_strtod_l+0x35a>
 801154a:	dc24      	bgt.n	8011596 <_strtod_l+0x356>
 801154c:	2b49      	cmp	r3, #73	; 0x49
 801154e:	d024      	beq.n	801159a <_strtod_l+0x35a>
 8011550:	2b4e      	cmp	r3, #78	; 0x4e
 8011552:	f47f aed3 	bne.w	80112fc <_strtod_l+0xbc>
 8011556:	499e      	ldr	r1, [pc, #632]	; (80117d0 <_strtod_l+0x590>)
 8011558:	a81d      	add	r0, sp, #116	; 0x74
 801155a:	f001 fe61 	bl	8013220 <__match>
 801155e:	2800      	cmp	r0, #0
 8011560:	f43f aecc 	beq.w	80112fc <_strtod_l+0xbc>
 8011564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b28      	cmp	r3, #40	; 0x28
 801156a:	d12d      	bne.n	80115c8 <_strtod_l+0x388>
 801156c:	4999      	ldr	r1, [pc, #612]	; (80117d4 <_strtod_l+0x594>)
 801156e:	aa20      	add	r2, sp, #128	; 0x80
 8011570:	a81d      	add	r0, sp, #116	; 0x74
 8011572:	f001 fe69 	bl	8013248 <__hexnan>
 8011576:	2805      	cmp	r0, #5
 8011578:	d126      	bne.n	80115c8 <_strtod_l+0x388>
 801157a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801157c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011580:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011584:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011588:	e69c      	b.n	80112c4 <_strtod_l+0x84>
 801158a:	210a      	movs	r1, #10
 801158c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011590:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011594:	e7b9      	b.n	801150a <_strtod_l+0x2ca>
 8011596:	2b6e      	cmp	r3, #110	; 0x6e
 8011598:	e7db      	b.n	8011552 <_strtod_l+0x312>
 801159a:	498f      	ldr	r1, [pc, #572]	; (80117d8 <_strtod_l+0x598>)
 801159c:	a81d      	add	r0, sp, #116	; 0x74
 801159e:	f001 fe3f 	bl	8013220 <__match>
 80115a2:	2800      	cmp	r0, #0
 80115a4:	f43f aeaa 	beq.w	80112fc <_strtod_l+0xbc>
 80115a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80115aa:	498c      	ldr	r1, [pc, #560]	; (80117dc <_strtod_l+0x59c>)
 80115ac:	3b01      	subs	r3, #1
 80115ae:	a81d      	add	r0, sp, #116	; 0x74
 80115b0:	931d      	str	r3, [sp, #116]	; 0x74
 80115b2:	f001 fe35 	bl	8013220 <__match>
 80115b6:	b910      	cbnz	r0, 80115be <_strtod_l+0x37e>
 80115b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80115ba:	3301      	adds	r3, #1
 80115bc:	931d      	str	r3, [sp, #116]	; 0x74
 80115be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80117ec <_strtod_l+0x5ac>
 80115c2:	f04f 0a00 	mov.w	sl, #0
 80115c6:	e67d      	b.n	80112c4 <_strtod_l+0x84>
 80115c8:	4885      	ldr	r0, [pc, #532]	; (80117e0 <_strtod_l+0x5a0>)
 80115ca:	f003 f909 	bl	80147e0 <nan>
 80115ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80115d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80115d6:	e675      	b.n	80112c4 <_strtod_l+0x84>
 80115d8:	9b07      	ldr	r3, [sp, #28]
 80115da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115dc:	1af3      	subs	r3, r6, r3
 80115de:	2f00      	cmp	r7, #0
 80115e0:	bf08      	it	eq
 80115e2:	462f      	moveq	r7, r5
 80115e4:	2d10      	cmp	r5, #16
 80115e6:	9308      	str	r3, [sp, #32]
 80115e8:	46a8      	mov	r8, r5
 80115ea:	bfa8      	it	ge
 80115ec:	f04f 0810 	movge.w	r8, #16
 80115f0:	f7ee ff90 	bl	8000514 <__aeabi_ui2d>
 80115f4:	2d09      	cmp	r5, #9
 80115f6:	4682      	mov	sl, r0
 80115f8:	468b      	mov	fp, r1
 80115fa:	dd13      	ble.n	8011624 <_strtod_l+0x3e4>
 80115fc:	4b79      	ldr	r3, [pc, #484]	; (80117e4 <_strtod_l+0x5a4>)
 80115fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011602:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011606:	f7ee ffff 	bl	8000608 <__aeabi_dmul>
 801160a:	4682      	mov	sl, r0
 801160c:	4648      	mov	r0, r9
 801160e:	468b      	mov	fp, r1
 8011610:	f7ee ff80 	bl	8000514 <__aeabi_ui2d>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	4650      	mov	r0, sl
 801161a:	4659      	mov	r1, fp
 801161c:	f7ee fe3e 	bl	800029c <__adddf3>
 8011620:	4682      	mov	sl, r0
 8011622:	468b      	mov	fp, r1
 8011624:	2d0f      	cmp	r5, #15
 8011626:	dc38      	bgt.n	801169a <_strtod_l+0x45a>
 8011628:	9b08      	ldr	r3, [sp, #32]
 801162a:	2b00      	cmp	r3, #0
 801162c:	f43f ae4a 	beq.w	80112c4 <_strtod_l+0x84>
 8011630:	dd24      	ble.n	801167c <_strtod_l+0x43c>
 8011632:	2b16      	cmp	r3, #22
 8011634:	dc0b      	bgt.n	801164e <_strtod_l+0x40e>
 8011636:	4d6b      	ldr	r5, [pc, #428]	; (80117e4 <_strtod_l+0x5a4>)
 8011638:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801163c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011640:	4652      	mov	r2, sl
 8011642:	465b      	mov	r3, fp
 8011644:	f7ee ffe0 	bl	8000608 <__aeabi_dmul>
 8011648:	4682      	mov	sl, r0
 801164a:	468b      	mov	fp, r1
 801164c:	e63a      	b.n	80112c4 <_strtod_l+0x84>
 801164e:	9a08      	ldr	r2, [sp, #32]
 8011650:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011654:	4293      	cmp	r3, r2
 8011656:	db20      	blt.n	801169a <_strtod_l+0x45a>
 8011658:	4c62      	ldr	r4, [pc, #392]	; (80117e4 <_strtod_l+0x5a4>)
 801165a:	f1c5 050f 	rsb	r5, r5, #15
 801165e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011662:	4652      	mov	r2, sl
 8011664:	465b      	mov	r3, fp
 8011666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801166a:	f7ee ffcd 	bl	8000608 <__aeabi_dmul>
 801166e:	9b08      	ldr	r3, [sp, #32]
 8011670:	1b5d      	subs	r5, r3, r5
 8011672:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011676:	e9d4 2300 	ldrd	r2, r3, [r4]
 801167a:	e7e3      	b.n	8011644 <_strtod_l+0x404>
 801167c:	9b08      	ldr	r3, [sp, #32]
 801167e:	3316      	adds	r3, #22
 8011680:	db0b      	blt.n	801169a <_strtod_l+0x45a>
 8011682:	9b07      	ldr	r3, [sp, #28]
 8011684:	4a57      	ldr	r2, [pc, #348]	; (80117e4 <_strtod_l+0x5a4>)
 8011686:	1b9e      	subs	r6, r3, r6
 8011688:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801168c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011690:	4650      	mov	r0, sl
 8011692:	4659      	mov	r1, fp
 8011694:	f7ef f8e2 	bl	800085c <__aeabi_ddiv>
 8011698:	e7d6      	b.n	8011648 <_strtod_l+0x408>
 801169a:	9b08      	ldr	r3, [sp, #32]
 801169c:	eba5 0808 	sub.w	r8, r5, r8
 80116a0:	4498      	add	r8, r3
 80116a2:	f1b8 0f00 	cmp.w	r8, #0
 80116a6:	dd71      	ble.n	801178c <_strtod_l+0x54c>
 80116a8:	f018 030f 	ands.w	r3, r8, #15
 80116ac:	d00a      	beq.n	80116c4 <_strtod_l+0x484>
 80116ae:	494d      	ldr	r1, [pc, #308]	; (80117e4 <_strtod_l+0x5a4>)
 80116b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80116b4:	4652      	mov	r2, sl
 80116b6:	465b      	mov	r3, fp
 80116b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116bc:	f7ee ffa4 	bl	8000608 <__aeabi_dmul>
 80116c0:	4682      	mov	sl, r0
 80116c2:	468b      	mov	fp, r1
 80116c4:	f038 080f 	bics.w	r8, r8, #15
 80116c8:	d04d      	beq.n	8011766 <_strtod_l+0x526>
 80116ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80116ce:	dd22      	ble.n	8011716 <_strtod_l+0x4d6>
 80116d0:	2500      	movs	r5, #0
 80116d2:	462e      	mov	r6, r5
 80116d4:	9509      	str	r5, [sp, #36]	; 0x24
 80116d6:	9507      	str	r5, [sp, #28]
 80116d8:	2322      	movs	r3, #34	; 0x22
 80116da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80117ec <_strtod_l+0x5ac>
 80116de:	6023      	str	r3, [r4, #0]
 80116e0:	f04f 0a00 	mov.w	sl, #0
 80116e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f43f adec 	beq.w	80112c4 <_strtod_l+0x84>
 80116ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80116ee:	4620      	mov	r0, r4
 80116f0:	f001 feb6 	bl	8013460 <_Bfree>
 80116f4:	9907      	ldr	r1, [sp, #28]
 80116f6:	4620      	mov	r0, r4
 80116f8:	f001 feb2 	bl	8013460 <_Bfree>
 80116fc:	4631      	mov	r1, r6
 80116fe:	4620      	mov	r0, r4
 8011700:	f001 feae 	bl	8013460 <_Bfree>
 8011704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011706:	4620      	mov	r0, r4
 8011708:	f001 feaa 	bl	8013460 <_Bfree>
 801170c:	4629      	mov	r1, r5
 801170e:	4620      	mov	r0, r4
 8011710:	f001 fea6 	bl	8013460 <_Bfree>
 8011714:	e5d6      	b.n	80112c4 <_strtod_l+0x84>
 8011716:	2300      	movs	r3, #0
 8011718:	ea4f 1828 	mov.w	r8, r8, asr #4
 801171c:	4650      	mov	r0, sl
 801171e:	4659      	mov	r1, fp
 8011720:	4699      	mov	r9, r3
 8011722:	f1b8 0f01 	cmp.w	r8, #1
 8011726:	dc21      	bgt.n	801176c <_strtod_l+0x52c>
 8011728:	b10b      	cbz	r3, 801172e <_strtod_l+0x4ee>
 801172a:	4682      	mov	sl, r0
 801172c:	468b      	mov	fp, r1
 801172e:	4b2e      	ldr	r3, [pc, #184]	; (80117e8 <_strtod_l+0x5a8>)
 8011730:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011734:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011738:	4652      	mov	r2, sl
 801173a:	465b      	mov	r3, fp
 801173c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011740:	f7ee ff62 	bl	8000608 <__aeabi_dmul>
 8011744:	4b29      	ldr	r3, [pc, #164]	; (80117ec <_strtod_l+0x5ac>)
 8011746:	460a      	mov	r2, r1
 8011748:	400b      	ands	r3, r1
 801174a:	4929      	ldr	r1, [pc, #164]	; (80117f0 <_strtod_l+0x5b0>)
 801174c:	428b      	cmp	r3, r1
 801174e:	4682      	mov	sl, r0
 8011750:	d8be      	bhi.n	80116d0 <_strtod_l+0x490>
 8011752:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011756:	428b      	cmp	r3, r1
 8011758:	bf86      	itte	hi
 801175a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80117f4 <_strtod_l+0x5b4>
 801175e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011762:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011766:	2300      	movs	r3, #0
 8011768:	9304      	str	r3, [sp, #16]
 801176a:	e081      	b.n	8011870 <_strtod_l+0x630>
 801176c:	f018 0f01 	tst.w	r8, #1
 8011770:	d007      	beq.n	8011782 <_strtod_l+0x542>
 8011772:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <_strtod_l+0x5a8>)
 8011774:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177c:	f7ee ff44 	bl	8000608 <__aeabi_dmul>
 8011780:	2301      	movs	r3, #1
 8011782:	f109 0901 	add.w	r9, r9, #1
 8011786:	ea4f 0868 	mov.w	r8, r8, asr #1
 801178a:	e7ca      	b.n	8011722 <_strtod_l+0x4e2>
 801178c:	d0eb      	beq.n	8011766 <_strtod_l+0x526>
 801178e:	f1c8 0800 	rsb	r8, r8, #0
 8011792:	f018 020f 	ands.w	r2, r8, #15
 8011796:	d00a      	beq.n	80117ae <_strtod_l+0x56e>
 8011798:	4b12      	ldr	r3, [pc, #72]	; (80117e4 <_strtod_l+0x5a4>)
 801179a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801179e:	4650      	mov	r0, sl
 80117a0:	4659      	mov	r1, fp
 80117a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a6:	f7ef f859 	bl	800085c <__aeabi_ddiv>
 80117aa:	4682      	mov	sl, r0
 80117ac:	468b      	mov	fp, r1
 80117ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80117b2:	d0d8      	beq.n	8011766 <_strtod_l+0x526>
 80117b4:	f1b8 0f1f 	cmp.w	r8, #31
 80117b8:	dd1e      	ble.n	80117f8 <_strtod_l+0x5b8>
 80117ba:	2500      	movs	r5, #0
 80117bc:	462e      	mov	r6, r5
 80117be:	9509      	str	r5, [sp, #36]	; 0x24
 80117c0:	9507      	str	r5, [sp, #28]
 80117c2:	2322      	movs	r3, #34	; 0x22
 80117c4:	f04f 0a00 	mov.w	sl, #0
 80117c8:	f04f 0b00 	mov.w	fp, #0
 80117cc:	6023      	str	r3, [r4, #0]
 80117ce:	e789      	b.n	80116e4 <_strtod_l+0x4a4>
 80117d0:	080172f5 	.word	0x080172f5
 80117d4:	08017334 	.word	0x08017334
 80117d8:	080172ed 	.word	0x080172ed
 80117dc:	08017474 	.word	0x08017474
 80117e0:	0801774b 	.word	0x0801774b
 80117e4:	08017610 	.word	0x08017610
 80117e8:	080175e8 	.word	0x080175e8
 80117ec:	7ff00000 	.word	0x7ff00000
 80117f0:	7ca00000 	.word	0x7ca00000
 80117f4:	7fefffff 	.word	0x7fefffff
 80117f8:	f018 0310 	ands.w	r3, r8, #16
 80117fc:	bf18      	it	ne
 80117fe:	236a      	movne	r3, #106	; 0x6a
 8011800:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011bb8 <_strtod_l+0x978>
 8011804:	9304      	str	r3, [sp, #16]
 8011806:	4650      	mov	r0, sl
 8011808:	4659      	mov	r1, fp
 801180a:	2300      	movs	r3, #0
 801180c:	f018 0f01 	tst.w	r8, #1
 8011810:	d004      	beq.n	801181c <_strtod_l+0x5dc>
 8011812:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011816:	f7ee fef7 	bl	8000608 <__aeabi_dmul>
 801181a:	2301      	movs	r3, #1
 801181c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011820:	f109 0908 	add.w	r9, r9, #8
 8011824:	d1f2      	bne.n	801180c <_strtod_l+0x5cc>
 8011826:	b10b      	cbz	r3, 801182c <_strtod_l+0x5ec>
 8011828:	4682      	mov	sl, r0
 801182a:	468b      	mov	fp, r1
 801182c:	9b04      	ldr	r3, [sp, #16]
 801182e:	b1bb      	cbz	r3, 8011860 <_strtod_l+0x620>
 8011830:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011834:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011838:	2b00      	cmp	r3, #0
 801183a:	4659      	mov	r1, fp
 801183c:	dd10      	ble.n	8011860 <_strtod_l+0x620>
 801183e:	2b1f      	cmp	r3, #31
 8011840:	f340 8128 	ble.w	8011a94 <_strtod_l+0x854>
 8011844:	2b34      	cmp	r3, #52	; 0x34
 8011846:	bfde      	ittt	le
 8011848:	3b20      	suble	r3, #32
 801184a:	f04f 32ff 	movle.w	r2, #4294967295
 801184e:	fa02 f303 	lslle.w	r3, r2, r3
 8011852:	f04f 0a00 	mov.w	sl, #0
 8011856:	bfcc      	ite	gt
 8011858:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801185c:	ea03 0b01 	andle.w	fp, r3, r1
 8011860:	2200      	movs	r2, #0
 8011862:	2300      	movs	r3, #0
 8011864:	4650      	mov	r0, sl
 8011866:	4659      	mov	r1, fp
 8011868:	f7ef f936 	bl	8000ad8 <__aeabi_dcmpeq>
 801186c:	2800      	cmp	r0, #0
 801186e:	d1a4      	bne.n	80117ba <_strtod_l+0x57a>
 8011870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011872:	9300      	str	r3, [sp, #0]
 8011874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011876:	462b      	mov	r3, r5
 8011878:	463a      	mov	r2, r7
 801187a:	4620      	mov	r0, r4
 801187c:	f001 fe5c 	bl	8013538 <__s2b>
 8011880:	9009      	str	r0, [sp, #36]	; 0x24
 8011882:	2800      	cmp	r0, #0
 8011884:	f43f af24 	beq.w	80116d0 <_strtod_l+0x490>
 8011888:	9b07      	ldr	r3, [sp, #28]
 801188a:	1b9e      	subs	r6, r3, r6
 801188c:	9b08      	ldr	r3, [sp, #32]
 801188e:	2b00      	cmp	r3, #0
 8011890:	bfb4      	ite	lt
 8011892:	4633      	movlt	r3, r6
 8011894:	2300      	movge	r3, #0
 8011896:	9310      	str	r3, [sp, #64]	; 0x40
 8011898:	9b08      	ldr	r3, [sp, #32]
 801189a:	2500      	movs	r5, #0
 801189c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80118a0:	9318      	str	r3, [sp, #96]	; 0x60
 80118a2:	462e      	mov	r6, r5
 80118a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a6:	4620      	mov	r0, r4
 80118a8:	6859      	ldr	r1, [r3, #4]
 80118aa:	f001 fd99 	bl	80133e0 <_Balloc>
 80118ae:	9007      	str	r0, [sp, #28]
 80118b0:	2800      	cmp	r0, #0
 80118b2:	f43f af11 	beq.w	80116d8 <_strtod_l+0x498>
 80118b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b8:	691a      	ldr	r2, [r3, #16]
 80118ba:	3202      	adds	r2, #2
 80118bc:	f103 010c 	add.w	r1, r3, #12
 80118c0:	0092      	lsls	r2, r2, #2
 80118c2:	300c      	adds	r0, #12
 80118c4:	f7fe fd2c 	bl	8010320 <memcpy>
 80118c8:	ec4b ab10 	vmov	d0, sl, fp
 80118cc:	aa20      	add	r2, sp, #128	; 0x80
 80118ce:	a91f      	add	r1, sp, #124	; 0x7c
 80118d0:	4620      	mov	r0, r4
 80118d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80118d6:	f002 f96b 	bl	8013bb0 <__d2b>
 80118da:	901e      	str	r0, [sp, #120]	; 0x78
 80118dc:	2800      	cmp	r0, #0
 80118de:	f43f aefb 	beq.w	80116d8 <_strtod_l+0x498>
 80118e2:	2101      	movs	r1, #1
 80118e4:	4620      	mov	r0, r4
 80118e6:	f001 fec1 	bl	801366c <__i2b>
 80118ea:	4606      	mov	r6, r0
 80118ec:	2800      	cmp	r0, #0
 80118ee:	f43f aef3 	beq.w	80116d8 <_strtod_l+0x498>
 80118f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80118f4:	9904      	ldr	r1, [sp, #16]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	bfab      	itete	ge
 80118fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80118fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80118fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011900:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011904:	bfac      	ite	ge
 8011906:	eb03 0902 	addge.w	r9, r3, r2
 801190a:	1ad7      	sublt	r7, r2, r3
 801190c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801190e:	eba3 0801 	sub.w	r8, r3, r1
 8011912:	4490      	add	r8, r2
 8011914:	4ba3      	ldr	r3, [pc, #652]	; (8011ba4 <_strtod_l+0x964>)
 8011916:	f108 38ff 	add.w	r8, r8, #4294967295
 801191a:	4598      	cmp	r8, r3
 801191c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011920:	f280 80cc 	bge.w	8011abc <_strtod_l+0x87c>
 8011924:	eba3 0308 	sub.w	r3, r3, r8
 8011928:	2b1f      	cmp	r3, #31
 801192a:	eba2 0203 	sub.w	r2, r2, r3
 801192e:	f04f 0101 	mov.w	r1, #1
 8011932:	f300 80b6 	bgt.w	8011aa2 <_strtod_l+0x862>
 8011936:	fa01 f303 	lsl.w	r3, r1, r3
 801193a:	9311      	str	r3, [sp, #68]	; 0x44
 801193c:	2300      	movs	r3, #0
 801193e:	930c      	str	r3, [sp, #48]	; 0x30
 8011940:	eb09 0802 	add.w	r8, r9, r2
 8011944:	9b04      	ldr	r3, [sp, #16]
 8011946:	45c1      	cmp	r9, r8
 8011948:	4417      	add	r7, r2
 801194a:	441f      	add	r7, r3
 801194c:	464b      	mov	r3, r9
 801194e:	bfa8      	it	ge
 8011950:	4643      	movge	r3, r8
 8011952:	42bb      	cmp	r3, r7
 8011954:	bfa8      	it	ge
 8011956:	463b      	movge	r3, r7
 8011958:	2b00      	cmp	r3, #0
 801195a:	bfc2      	ittt	gt
 801195c:	eba8 0803 	subgt.w	r8, r8, r3
 8011960:	1aff      	subgt	r7, r7, r3
 8011962:	eba9 0903 	subgt.w	r9, r9, r3
 8011966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011968:	2b00      	cmp	r3, #0
 801196a:	dd17      	ble.n	801199c <_strtod_l+0x75c>
 801196c:	4631      	mov	r1, r6
 801196e:	461a      	mov	r2, r3
 8011970:	4620      	mov	r0, r4
 8011972:	f001 ff37 	bl	80137e4 <__pow5mult>
 8011976:	4606      	mov	r6, r0
 8011978:	2800      	cmp	r0, #0
 801197a:	f43f aead 	beq.w	80116d8 <_strtod_l+0x498>
 801197e:	4601      	mov	r1, r0
 8011980:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011982:	4620      	mov	r0, r4
 8011984:	f001 fe88 	bl	8013698 <__multiply>
 8011988:	900f      	str	r0, [sp, #60]	; 0x3c
 801198a:	2800      	cmp	r0, #0
 801198c:	f43f aea4 	beq.w	80116d8 <_strtod_l+0x498>
 8011990:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011992:	4620      	mov	r0, r4
 8011994:	f001 fd64 	bl	8013460 <_Bfree>
 8011998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801199a:	931e      	str	r3, [sp, #120]	; 0x78
 801199c:	f1b8 0f00 	cmp.w	r8, #0
 80119a0:	f300 8091 	bgt.w	8011ac6 <_strtod_l+0x886>
 80119a4:	9b08      	ldr	r3, [sp, #32]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	dd08      	ble.n	80119bc <_strtod_l+0x77c>
 80119aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119ac:	9907      	ldr	r1, [sp, #28]
 80119ae:	4620      	mov	r0, r4
 80119b0:	f001 ff18 	bl	80137e4 <__pow5mult>
 80119b4:	9007      	str	r0, [sp, #28]
 80119b6:	2800      	cmp	r0, #0
 80119b8:	f43f ae8e 	beq.w	80116d8 <_strtod_l+0x498>
 80119bc:	2f00      	cmp	r7, #0
 80119be:	dd08      	ble.n	80119d2 <_strtod_l+0x792>
 80119c0:	9907      	ldr	r1, [sp, #28]
 80119c2:	463a      	mov	r2, r7
 80119c4:	4620      	mov	r0, r4
 80119c6:	f001 ff67 	bl	8013898 <__lshift>
 80119ca:	9007      	str	r0, [sp, #28]
 80119cc:	2800      	cmp	r0, #0
 80119ce:	f43f ae83 	beq.w	80116d8 <_strtod_l+0x498>
 80119d2:	f1b9 0f00 	cmp.w	r9, #0
 80119d6:	dd08      	ble.n	80119ea <_strtod_l+0x7aa>
 80119d8:	4631      	mov	r1, r6
 80119da:	464a      	mov	r2, r9
 80119dc:	4620      	mov	r0, r4
 80119de:	f001 ff5b 	bl	8013898 <__lshift>
 80119e2:	4606      	mov	r6, r0
 80119e4:	2800      	cmp	r0, #0
 80119e6:	f43f ae77 	beq.w	80116d8 <_strtod_l+0x498>
 80119ea:	9a07      	ldr	r2, [sp, #28]
 80119ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80119ee:	4620      	mov	r0, r4
 80119f0:	f001 ffda 	bl	80139a8 <__mdiff>
 80119f4:	4605      	mov	r5, r0
 80119f6:	2800      	cmp	r0, #0
 80119f8:	f43f ae6e 	beq.w	80116d8 <_strtod_l+0x498>
 80119fc:	68c3      	ldr	r3, [r0, #12]
 80119fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a00:	2300      	movs	r3, #0
 8011a02:	60c3      	str	r3, [r0, #12]
 8011a04:	4631      	mov	r1, r6
 8011a06:	f001 ffb3 	bl	8013970 <__mcmp>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	da65      	bge.n	8011ada <_strtod_l+0x89a>
 8011a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a10:	ea53 030a 	orrs.w	r3, r3, sl
 8011a14:	f040 8087 	bne.w	8011b26 <_strtod_l+0x8e6>
 8011a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f040 8082 	bne.w	8011b26 <_strtod_l+0x8e6>
 8011a22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a26:	0d1b      	lsrs	r3, r3, #20
 8011a28:	051b      	lsls	r3, r3, #20
 8011a2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011a2e:	d97a      	bls.n	8011b26 <_strtod_l+0x8e6>
 8011a30:	696b      	ldr	r3, [r5, #20]
 8011a32:	b913      	cbnz	r3, 8011a3a <_strtod_l+0x7fa>
 8011a34:	692b      	ldr	r3, [r5, #16]
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	dd75      	ble.n	8011b26 <_strtod_l+0x8e6>
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f001 ff2a 	bl	8013898 <__lshift>
 8011a44:	4631      	mov	r1, r6
 8011a46:	4605      	mov	r5, r0
 8011a48:	f001 ff92 	bl	8013970 <__mcmp>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	dd6a      	ble.n	8011b26 <_strtod_l+0x8e6>
 8011a50:	9904      	ldr	r1, [sp, #16]
 8011a52:	4a55      	ldr	r2, [pc, #340]	; (8011ba8 <_strtod_l+0x968>)
 8011a54:	465b      	mov	r3, fp
 8011a56:	2900      	cmp	r1, #0
 8011a58:	f000 8085 	beq.w	8011b66 <_strtod_l+0x926>
 8011a5c:	ea02 010b 	and.w	r1, r2, fp
 8011a60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011a64:	dc7f      	bgt.n	8011b66 <_strtod_l+0x926>
 8011a66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011a6a:	f77f aeaa 	ble.w	80117c2 <_strtod_l+0x582>
 8011a6e:	4a4f      	ldr	r2, [pc, #316]	; (8011bac <_strtod_l+0x96c>)
 8011a70:	2300      	movs	r3, #0
 8011a72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011a76:	4650      	mov	r0, sl
 8011a78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011a7c:	4659      	mov	r1, fp
 8011a7e:	f7ee fdc3 	bl	8000608 <__aeabi_dmul>
 8011a82:	460b      	mov	r3, r1
 8011a84:	4303      	orrs	r3, r0
 8011a86:	bf08      	it	eq
 8011a88:	2322      	moveq	r3, #34	; 0x22
 8011a8a:	4682      	mov	sl, r0
 8011a8c:	468b      	mov	fp, r1
 8011a8e:	bf08      	it	eq
 8011a90:	6023      	streq	r3, [r4, #0]
 8011a92:	e62b      	b.n	80116ec <_strtod_l+0x4ac>
 8011a94:	f04f 32ff 	mov.w	r2, #4294967295
 8011a98:	fa02 f303 	lsl.w	r3, r2, r3
 8011a9c:	ea03 0a0a 	and.w	sl, r3, sl
 8011aa0:	e6de      	b.n	8011860 <_strtod_l+0x620>
 8011aa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011aa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011aaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011aae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011ab2:	fa01 f308 	lsl.w	r3, r1, r8
 8011ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8011ab8:	9111      	str	r1, [sp, #68]	; 0x44
 8011aba:	e741      	b.n	8011940 <_strtod_l+0x700>
 8011abc:	2300      	movs	r3, #0
 8011abe:	930c      	str	r3, [sp, #48]	; 0x30
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	9311      	str	r3, [sp, #68]	; 0x44
 8011ac4:	e73c      	b.n	8011940 <_strtod_l+0x700>
 8011ac6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011ac8:	4642      	mov	r2, r8
 8011aca:	4620      	mov	r0, r4
 8011acc:	f001 fee4 	bl	8013898 <__lshift>
 8011ad0:	901e      	str	r0, [sp, #120]	; 0x78
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	f47f af66 	bne.w	80119a4 <_strtod_l+0x764>
 8011ad8:	e5fe      	b.n	80116d8 <_strtod_l+0x498>
 8011ada:	465f      	mov	r7, fp
 8011adc:	d16e      	bne.n	8011bbc <_strtod_l+0x97c>
 8011ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ae0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ae4:	b342      	cbz	r2, 8011b38 <_strtod_l+0x8f8>
 8011ae6:	4a32      	ldr	r2, [pc, #200]	; (8011bb0 <_strtod_l+0x970>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d128      	bne.n	8011b3e <_strtod_l+0x8fe>
 8011aec:	9b04      	ldr	r3, [sp, #16]
 8011aee:	4650      	mov	r0, sl
 8011af0:	b1eb      	cbz	r3, 8011b2e <_strtod_l+0x8ee>
 8011af2:	4a2d      	ldr	r2, [pc, #180]	; (8011ba8 <_strtod_l+0x968>)
 8011af4:	403a      	ands	r2, r7
 8011af6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011afa:	f04f 31ff 	mov.w	r1, #4294967295
 8011afe:	d819      	bhi.n	8011b34 <_strtod_l+0x8f4>
 8011b00:	0d12      	lsrs	r2, r2, #20
 8011b02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011b06:	fa01 f303 	lsl.w	r3, r1, r3
 8011b0a:	4298      	cmp	r0, r3
 8011b0c:	d117      	bne.n	8011b3e <_strtod_l+0x8fe>
 8011b0e:	4b29      	ldr	r3, [pc, #164]	; (8011bb4 <_strtod_l+0x974>)
 8011b10:	429f      	cmp	r7, r3
 8011b12:	d102      	bne.n	8011b1a <_strtod_l+0x8da>
 8011b14:	3001      	adds	r0, #1
 8011b16:	f43f addf 	beq.w	80116d8 <_strtod_l+0x498>
 8011b1a:	4b23      	ldr	r3, [pc, #140]	; (8011ba8 <_strtod_l+0x968>)
 8011b1c:	403b      	ands	r3, r7
 8011b1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011b22:	f04f 0a00 	mov.w	sl, #0
 8011b26:	9b04      	ldr	r3, [sp, #16]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d1a0      	bne.n	8011a6e <_strtod_l+0x82e>
 8011b2c:	e5de      	b.n	80116ec <_strtod_l+0x4ac>
 8011b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b32:	e7ea      	b.n	8011b0a <_strtod_l+0x8ca>
 8011b34:	460b      	mov	r3, r1
 8011b36:	e7e8      	b.n	8011b0a <_strtod_l+0x8ca>
 8011b38:	ea53 030a 	orrs.w	r3, r3, sl
 8011b3c:	d088      	beq.n	8011a50 <_strtod_l+0x810>
 8011b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b40:	b1db      	cbz	r3, 8011b7a <_strtod_l+0x93a>
 8011b42:	423b      	tst	r3, r7
 8011b44:	d0ef      	beq.n	8011b26 <_strtod_l+0x8e6>
 8011b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b48:	9a04      	ldr	r2, [sp, #16]
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	4659      	mov	r1, fp
 8011b4e:	b1c3      	cbz	r3, 8011b82 <_strtod_l+0x942>
 8011b50:	f7ff fb58 	bl	8011204 <sulp>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b5c:	f7ee fb9e 	bl	800029c <__adddf3>
 8011b60:	4682      	mov	sl, r0
 8011b62:	468b      	mov	fp, r1
 8011b64:	e7df      	b.n	8011b26 <_strtod_l+0x8e6>
 8011b66:	4013      	ands	r3, r2
 8011b68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011b6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b74:	f04f 3aff 	mov.w	sl, #4294967295
 8011b78:	e7d5      	b.n	8011b26 <_strtod_l+0x8e6>
 8011b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b7c:	ea13 0f0a 	tst.w	r3, sl
 8011b80:	e7e0      	b.n	8011b44 <_strtod_l+0x904>
 8011b82:	f7ff fb3f 	bl	8011204 <sulp>
 8011b86:	4602      	mov	r2, r0
 8011b88:	460b      	mov	r3, r1
 8011b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b8e:	f7ee fb83 	bl	8000298 <__aeabi_dsub>
 8011b92:	2200      	movs	r2, #0
 8011b94:	2300      	movs	r3, #0
 8011b96:	4682      	mov	sl, r0
 8011b98:	468b      	mov	fp, r1
 8011b9a:	f7ee ff9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d0c1      	beq.n	8011b26 <_strtod_l+0x8e6>
 8011ba2:	e60e      	b.n	80117c2 <_strtod_l+0x582>
 8011ba4:	fffffc02 	.word	0xfffffc02
 8011ba8:	7ff00000 	.word	0x7ff00000
 8011bac:	39500000 	.word	0x39500000
 8011bb0:	000fffff 	.word	0x000fffff
 8011bb4:	7fefffff 	.word	0x7fefffff
 8011bb8:	08017348 	.word	0x08017348
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f002 f852 	bl	8013c68 <__ratio>
 8011bc4:	ec59 8b10 	vmov	r8, r9, d0
 8011bc8:	ee10 0a10 	vmov	r0, s0
 8011bcc:	2200      	movs	r2, #0
 8011bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011bd2:	4649      	mov	r1, r9
 8011bd4:	f7ee ff94 	bl	8000b00 <__aeabi_dcmple>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d07c      	beq.n	8011cd6 <_strtod_l+0xa96>
 8011bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d04c      	beq.n	8011c7c <_strtod_l+0xa3c>
 8011be2:	4b95      	ldr	r3, [pc, #596]	; (8011e38 <_strtod_l+0xbf8>)
 8011be4:	2200      	movs	r2, #0
 8011be6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011bea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011e38 <_strtod_l+0xbf8>
 8011bee:	f04f 0800 	mov.w	r8, #0
 8011bf2:	4b92      	ldr	r3, [pc, #584]	; (8011e3c <_strtod_l+0xbfc>)
 8011bf4:	403b      	ands	r3, r7
 8011bf6:	9311      	str	r3, [sp, #68]	; 0x44
 8011bf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bfa:	4b91      	ldr	r3, [pc, #580]	; (8011e40 <_strtod_l+0xc00>)
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	f040 80b2 	bne.w	8011d66 <_strtod_l+0xb26>
 8011c02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011c0e:	ec4b ab10 	vmov	d0, sl, fp
 8011c12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011c16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011c1a:	f001 ff4d 	bl	8013ab8 <__ulp>
 8011c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c22:	ec53 2b10 	vmov	r2, r3, d0
 8011c26:	f7ee fcef 	bl	8000608 <__aeabi_dmul>
 8011c2a:	4652      	mov	r2, sl
 8011c2c:	465b      	mov	r3, fp
 8011c2e:	f7ee fb35 	bl	800029c <__adddf3>
 8011c32:	460b      	mov	r3, r1
 8011c34:	4981      	ldr	r1, [pc, #516]	; (8011e3c <_strtod_l+0xbfc>)
 8011c36:	4a83      	ldr	r2, [pc, #524]	; (8011e44 <_strtod_l+0xc04>)
 8011c38:	4019      	ands	r1, r3
 8011c3a:	4291      	cmp	r1, r2
 8011c3c:	4682      	mov	sl, r0
 8011c3e:	d95e      	bls.n	8011cfe <_strtod_l+0xabe>
 8011c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d103      	bne.n	8011c52 <_strtod_l+0xa12>
 8011c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	f43f ad43 	beq.w	80116d8 <_strtod_l+0x498>
 8011c52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011e50 <_strtod_l+0xc10>
 8011c56:	f04f 3aff 	mov.w	sl, #4294967295
 8011c5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	f001 fbff 	bl	8013460 <_Bfree>
 8011c62:	9907      	ldr	r1, [sp, #28]
 8011c64:	4620      	mov	r0, r4
 8011c66:	f001 fbfb 	bl	8013460 <_Bfree>
 8011c6a:	4631      	mov	r1, r6
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f001 fbf7 	bl	8013460 <_Bfree>
 8011c72:	4629      	mov	r1, r5
 8011c74:	4620      	mov	r0, r4
 8011c76:	f001 fbf3 	bl	8013460 <_Bfree>
 8011c7a:	e613      	b.n	80118a4 <_strtod_l+0x664>
 8011c7c:	f1ba 0f00 	cmp.w	sl, #0
 8011c80:	d11b      	bne.n	8011cba <_strtod_l+0xa7a>
 8011c82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c86:	b9f3      	cbnz	r3, 8011cc6 <_strtod_l+0xa86>
 8011c88:	4b6b      	ldr	r3, [pc, #428]	; (8011e38 <_strtod_l+0xbf8>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	4640      	mov	r0, r8
 8011c8e:	4649      	mov	r1, r9
 8011c90:	f7ee ff2c 	bl	8000aec <__aeabi_dcmplt>
 8011c94:	b9d0      	cbnz	r0, 8011ccc <_strtod_l+0xa8c>
 8011c96:	4640      	mov	r0, r8
 8011c98:	4649      	mov	r1, r9
 8011c9a:	4b6b      	ldr	r3, [pc, #428]	; (8011e48 <_strtod_l+0xc08>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f7ee fcb3 	bl	8000608 <__aeabi_dmul>
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	4689      	mov	r9, r1
 8011ca6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011caa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8011cb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011cb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011cb8:	e79b      	b.n	8011bf2 <_strtod_l+0x9b2>
 8011cba:	f1ba 0f01 	cmp.w	sl, #1
 8011cbe:	d102      	bne.n	8011cc6 <_strtod_l+0xa86>
 8011cc0:	2f00      	cmp	r7, #0
 8011cc2:	f43f ad7e 	beq.w	80117c2 <_strtod_l+0x582>
 8011cc6:	4b61      	ldr	r3, [pc, #388]	; (8011e4c <_strtod_l+0xc0c>)
 8011cc8:	2200      	movs	r2, #0
 8011cca:	e78c      	b.n	8011be6 <_strtod_l+0x9a6>
 8011ccc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011e48 <_strtod_l+0xc08>
 8011cd0:	f04f 0800 	mov.w	r8, #0
 8011cd4:	e7e7      	b.n	8011ca6 <_strtod_l+0xa66>
 8011cd6:	4b5c      	ldr	r3, [pc, #368]	; (8011e48 <_strtod_l+0xc08>)
 8011cd8:	4640      	mov	r0, r8
 8011cda:	4649      	mov	r1, r9
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f7ee fc93 	bl	8000608 <__aeabi_dmul>
 8011ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ce4:	4680      	mov	r8, r0
 8011ce6:	4689      	mov	r9, r1
 8011ce8:	b933      	cbnz	r3, 8011cf8 <_strtod_l+0xab8>
 8011cea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cee:	9012      	str	r0, [sp, #72]	; 0x48
 8011cf0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011cf2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011cf6:	e7dd      	b.n	8011cb4 <_strtod_l+0xa74>
 8011cf8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011cfc:	e7f9      	b.n	8011cf2 <_strtod_l+0xab2>
 8011cfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011d02:	9b04      	ldr	r3, [sp, #16]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1a8      	bne.n	8011c5a <_strtod_l+0xa1a>
 8011d08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011d0e:	0d1b      	lsrs	r3, r3, #20
 8011d10:	051b      	lsls	r3, r3, #20
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d1a1      	bne.n	8011c5a <_strtod_l+0xa1a>
 8011d16:	4640      	mov	r0, r8
 8011d18:	4649      	mov	r1, r9
 8011d1a:	f7ee ffd5 	bl	8000cc8 <__aeabi_d2lz>
 8011d1e:	f7ee fc45 	bl	80005ac <__aeabi_l2d>
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4640      	mov	r0, r8
 8011d28:	4649      	mov	r1, r9
 8011d2a:	f7ee fab5 	bl	8000298 <__aeabi_dsub>
 8011d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d34:	ea43 030a 	orr.w	r3, r3, sl
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	4680      	mov	r8, r0
 8011d3c:	4689      	mov	r9, r1
 8011d3e:	d053      	beq.n	8011de8 <_strtod_l+0xba8>
 8011d40:	a335      	add	r3, pc, #212	; (adr r3, 8011e18 <_strtod_l+0xbd8>)
 8011d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d46:	f7ee fed1 	bl	8000aec <__aeabi_dcmplt>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f47f acce 	bne.w	80116ec <_strtod_l+0x4ac>
 8011d50:	a333      	add	r3, pc, #204	; (adr r3, 8011e20 <_strtod_l+0xbe0>)
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	4640      	mov	r0, r8
 8011d58:	4649      	mov	r1, r9
 8011d5a:	f7ee fee5 	bl	8000b28 <__aeabi_dcmpgt>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	f43f af7b 	beq.w	8011c5a <_strtod_l+0xa1a>
 8011d64:	e4c2      	b.n	80116ec <_strtod_l+0x4ac>
 8011d66:	9b04      	ldr	r3, [sp, #16]
 8011d68:	b333      	cbz	r3, 8011db8 <_strtod_l+0xb78>
 8011d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011d70:	d822      	bhi.n	8011db8 <_strtod_l+0xb78>
 8011d72:	a32d      	add	r3, pc, #180	; (adr r3, 8011e28 <_strtod_l+0xbe8>)
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	4640      	mov	r0, r8
 8011d7a:	4649      	mov	r1, r9
 8011d7c:	f7ee fec0 	bl	8000b00 <__aeabi_dcmple>
 8011d80:	b1a0      	cbz	r0, 8011dac <_strtod_l+0xb6c>
 8011d82:	4649      	mov	r1, r9
 8011d84:	4640      	mov	r0, r8
 8011d86:	f7ee ff17 	bl	8000bb8 <__aeabi_d2uiz>
 8011d8a:	2801      	cmp	r0, #1
 8011d8c:	bf38      	it	cc
 8011d8e:	2001      	movcc	r0, #1
 8011d90:	f7ee fbc0 	bl	8000514 <__aeabi_ui2d>
 8011d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d96:	4680      	mov	r8, r0
 8011d98:	4689      	mov	r9, r1
 8011d9a:	bb13      	cbnz	r3, 8011de2 <_strtod_l+0xba2>
 8011d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011da0:	9014      	str	r0, [sp, #80]	; 0x50
 8011da2:	9315      	str	r3, [sp, #84]	; 0x54
 8011da4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011da8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011db0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011db4:	1a9b      	subs	r3, r3, r2
 8011db6:	930d      	str	r3, [sp, #52]	; 0x34
 8011db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011dbc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011dc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011dc4:	f001 fe78 	bl	8013ab8 <__ulp>
 8011dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011dcc:	ec53 2b10 	vmov	r2, r3, d0
 8011dd0:	f7ee fc1a 	bl	8000608 <__aeabi_dmul>
 8011dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011dd8:	f7ee fa60 	bl	800029c <__adddf3>
 8011ddc:	4682      	mov	sl, r0
 8011dde:	468b      	mov	fp, r1
 8011de0:	e78f      	b.n	8011d02 <_strtod_l+0xac2>
 8011de2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011de6:	e7dd      	b.n	8011da4 <_strtod_l+0xb64>
 8011de8:	a311      	add	r3, pc, #68	; (adr r3, 8011e30 <_strtod_l+0xbf0>)
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	f7ee fe7d 	bl	8000aec <__aeabi_dcmplt>
 8011df2:	e7b4      	b.n	8011d5e <_strtod_l+0xb1e>
 8011df4:	2300      	movs	r3, #0
 8011df6:	930e      	str	r3, [sp, #56]	; 0x38
 8011df8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011dfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	f7ff ba65 	b.w	80112cc <_strtod_l+0x8c>
 8011e02:	2b65      	cmp	r3, #101	; 0x65
 8011e04:	f43f ab5d 	beq.w	80114c2 <_strtod_l+0x282>
 8011e08:	2b45      	cmp	r3, #69	; 0x45
 8011e0a:	f43f ab5a 	beq.w	80114c2 <_strtod_l+0x282>
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f7ff bb92 	b.w	8011538 <_strtod_l+0x2f8>
 8011e14:	f3af 8000 	nop.w
 8011e18:	94a03595 	.word	0x94a03595
 8011e1c:	3fdfffff 	.word	0x3fdfffff
 8011e20:	35afe535 	.word	0x35afe535
 8011e24:	3fe00000 	.word	0x3fe00000
 8011e28:	ffc00000 	.word	0xffc00000
 8011e2c:	41dfffff 	.word	0x41dfffff
 8011e30:	94a03595 	.word	0x94a03595
 8011e34:	3fcfffff 	.word	0x3fcfffff
 8011e38:	3ff00000 	.word	0x3ff00000
 8011e3c:	7ff00000 	.word	0x7ff00000
 8011e40:	7fe00000 	.word	0x7fe00000
 8011e44:	7c9fffff 	.word	0x7c9fffff
 8011e48:	3fe00000 	.word	0x3fe00000
 8011e4c:	bff00000 	.word	0xbff00000
 8011e50:	7fefffff 	.word	0x7fefffff

08011e54 <_strtod_r>:
 8011e54:	4b01      	ldr	r3, [pc, #4]	; (8011e5c <_strtod_r+0x8>)
 8011e56:	f7ff b9f3 	b.w	8011240 <_strtod_l>
 8011e5a:	bf00      	nop
 8011e5c:	200000b8 	.word	0x200000b8

08011e60 <_strtol_l.isra.0>:
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e66:	d001      	beq.n	8011e6c <_strtol_l.isra.0+0xc>
 8011e68:	2b24      	cmp	r3, #36	; 0x24
 8011e6a:	d906      	bls.n	8011e7a <_strtol_l.isra.0+0x1a>
 8011e6c:	f7fe fa2e 	bl	80102cc <__errno>
 8011e70:	2316      	movs	r3, #22
 8011e72:	6003      	str	r3, [r0, #0]
 8011e74:	2000      	movs	r0, #0
 8011e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e7a:	4f3a      	ldr	r7, [pc, #232]	; (8011f64 <_strtol_l.isra.0+0x104>)
 8011e7c:	468e      	mov	lr, r1
 8011e7e:	4676      	mov	r6, lr
 8011e80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011e84:	5de5      	ldrb	r5, [r4, r7]
 8011e86:	f015 0508 	ands.w	r5, r5, #8
 8011e8a:	d1f8      	bne.n	8011e7e <_strtol_l.isra.0+0x1e>
 8011e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8011e8e:	d134      	bne.n	8011efa <_strtol_l.isra.0+0x9a>
 8011e90:	f89e 4000 	ldrb.w	r4, [lr]
 8011e94:	f04f 0801 	mov.w	r8, #1
 8011e98:	f106 0e02 	add.w	lr, r6, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d05c      	beq.n	8011f5a <_strtol_l.isra.0+0xfa>
 8011ea0:	2b10      	cmp	r3, #16
 8011ea2:	d10c      	bne.n	8011ebe <_strtol_l.isra.0+0x5e>
 8011ea4:	2c30      	cmp	r4, #48	; 0x30
 8011ea6:	d10a      	bne.n	8011ebe <_strtol_l.isra.0+0x5e>
 8011ea8:	f89e 4000 	ldrb.w	r4, [lr]
 8011eac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011eb0:	2c58      	cmp	r4, #88	; 0x58
 8011eb2:	d14d      	bne.n	8011f50 <_strtol_l.isra.0+0xf0>
 8011eb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011eb8:	2310      	movs	r3, #16
 8011eba:	f10e 0e02 	add.w	lr, lr, #2
 8011ebe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011ec2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011ec6:	2600      	movs	r6, #0
 8011ec8:	fbbc f9f3 	udiv	r9, ip, r3
 8011ecc:	4635      	mov	r5, r6
 8011ece:	fb03 ca19 	mls	sl, r3, r9, ip
 8011ed2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011ed6:	2f09      	cmp	r7, #9
 8011ed8:	d818      	bhi.n	8011f0c <_strtol_l.isra.0+0xac>
 8011eda:	463c      	mov	r4, r7
 8011edc:	42a3      	cmp	r3, r4
 8011ede:	dd24      	ble.n	8011f2a <_strtol_l.isra.0+0xca>
 8011ee0:	2e00      	cmp	r6, #0
 8011ee2:	db1f      	blt.n	8011f24 <_strtol_l.isra.0+0xc4>
 8011ee4:	45a9      	cmp	r9, r5
 8011ee6:	d31d      	bcc.n	8011f24 <_strtol_l.isra.0+0xc4>
 8011ee8:	d101      	bne.n	8011eee <_strtol_l.isra.0+0x8e>
 8011eea:	45a2      	cmp	sl, r4
 8011eec:	db1a      	blt.n	8011f24 <_strtol_l.isra.0+0xc4>
 8011eee:	fb05 4503 	mla	r5, r5, r3, r4
 8011ef2:	2601      	movs	r6, #1
 8011ef4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011ef8:	e7eb      	b.n	8011ed2 <_strtol_l.isra.0+0x72>
 8011efa:	2c2b      	cmp	r4, #43	; 0x2b
 8011efc:	bf08      	it	eq
 8011efe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011f02:	46a8      	mov	r8, r5
 8011f04:	bf08      	it	eq
 8011f06:	f106 0e02 	addeq.w	lr, r6, #2
 8011f0a:	e7c7      	b.n	8011e9c <_strtol_l.isra.0+0x3c>
 8011f0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011f10:	2f19      	cmp	r7, #25
 8011f12:	d801      	bhi.n	8011f18 <_strtol_l.isra.0+0xb8>
 8011f14:	3c37      	subs	r4, #55	; 0x37
 8011f16:	e7e1      	b.n	8011edc <_strtol_l.isra.0+0x7c>
 8011f18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011f1c:	2f19      	cmp	r7, #25
 8011f1e:	d804      	bhi.n	8011f2a <_strtol_l.isra.0+0xca>
 8011f20:	3c57      	subs	r4, #87	; 0x57
 8011f22:	e7db      	b.n	8011edc <_strtol_l.isra.0+0x7c>
 8011f24:	f04f 36ff 	mov.w	r6, #4294967295
 8011f28:	e7e4      	b.n	8011ef4 <_strtol_l.isra.0+0x94>
 8011f2a:	2e00      	cmp	r6, #0
 8011f2c:	da05      	bge.n	8011f3a <_strtol_l.isra.0+0xda>
 8011f2e:	2322      	movs	r3, #34	; 0x22
 8011f30:	6003      	str	r3, [r0, #0]
 8011f32:	4665      	mov	r5, ip
 8011f34:	b942      	cbnz	r2, 8011f48 <_strtol_l.isra.0+0xe8>
 8011f36:	4628      	mov	r0, r5
 8011f38:	e79d      	b.n	8011e76 <_strtol_l.isra.0+0x16>
 8011f3a:	f1b8 0f00 	cmp.w	r8, #0
 8011f3e:	d000      	beq.n	8011f42 <_strtol_l.isra.0+0xe2>
 8011f40:	426d      	negs	r5, r5
 8011f42:	2a00      	cmp	r2, #0
 8011f44:	d0f7      	beq.n	8011f36 <_strtol_l.isra.0+0xd6>
 8011f46:	b10e      	cbz	r6, 8011f4c <_strtol_l.isra.0+0xec>
 8011f48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011f4c:	6011      	str	r1, [r2, #0]
 8011f4e:	e7f2      	b.n	8011f36 <_strtol_l.isra.0+0xd6>
 8011f50:	2430      	movs	r4, #48	; 0x30
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1b3      	bne.n	8011ebe <_strtol_l.isra.0+0x5e>
 8011f56:	2308      	movs	r3, #8
 8011f58:	e7b1      	b.n	8011ebe <_strtol_l.isra.0+0x5e>
 8011f5a:	2c30      	cmp	r4, #48	; 0x30
 8011f5c:	d0a4      	beq.n	8011ea8 <_strtol_l.isra.0+0x48>
 8011f5e:	230a      	movs	r3, #10
 8011f60:	e7ad      	b.n	8011ebe <_strtol_l.isra.0+0x5e>
 8011f62:	bf00      	nop
 8011f64:	08017371 	.word	0x08017371

08011f68 <_strtol_r>:
 8011f68:	f7ff bf7a 	b.w	8011e60 <_strtol_l.isra.0>

08011f6c <_write_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d07      	ldr	r5, [pc, #28]	; (8011f8c <_write_r+0x20>)
 8011f70:	4604      	mov	r4, r0
 8011f72:	4608      	mov	r0, r1
 8011f74:	4611      	mov	r1, r2
 8011f76:	2200      	movs	r2, #0
 8011f78:	602a      	str	r2, [r5, #0]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	f7f4 fdab 	bl	8006ad6 <_write>
 8011f80:	1c43      	adds	r3, r0, #1
 8011f82:	d102      	bne.n	8011f8a <_write_r+0x1e>
 8011f84:	682b      	ldr	r3, [r5, #0]
 8011f86:	b103      	cbz	r3, 8011f8a <_write_r+0x1e>
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	20005240 	.word	0x20005240

08011f90 <_close_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d06      	ldr	r5, [pc, #24]	; (8011fac <_close_r+0x1c>)
 8011f94:	2300      	movs	r3, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	602b      	str	r3, [r5, #0]
 8011f9c:	f7f4 fdb7 	bl	8006b0e <_close>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d102      	bne.n	8011faa <_close_r+0x1a>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	b103      	cbz	r3, 8011faa <_close_r+0x1a>
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	20005240 	.word	0x20005240

08011fb0 <quorem>:
 8011fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	6903      	ldr	r3, [r0, #16]
 8011fb6:	690c      	ldr	r4, [r1, #16]
 8011fb8:	42a3      	cmp	r3, r4
 8011fba:	4607      	mov	r7, r0
 8011fbc:	f2c0 8081 	blt.w	80120c2 <quorem+0x112>
 8011fc0:	3c01      	subs	r4, #1
 8011fc2:	f101 0814 	add.w	r8, r1, #20
 8011fc6:	f100 0514 	add.w	r5, r0, #20
 8011fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fce:	9301      	str	r3, [sp, #4]
 8011fd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fe8:	d331      	bcc.n	801204e <quorem+0x9e>
 8011fea:	f04f 0e00 	mov.w	lr, #0
 8011fee:	4640      	mov	r0, r8
 8011ff0:	46ac      	mov	ip, r5
 8011ff2:	46f2      	mov	sl, lr
 8011ff4:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ff8:	b293      	uxth	r3, r2
 8011ffa:	fb06 e303 	mla	r3, r6, r3, lr
 8011ffe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012002:	b29b      	uxth	r3, r3
 8012004:	ebaa 0303 	sub.w	r3, sl, r3
 8012008:	0c12      	lsrs	r2, r2, #16
 801200a:	f8dc a000 	ldr.w	sl, [ip]
 801200e:	fb06 e202 	mla	r2, r6, r2, lr
 8012012:	fa13 f38a 	uxtah	r3, r3, sl
 8012016:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801201a:	fa1f fa82 	uxth.w	sl, r2
 801201e:	f8dc 2000 	ldr.w	r2, [ip]
 8012022:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801202a:	b29b      	uxth	r3, r3
 801202c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012030:	4581      	cmp	r9, r0
 8012032:	f84c 3b04 	str.w	r3, [ip], #4
 8012036:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801203a:	d2db      	bcs.n	8011ff4 <quorem+0x44>
 801203c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012040:	b92b      	cbnz	r3, 801204e <quorem+0x9e>
 8012042:	9b01      	ldr	r3, [sp, #4]
 8012044:	3b04      	subs	r3, #4
 8012046:	429d      	cmp	r5, r3
 8012048:	461a      	mov	r2, r3
 801204a:	d32e      	bcc.n	80120aa <quorem+0xfa>
 801204c:	613c      	str	r4, [r7, #16]
 801204e:	4638      	mov	r0, r7
 8012050:	f001 fc8e 	bl	8013970 <__mcmp>
 8012054:	2800      	cmp	r0, #0
 8012056:	db24      	blt.n	80120a2 <quorem+0xf2>
 8012058:	3601      	adds	r6, #1
 801205a:	4628      	mov	r0, r5
 801205c:	f04f 0c00 	mov.w	ip, #0
 8012060:	f858 2b04 	ldr.w	r2, [r8], #4
 8012064:	f8d0 e000 	ldr.w	lr, [r0]
 8012068:	b293      	uxth	r3, r2
 801206a:	ebac 0303 	sub.w	r3, ip, r3
 801206e:	0c12      	lsrs	r2, r2, #16
 8012070:	fa13 f38e 	uxtah	r3, r3, lr
 8012074:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801207c:	b29b      	uxth	r3, r3
 801207e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012082:	45c1      	cmp	r9, r8
 8012084:	f840 3b04 	str.w	r3, [r0], #4
 8012088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801208c:	d2e8      	bcs.n	8012060 <quorem+0xb0>
 801208e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012096:	b922      	cbnz	r2, 80120a2 <quorem+0xf2>
 8012098:	3b04      	subs	r3, #4
 801209a:	429d      	cmp	r5, r3
 801209c:	461a      	mov	r2, r3
 801209e:	d30a      	bcc.n	80120b6 <quorem+0x106>
 80120a0:	613c      	str	r4, [r7, #16]
 80120a2:	4630      	mov	r0, r6
 80120a4:	b003      	add	sp, #12
 80120a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120aa:	6812      	ldr	r2, [r2, #0]
 80120ac:	3b04      	subs	r3, #4
 80120ae:	2a00      	cmp	r2, #0
 80120b0:	d1cc      	bne.n	801204c <quorem+0x9c>
 80120b2:	3c01      	subs	r4, #1
 80120b4:	e7c7      	b.n	8012046 <quorem+0x96>
 80120b6:	6812      	ldr	r2, [r2, #0]
 80120b8:	3b04      	subs	r3, #4
 80120ba:	2a00      	cmp	r2, #0
 80120bc:	d1f0      	bne.n	80120a0 <quorem+0xf0>
 80120be:	3c01      	subs	r4, #1
 80120c0:	e7eb      	b.n	801209a <quorem+0xea>
 80120c2:	2000      	movs	r0, #0
 80120c4:	e7ee      	b.n	80120a4 <quorem+0xf4>
	...

080120c8 <_dtoa_r>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	ed2d 8b02 	vpush	{d8}
 80120d0:	ec57 6b10 	vmov	r6, r7, d0
 80120d4:	b095      	sub	sp, #84	; 0x54
 80120d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80120d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80120dc:	9105      	str	r1, [sp, #20]
 80120de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80120e2:	4604      	mov	r4, r0
 80120e4:	9209      	str	r2, [sp, #36]	; 0x24
 80120e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80120e8:	b975      	cbnz	r5, 8012108 <_dtoa_r+0x40>
 80120ea:	2010      	movs	r0, #16
 80120ec:	f001 f95e 	bl	80133ac <malloc>
 80120f0:	4602      	mov	r2, r0
 80120f2:	6260      	str	r0, [r4, #36]	; 0x24
 80120f4:	b920      	cbnz	r0, 8012100 <_dtoa_r+0x38>
 80120f6:	4bb2      	ldr	r3, [pc, #712]	; (80123c0 <_dtoa_r+0x2f8>)
 80120f8:	21ea      	movs	r1, #234	; 0xea
 80120fa:	48b2      	ldr	r0, [pc, #712]	; (80123c4 <_dtoa_r+0x2fc>)
 80120fc:	f002 fc9a 	bl	8014a34 <__assert_func>
 8012100:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012104:	6005      	str	r5, [r0, #0]
 8012106:	60c5      	str	r5, [r0, #12]
 8012108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801210a:	6819      	ldr	r1, [r3, #0]
 801210c:	b151      	cbz	r1, 8012124 <_dtoa_r+0x5c>
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	604a      	str	r2, [r1, #4]
 8012112:	2301      	movs	r3, #1
 8012114:	4093      	lsls	r3, r2
 8012116:	608b      	str	r3, [r1, #8]
 8012118:	4620      	mov	r0, r4
 801211a:	f001 f9a1 	bl	8013460 <_Bfree>
 801211e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012120:	2200      	movs	r2, #0
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	1e3b      	subs	r3, r7, #0
 8012126:	bfb9      	ittee	lt
 8012128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801212c:	9303      	strlt	r3, [sp, #12]
 801212e:	2300      	movge	r3, #0
 8012130:	f8c8 3000 	strge.w	r3, [r8]
 8012134:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012138:	4ba3      	ldr	r3, [pc, #652]	; (80123c8 <_dtoa_r+0x300>)
 801213a:	bfbc      	itt	lt
 801213c:	2201      	movlt	r2, #1
 801213e:	f8c8 2000 	strlt.w	r2, [r8]
 8012142:	ea33 0309 	bics.w	r3, r3, r9
 8012146:	d11b      	bne.n	8012180 <_dtoa_r+0xb8>
 8012148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801214a:	f242 730f 	movw	r3, #9999	; 0x270f
 801214e:	6013      	str	r3, [r2, #0]
 8012150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012154:	4333      	orrs	r3, r6
 8012156:	f000 857a 	beq.w	8012c4e <_dtoa_r+0xb86>
 801215a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801215c:	b963      	cbnz	r3, 8012178 <_dtoa_r+0xb0>
 801215e:	4b9b      	ldr	r3, [pc, #620]	; (80123cc <_dtoa_r+0x304>)
 8012160:	e024      	b.n	80121ac <_dtoa_r+0xe4>
 8012162:	4b9b      	ldr	r3, [pc, #620]	; (80123d0 <_dtoa_r+0x308>)
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	3308      	adds	r3, #8
 8012168:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801216a:	6013      	str	r3, [r2, #0]
 801216c:	9800      	ldr	r0, [sp, #0]
 801216e:	b015      	add	sp, #84	; 0x54
 8012170:	ecbd 8b02 	vpop	{d8}
 8012174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012178:	4b94      	ldr	r3, [pc, #592]	; (80123cc <_dtoa_r+0x304>)
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	3303      	adds	r3, #3
 801217e:	e7f3      	b.n	8012168 <_dtoa_r+0xa0>
 8012180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012184:	2200      	movs	r2, #0
 8012186:	ec51 0b17 	vmov	r0, r1, d7
 801218a:	2300      	movs	r3, #0
 801218c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012190:	f7ee fca2 	bl	8000ad8 <__aeabi_dcmpeq>
 8012194:	4680      	mov	r8, r0
 8012196:	b158      	cbz	r0, 80121b0 <_dtoa_r+0xe8>
 8012198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801219a:	2301      	movs	r3, #1
 801219c:	6013      	str	r3, [r2, #0]
 801219e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f000 8551 	beq.w	8012c48 <_dtoa_r+0xb80>
 80121a6:	488b      	ldr	r0, [pc, #556]	; (80123d4 <_dtoa_r+0x30c>)
 80121a8:	6018      	str	r0, [r3, #0]
 80121aa:	1e43      	subs	r3, r0, #1
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	e7dd      	b.n	801216c <_dtoa_r+0xa4>
 80121b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121b4:	aa12      	add	r2, sp, #72	; 0x48
 80121b6:	a913      	add	r1, sp, #76	; 0x4c
 80121b8:	4620      	mov	r0, r4
 80121ba:	f001 fcf9 	bl	8013bb0 <__d2b>
 80121be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121c2:	4683      	mov	fp, r0
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	d07c      	beq.n	80122c2 <_dtoa_r+0x1fa>
 80121c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80121ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80121d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80121da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80121de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80121e2:	4b7d      	ldr	r3, [pc, #500]	; (80123d8 <_dtoa_r+0x310>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	4630      	mov	r0, r6
 80121e8:	4639      	mov	r1, r7
 80121ea:	f7ee f855 	bl	8000298 <__aeabi_dsub>
 80121ee:	a36e      	add	r3, pc, #440	; (adr r3, 80123a8 <_dtoa_r+0x2e0>)
 80121f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f4:	f7ee fa08 	bl	8000608 <__aeabi_dmul>
 80121f8:	a36d      	add	r3, pc, #436	; (adr r3, 80123b0 <_dtoa_r+0x2e8>)
 80121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fe:	f7ee f84d 	bl	800029c <__adddf3>
 8012202:	4606      	mov	r6, r0
 8012204:	4628      	mov	r0, r5
 8012206:	460f      	mov	r7, r1
 8012208:	f7ee f994 	bl	8000534 <__aeabi_i2d>
 801220c:	a36a      	add	r3, pc, #424	; (adr r3, 80123b8 <_dtoa_r+0x2f0>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	f7ee f9f9 	bl	8000608 <__aeabi_dmul>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4630      	mov	r0, r6
 801221c:	4639      	mov	r1, r7
 801221e:	f7ee f83d 	bl	800029c <__adddf3>
 8012222:	4606      	mov	r6, r0
 8012224:	460f      	mov	r7, r1
 8012226:	f7ee fc9f 	bl	8000b68 <__aeabi_d2iz>
 801222a:	2200      	movs	r2, #0
 801222c:	4682      	mov	sl, r0
 801222e:	2300      	movs	r3, #0
 8012230:	4630      	mov	r0, r6
 8012232:	4639      	mov	r1, r7
 8012234:	f7ee fc5a 	bl	8000aec <__aeabi_dcmplt>
 8012238:	b148      	cbz	r0, 801224e <_dtoa_r+0x186>
 801223a:	4650      	mov	r0, sl
 801223c:	f7ee f97a 	bl	8000534 <__aeabi_i2d>
 8012240:	4632      	mov	r2, r6
 8012242:	463b      	mov	r3, r7
 8012244:	f7ee fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8012248:	b908      	cbnz	r0, 801224e <_dtoa_r+0x186>
 801224a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801224e:	f1ba 0f16 	cmp.w	sl, #22
 8012252:	d854      	bhi.n	80122fe <_dtoa_r+0x236>
 8012254:	4b61      	ldr	r3, [pc, #388]	; (80123dc <_dtoa_r+0x314>)
 8012256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012262:	f7ee fc43 	bl	8000aec <__aeabi_dcmplt>
 8012266:	2800      	cmp	r0, #0
 8012268:	d04b      	beq.n	8012302 <_dtoa_r+0x23a>
 801226a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801226e:	2300      	movs	r3, #0
 8012270:	930e      	str	r3, [sp, #56]	; 0x38
 8012272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012274:	1b5d      	subs	r5, r3, r5
 8012276:	1e6b      	subs	r3, r5, #1
 8012278:	9304      	str	r3, [sp, #16]
 801227a:	bf43      	ittte	mi
 801227c:	2300      	movmi	r3, #0
 801227e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012282:	9304      	strmi	r3, [sp, #16]
 8012284:	f04f 0800 	movpl.w	r8, #0
 8012288:	f1ba 0f00 	cmp.w	sl, #0
 801228c:	db3b      	blt.n	8012306 <_dtoa_r+0x23e>
 801228e:	9b04      	ldr	r3, [sp, #16]
 8012290:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012294:	4453      	add	r3, sl
 8012296:	9304      	str	r3, [sp, #16]
 8012298:	2300      	movs	r3, #0
 801229a:	9306      	str	r3, [sp, #24]
 801229c:	9b05      	ldr	r3, [sp, #20]
 801229e:	2b09      	cmp	r3, #9
 80122a0:	d869      	bhi.n	8012376 <_dtoa_r+0x2ae>
 80122a2:	2b05      	cmp	r3, #5
 80122a4:	bfc4      	itt	gt
 80122a6:	3b04      	subgt	r3, #4
 80122a8:	9305      	strgt	r3, [sp, #20]
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	f1a3 0302 	sub.w	r3, r3, #2
 80122b0:	bfcc      	ite	gt
 80122b2:	2500      	movgt	r5, #0
 80122b4:	2501      	movle	r5, #1
 80122b6:	2b03      	cmp	r3, #3
 80122b8:	d869      	bhi.n	801238e <_dtoa_r+0x2c6>
 80122ba:	e8df f003 	tbb	[pc, r3]
 80122be:	4e2c      	.short	0x4e2c
 80122c0:	5a4c      	.short	0x5a4c
 80122c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80122c6:	441d      	add	r5, r3
 80122c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80122cc:	2b20      	cmp	r3, #32
 80122ce:	bfc1      	itttt	gt
 80122d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80122d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80122dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80122e0:	bfda      	itte	le
 80122e2:	f1c3 0320 	rsble	r3, r3, #32
 80122e6:	fa06 f003 	lslle.w	r0, r6, r3
 80122ea:	4318      	orrgt	r0, r3
 80122ec:	f7ee f912 	bl	8000514 <__aeabi_ui2d>
 80122f0:	2301      	movs	r3, #1
 80122f2:	4606      	mov	r6, r0
 80122f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80122f8:	3d01      	subs	r5, #1
 80122fa:	9310      	str	r3, [sp, #64]	; 0x40
 80122fc:	e771      	b.n	80121e2 <_dtoa_r+0x11a>
 80122fe:	2301      	movs	r3, #1
 8012300:	e7b6      	b.n	8012270 <_dtoa_r+0x1a8>
 8012302:	900e      	str	r0, [sp, #56]	; 0x38
 8012304:	e7b5      	b.n	8012272 <_dtoa_r+0x1aa>
 8012306:	f1ca 0300 	rsb	r3, sl, #0
 801230a:	9306      	str	r3, [sp, #24]
 801230c:	2300      	movs	r3, #0
 801230e:	eba8 080a 	sub.w	r8, r8, sl
 8012312:	930d      	str	r3, [sp, #52]	; 0x34
 8012314:	e7c2      	b.n	801229c <_dtoa_r+0x1d4>
 8012316:	2300      	movs	r3, #0
 8012318:	9308      	str	r3, [sp, #32]
 801231a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231c:	2b00      	cmp	r3, #0
 801231e:	dc39      	bgt.n	8012394 <_dtoa_r+0x2cc>
 8012320:	f04f 0901 	mov.w	r9, #1
 8012324:	f8cd 9004 	str.w	r9, [sp, #4]
 8012328:	464b      	mov	r3, r9
 801232a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801232e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012330:	2200      	movs	r2, #0
 8012332:	6042      	str	r2, [r0, #4]
 8012334:	2204      	movs	r2, #4
 8012336:	f102 0614 	add.w	r6, r2, #20
 801233a:	429e      	cmp	r6, r3
 801233c:	6841      	ldr	r1, [r0, #4]
 801233e:	d92f      	bls.n	80123a0 <_dtoa_r+0x2d8>
 8012340:	4620      	mov	r0, r4
 8012342:	f001 f84d 	bl	80133e0 <_Balloc>
 8012346:	9000      	str	r0, [sp, #0]
 8012348:	2800      	cmp	r0, #0
 801234a:	d14b      	bne.n	80123e4 <_dtoa_r+0x31c>
 801234c:	4b24      	ldr	r3, [pc, #144]	; (80123e0 <_dtoa_r+0x318>)
 801234e:	4602      	mov	r2, r0
 8012350:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012354:	e6d1      	b.n	80120fa <_dtoa_r+0x32>
 8012356:	2301      	movs	r3, #1
 8012358:	e7de      	b.n	8012318 <_dtoa_r+0x250>
 801235a:	2300      	movs	r3, #0
 801235c:	9308      	str	r3, [sp, #32]
 801235e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012360:	eb0a 0903 	add.w	r9, sl, r3
 8012364:	f109 0301 	add.w	r3, r9, #1
 8012368:	2b01      	cmp	r3, #1
 801236a:	9301      	str	r3, [sp, #4]
 801236c:	bfb8      	it	lt
 801236e:	2301      	movlt	r3, #1
 8012370:	e7dd      	b.n	801232e <_dtoa_r+0x266>
 8012372:	2301      	movs	r3, #1
 8012374:	e7f2      	b.n	801235c <_dtoa_r+0x294>
 8012376:	2501      	movs	r5, #1
 8012378:	2300      	movs	r3, #0
 801237a:	9305      	str	r3, [sp, #20]
 801237c:	9508      	str	r5, [sp, #32]
 801237e:	f04f 39ff 	mov.w	r9, #4294967295
 8012382:	2200      	movs	r2, #0
 8012384:	f8cd 9004 	str.w	r9, [sp, #4]
 8012388:	2312      	movs	r3, #18
 801238a:	9209      	str	r2, [sp, #36]	; 0x24
 801238c:	e7cf      	b.n	801232e <_dtoa_r+0x266>
 801238e:	2301      	movs	r3, #1
 8012390:	9308      	str	r3, [sp, #32]
 8012392:	e7f4      	b.n	801237e <_dtoa_r+0x2b6>
 8012394:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012398:	f8cd 9004 	str.w	r9, [sp, #4]
 801239c:	464b      	mov	r3, r9
 801239e:	e7c6      	b.n	801232e <_dtoa_r+0x266>
 80123a0:	3101      	adds	r1, #1
 80123a2:	6041      	str	r1, [r0, #4]
 80123a4:	0052      	lsls	r2, r2, #1
 80123a6:	e7c6      	b.n	8012336 <_dtoa_r+0x26e>
 80123a8:	636f4361 	.word	0x636f4361
 80123ac:	3fd287a7 	.word	0x3fd287a7
 80123b0:	8b60c8b3 	.word	0x8b60c8b3
 80123b4:	3fc68a28 	.word	0x3fc68a28
 80123b8:	509f79fb 	.word	0x509f79fb
 80123bc:	3fd34413 	.word	0x3fd34413
 80123c0:	0801747e 	.word	0x0801747e
 80123c4:	08017495 	.word	0x08017495
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	0801747a 	.word	0x0801747a
 80123d0:	08017471 	.word	0x08017471
 80123d4:	080176fa 	.word	0x080176fa
 80123d8:	3ff80000 	.word	0x3ff80000
 80123dc:	08017610 	.word	0x08017610
 80123e0:	080174f4 	.word	0x080174f4
 80123e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123e6:	9a00      	ldr	r2, [sp, #0]
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	2b0e      	cmp	r3, #14
 80123ee:	f200 80ad 	bhi.w	801254c <_dtoa_r+0x484>
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	f000 80aa 	beq.w	801254c <_dtoa_r+0x484>
 80123f8:	f1ba 0f00 	cmp.w	sl, #0
 80123fc:	dd36      	ble.n	801246c <_dtoa_r+0x3a4>
 80123fe:	4ac3      	ldr	r2, [pc, #780]	; (801270c <_dtoa_r+0x644>)
 8012400:	f00a 030f 	and.w	r3, sl, #15
 8012404:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012408:	ed93 7b00 	vldr	d7, [r3]
 801240c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012410:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012414:	eeb0 8a47 	vmov.f32	s16, s14
 8012418:	eef0 8a67 	vmov.f32	s17, s15
 801241c:	d016      	beq.n	801244c <_dtoa_r+0x384>
 801241e:	4bbc      	ldr	r3, [pc, #752]	; (8012710 <_dtoa_r+0x648>)
 8012420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012428:	f7ee fa18 	bl	800085c <__aeabi_ddiv>
 801242c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012430:	f007 070f 	and.w	r7, r7, #15
 8012434:	2503      	movs	r5, #3
 8012436:	4eb6      	ldr	r6, [pc, #728]	; (8012710 <_dtoa_r+0x648>)
 8012438:	b957      	cbnz	r7, 8012450 <_dtoa_r+0x388>
 801243a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801243e:	ec53 2b18 	vmov	r2, r3, d8
 8012442:	f7ee fa0b 	bl	800085c <__aeabi_ddiv>
 8012446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801244a:	e029      	b.n	80124a0 <_dtoa_r+0x3d8>
 801244c:	2502      	movs	r5, #2
 801244e:	e7f2      	b.n	8012436 <_dtoa_r+0x36e>
 8012450:	07f9      	lsls	r1, r7, #31
 8012452:	d508      	bpl.n	8012466 <_dtoa_r+0x39e>
 8012454:	ec51 0b18 	vmov	r0, r1, d8
 8012458:	e9d6 2300 	ldrd	r2, r3, [r6]
 801245c:	f7ee f8d4 	bl	8000608 <__aeabi_dmul>
 8012460:	ec41 0b18 	vmov	d8, r0, r1
 8012464:	3501      	adds	r5, #1
 8012466:	107f      	asrs	r7, r7, #1
 8012468:	3608      	adds	r6, #8
 801246a:	e7e5      	b.n	8012438 <_dtoa_r+0x370>
 801246c:	f000 80a6 	beq.w	80125bc <_dtoa_r+0x4f4>
 8012470:	f1ca 0600 	rsb	r6, sl, #0
 8012474:	4ba5      	ldr	r3, [pc, #660]	; (801270c <_dtoa_r+0x644>)
 8012476:	4fa6      	ldr	r7, [pc, #664]	; (8012710 <_dtoa_r+0x648>)
 8012478:	f006 020f 	and.w	r2, r6, #15
 801247c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012488:	f7ee f8be 	bl	8000608 <__aeabi_dmul>
 801248c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012490:	1136      	asrs	r6, r6, #4
 8012492:	2300      	movs	r3, #0
 8012494:	2502      	movs	r5, #2
 8012496:	2e00      	cmp	r6, #0
 8012498:	f040 8085 	bne.w	80125a6 <_dtoa_r+0x4de>
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1d2      	bne.n	8012446 <_dtoa_r+0x37e>
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f000 808c 	beq.w	80125c0 <_dtoa_r+0x4f8>
 80124a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124ac:	4b99      	ldr	r3, [pc, #612]	; (8012714 <_dtoa_r+0x64c>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	f7ee fb1a 	bl	8000aec <__aeabi_dcmplt>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	f000 8081 	beq.w	80125c0 <_dtoa_r+0x4f8>
 80124be:	9b01      	ldr	r3, [sp, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d07d      	beq.n	80125c0 <_dtoa_r+0x4f8>
 80124c4:	f1b9 0f00 	cmp.w	r9, #0
 80124c8:	dd3c      	ble.n	8012544 <_dtoa_r+0x47c>
 80124ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80124ce:	9307      	str	r3, [sp, #28]
 80124d0:	2200      	movs	r2, #0
 80124d2:	4b91      	ldr	r3, [pc, #580]	; (8012718 <_dtoa_r+0x650>)
 80124d4:	4630      	mov	r0, r6
 80124d6:	4639      	mov	r1, r7
 80124d8:	f7ee f896 	bl	8000608 <__aeabi_dmul>
 80124dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124e0:	3501      	adds	r5, #1
 80124e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80124e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7ee f822 	bl	8000534 <__aeabi_i2d>
 80124f0:	4632      	mov	r2, r6
 80124f2:	463b      	mov	r3, r7
 80124f4:	f7ee f888 	bl	8000608 <__aeabi_dmul>
 80124f8:	4b88      	ldr	r3, [pc, #544]	; (801271c <_dtoa_r+0x654>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	f7ed fece 	bl	800029c <__adddf3>
 8012500:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801250c:	2b00      	cmp	r3, #0
 801250e:	d15c      	bne.n	80125ca <_dtoa_r+0x502>
 8012510:	4b83      	ldr	r3, [pc, #524]	; (8012720 <_dtoa_r+0x658>)
 8012512:	2200      	movs	r2, #0
 8012514:	4630      	mov	r0, r6
 8012516:	4639      	mov	r1, r7
 8012518:	f7ed febe 	bl	8000298 <__aeabi_dsub>
 801251c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012520:	4606      	mov	r6, r0
 8012522:	460f      	mov	r7, r1
 8012524:	f7ee fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8012528:	2800      	cmp	r0, #0
 801252a:	f040 8296 	bne.w	8012a5a <_dtoa_r+0x992>
 801252e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012532:	4630      	mov	r0, r6
 8012534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012538:	4639      	mov	r1, r7
 801253a:	f7ee fad7 	bl	8000aec <__aeabi_dcmplt>
 801253e:	2800      	cmp	r0, #0
 8012540:	f040 8288 	bne.w	8012a54 <_dtoa_r+0x98c>
 8012544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801254c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801254e:	2b00      	cmp	r3, #0
 8012550:	f2c0 8158 	blt.w	8012804 <_dtoa_r+0x73c>
 8012554:	f1ba 0f0e 	cmp.w	sl, #14
 8012558:	f300 8154 	bgt.w	8012804 <_dtoa_r+0x73c>
 801255c:	4b6b      	ldr	r3, [pc, #428]	; (801270c <_dtoa_r+0x644>)
 801255e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012562:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012568:	2b00      	cmp	r3, #0
 801256a:	f280 80e3 	bge.w	8012734 <_dtoa_r+0x66c>
 801256e:	9b01      	ldr	r3, [sp, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	f300 80df 	bgt.w	8012734 <_dtoa_r+0x66c>
 8012576:	f040 826d 	bne.w	8012a54 <_dtoa_r+0x98c>
 801257a:	4b69      	ldr	r3, [pc, #420]	; (8012720 <_dtoa_r+0x658>)
 801257c:	2200      	movs	r2, #0
 801257e:	4640      	mov	r0, r8
 8012580:	4649      	mov	r1, r9
 8012582:	f7ee f841 	bl	8000608 <__aeabi_dmul>
 8012586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801258a:	f7ee fac3 	bl	8000b14 <__aeabi_dcmpge>
 801258e:	9e01      	ldr	r6, [sp, #4]
 8012590:	4637      	mov	r7, r6
 8012592:	2800      	cmp	r0, #0
 8012594:	f040 8243 	bne.w	8012a1e <_dtoa_r+0x956>
 8012598:	9d00      	ldr	r5, [sp, #0]
 801259a:	2331      	movs	r3, #49	; 0x31
 801259c:	f805 3b01 	strb.w	r3, [r5], #1
 80125a0:	f10a 0a01 	add.w	sl, sl, #1
 80125a4:	e23f      	b.n	8012a26 <_dtoa_r+0x95e>
 80125a6:	07f2      	lsls	r2, r6, #31
 80125a8:	d505      	bpl.n	80125b6 <_dtoa_r+0x4ee>
 80125aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125ae:	f7ee f82b 	bl	8000608 <__aeabi_dmul>
 80125b2:	3501      	adds	r5, #1
 80125b4:	2301      	movs	r3, #1
 80125b6:	1076      	asrs	r6, r6, #1
 80125b8:	3708      	adds	r7, #8
 80125ba:	e76c      	b.n	8012496 <_dtoa_r+0x3ce>
 80125bc:	2502      	movs	r5, #2
 80125be:	e76f      	b.n	80124a0 <_dtoa_r+0x3d8>
 80125c0:	9b01      	ldr	r3, [sp, #4]
 80125c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80125c6:	930c      	str	r3, [sp, #48]	; 0x30
 80125c8:	e78d      	b.n	80124e6 <_dtoa_r+0x41e>
 80125ca:	9900      	ldr	r1, [sp, #0]
 80125cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80125ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125d0:	4b4e      	ldr	r3, [pc, #312]	; (801270c <_dtoa_r+0x644>)
 80125d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125d6:	4401      	add	r1, r0
 80125d8:	9102      	str	r1, [sp, #8]
 80125da:	9908      	ldr	r1, [sp, #32]
 80125dc:	eeb0 8a47 	vmov.f32	s16, s14
 80125e0:	eef0 8a67 	vmov.f32	s17, s15
 80125e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125ec:	2900      	cmp	r1, #0
 80125ee:	d045      	beq.n	801267c <_dtoa_r+0x5b4>
 80125f0:	494c      	ldr	r1, [pc, #304]	; (8012724 <_dtoa_r+0x65c>)
 80125f2:	2000      	movs	r0, #0
 80125f4:	f7ee f932 	bl	800085c <__aeabi_ddiv>
 80125f8:	ec53 2b18 	vmov	r2, r3, d8
 80125fc:	f7ed fe4c 	bl	8000298 <__aeabi_dsub>
 8012600:	9d00      	ldr	r5, [sp, #0]
 8012602:	ec41 0b18 	vmov	d8, r0, r1
 8012606:	4639      	mov	r1, r7
 8012608:	4630      	mov	r0, r6
 801260a:	f7ee faad 	bl	8000b68 <__aeabi_d2iz>
 801260e:	900c      	str	r0, [sp, #48]	; 0x30
 8012610:	f7ed ff90 	bl	8000534 <__aeabi_i2d>
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	4630      	mov	r0, r6
 801261a:	4639      	mov	r1, r7
 801261c:	f7ed fe3c 	bl	8000298 <__aeabi_dsub>
 8012620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012622:	3330      	adds	r3, #48	; 0x30
 8012624:	f805 3b01 	strb.w	r3, [r5], #1
 8012628:	ec53 2b18 	vmov	r2, r3, d8
 801262c:	4606      	mov	r6, r0
 801262e:	460f      	mov	r7, r1
 8012630:	f7ee fa5c 	bl	8000aec <__aeabi_dcmplt>
 8012634:	2800      	cmp	r0, #0
 8012636:	d165      	bne.n	8012704 <_dtoa_r+0x63c>
 8012638:	4632      	mov	r2, r6
 801263a:	463b      	mov	r3, r7
 801263c:	4935      	ldr	r1, [pc, #212]	; (8012714 <_dtoa_r+0x64c>)
 801263e:	2000      	movs	r0, #0
 8012640:	f7ed fe2a 	bl	8000298 <__aeabi_dsub>
 8012644:	ec53 2b18 	vmov	r2, r3, d8
 8012648:	f7ee fa50 	bl	8000aec <__aeabi_dcmplt>
 801264c:	2800      	cmp	r0, #0
 801264e:	f040 80b9 	bne.w	80127c4 <_dtoa_r+0x6fc>
 8012652:	9b02      	ldr	r3, [sp, #8]
 8012654:	429d      	cmp	r5, r3
 8012656:	f43f af75 	beq.w	8012544 <_dtoa_r+0x47c>
 801265a:	4b2f      	ldr	r3, [pc, #188]	; (8012718 <_dtoa_r+0x650>)
 801265c:	ec51 0b18 	vmov	r0, r1, d8
 8012660:	2200      	movs	r2, #0
 8012662:	f7ed ffd1 	bl	8000608 <__aeabi_dmul>
 8012666:	4b2c      	ldr	r3, [pc, #176]	; (8012718 <_dtoa_r+0x650>)
 8012668:	ec41 0b18 	vmov	d8, r0, r1
 801266c:	2200      	movs	r2, #0
 801266e:	4630      	mov	r0, r6
 8012670:	4639      	mov	r1, r7
 8012672:	f7ed ffc9 	bl	8000608 <__aeabi_dmul>
 8012676:	4606      	mov	r6, r0
 8012678:	460f      	mov	r7, r1
 801267a:	e7c4      	b.n	8012606 <_dtoa_r+0x53e>
 801267c:	ec51 0b17 	vmov	r0, r1, d7
 8012680:	f7ed ffc2 	bl	8000608 <__aeabi_dmul>
 8012684:	9b02      	ldr	r3, [sp, #8]
 8012686:	9d00      	ldr	r5, [sp, #0]
 8012688:	930c      	str	r3, [sp, #48]	; 0x30
 801268a:	ec41 0b18 	vmov	d8, r0, r1
 801268e:	4639      	mov	r1, r7
 8012690:	4630      	mov	r0, r6
 8012692:	f7ee fa69 	bl	8000b68 <__aeabi_d2iz>
 8012696:	9011      	str	r0, [sp, #68]	; 0x44
 8012698:	f7ed ff4c 	bl	8000534 <__aeabi_i2d>
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	4630      	mov	r0, r6
 80126a2:	4639      	mov	r1, r7
 80126a4:	f7ed fdf8 	bl	8000298 <__aeabi_dsub>
 80126a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126aa:	3330      	adds	r3, #48	; 0x30
 80126ac:	f805 3b01 	strb.w	r3, [r5], #1
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	429d      	cmp	r5, r3
 80126b4:	4606      	mov	r6, r0
 80126b6:	460f      	mov	r7, r1
 80126b8:	f04f 0200 	mov.w	r2, #0
 80126bc:	d134      	bne.n	8012728 <_dtoa_r+0x660>
 80126be:	4b19      	ldr	r3, [pc, #100]	; (8012724 <_dtoa_r+0x65c>)
 80126c0:	ec51 0b18 	vmov	r0, r1, d8
 80126c4:	f7ed fdea 	bl	800029c <__adddf3>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4630      	mov	r0, r6
 80126ce:	4639      	mov	r1, r7
 80126d0:	f7ee fa2a 	bl	8000b28 <__aeabi_dcmpgt>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d175      	bne.n	80127c4 <_dtoa_r+0x6fc>
 80126d8:	ec53 2b18 	vmov	r2, r3, d8
 80126dc:	4911      	ldr	r1, [pc, #68]	; (8012724 <_dtoa_r+0x65c>)
 80126de:	2000      	movs	r0, #0
 80126e0:	f7ed fdda 	bl	8000298 <__aeabi_dsub>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	4630      	mov	r0, r6
 80126ea:	4639      	mov	r1, r7
 80126ec:	f7ee f9fe 	bl	8000aec <__aeabi_dcmplt>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	f43f af27 	beq.w	8012544 <_dtoa_r+0x47c>
 80126f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80126f8:	1e6b      	subs	r3, r5, #1
 80126fa:	930c      	str	r3, [sp, #48]	; 0x30
 80126fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012700:	2b30      	cmp	r3, #48	; 0x30
 8012702:	d0f8      	beq.n	80126f6 <_dtoa_r+0x62e>
 8012704:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012708:	e04a      	b.n	80127a0 <_dtoa_r+0x6d8>
 801270a:	bf00      	nop
 801270c:	08017610 	.word	0x08017610
 8012710:	080175e8 	.word	0x080175e8
 8012714:	3ff00000 	.word	0x3ff00000
 8012718:	40240000 	.word	0x40240000
 801271c:	401c0000 	.word	0x401c0000
 8012720:	40140000 	.word	0x40140000
 8012724:	3fe00000 	.word	0x3fe00000
 8012728:	4baf      	ldr	r3, [pc, #700]	; (80129e8 <_dtoa_r+0x920>)
 801272a:	f7ed ff6d 	bl	8000608 <__aeabi_dmul>
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	e7ac      	b.n	801268e <_dtoa_r+0x5c6>
 8012734:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012738:	9d00      	ldr	r5, [sp, #0]
 801273a:	4642      	mov	r2, r8
 801273c:	464b      	mov	r3, r9
 801273e:	4630      	mov	r0, r6
 8012740:	4639      	mov	r1, r7
 8012742:	f7ee f88b 	bl	800085c <__aeabi_ddiv>
 8012746:	f7ee fa0f 	bl	8000b68 <__aeabi_d2iz>
 801274a:	9002      	str	r0, [sp, #8]
 801274c:	f7ed fef2 	bl	8000534 <__aeabi_i2d>
 8012750:	4642      	mov	r2, r8
 8012752:	464b      	mov	r3, r9
 8012754:	f7ed ff58 	bl	8000608 <__aeabi_dmul>
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	4630      	mov	r0, r6
 801275e:	4639      	mov	r1, r7
 8012760:	f7ed fd9a 	bl	8000298 <__aeabi_dsub>
 8012764:	9e02      	ldr	r6, [sp, #8]
 8012766:	9f01      	ldr	r7, [sp, #4]
 8012768:	3630      	adds	r6, #48	; 0x30
 801276a:	f805 6b01 	strb.w	r6, [r5], #1
 801276e:	9e00      	ldr	r6, [sp, #0]
 8012770:	1bae      	subs	r6, r5, r6
 8012772:	42b7      	cmp	r7, r6
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	d137      	bne.n	80127ea <_dtoa_r+0x722>
 801277a:	f7ed fd8f 	bl	800029c <__adddf3>
 801277e:	4642      	mov	r2, r8
 8012780:	464b      	mov	r3, r9
 8012782:	4606      	mov	r6, r0
 8012784:	460f      	mov	r7, r1
 8012786:	f7ee f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 801278a:	b9c8      	cbnz	r0, 80127c0 <_dtoa_r+0x6f8>
 801278c:	4642      	mov	r2, r8
 801278e:	464b      	mov	r3, r9
 8012790:	4630      	mov	r0, r6
 8012792:	4639      	mov	r1, r7
 8012794:	f7ee f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012798:	b110      	cbz	r0, 80127a0 <_dtoa_r+0x6d8>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	07d9      	lsls	r1, r3, #31
 801279e:	d40f      	bmi.n	80127c0 <_dtoa_r+0x6f8>
 80127a0:	4620      	mov	r0, r4
 80127a2:	4659      	mov	r1, fp
 80127a4:	f000 fe5c 	bl	8013460 <_Bfree>
 80127a8:	2300      	movs	r3, #0
 80127aa:	702b      	strb	r3, [r5, #0]
 80127ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127ae:	f10a 0001 	add.w	r0, sl, #1
 80127b2:	6018      	str	r0, [r3, #0]
 80127b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f43f acd8 	beq.w	801216c <_dtoa_r+0xa4>
 80127bc:	601d      	str	r5, [r3, #0]
 80127be:	e4d5      	b.n	801216c <_dtoa_r+0xa4>
 80127c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80127c4:	462b      	mov	r3, r5
 80127c6:	461d      	mov	r5, r3
 80127c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127cc:	2a39      	cmp	r2, #57	; 0x39
 80127ce:	d108      	bne.n	80127e2 <_dtoa_r+0x71a>
 80127d0:	9a00      	ldr	r2, [sp, #0]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d1f7      	bne.n	80127c6 <_dtoa_r+0x6fe>
 80127d6:	9a07      	ldr	r2, [sp, #28]
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	3201      	adds	r2, #1
 80127dc:	9207      	str	r2, [sp, #28]
 80127de:	2230      	movs	r2, #48	; 0x30
 80127e0:	700a      	strb	r2, [r1, #0]
 80127e2:	781a      	ldrb	r2, [r3, #0]
 80127e4:	3201      	adds	r2, #1
 80127e6:	701a      	strb	r2, [r3, #0]
 80127e8:	e78c      	b.n	8012704 <_dtoa_r+0x63c>
 80127ea:	4b7f      	ldr	r3, [pc, #508]	; (80129e8 <_dtoa_r+0x920>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	f7ed ff0b 	bl	8000608 <__aeabi_dmul>
 80127f2:	2200      	movs	r2, #0
 80127f4:	2300      	movs	r3, #0
 80127f6:	4606      	mov	r6, r0
 80127f8:	460f      	mov	r7, r1
 80127fa:	f7ee f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d09b      	beq.n	801273a <_dtoa_r+0x672>
 8012802:	e7cd      	b.n	80127a0 <_dtoa_r+0x6d8>
 8012804:	9a08      	ldr	r2, [sp, #32]
 8012806:	2a00      	cmp	r2, #0
 8012808:	f000 80c4 	beq.w	8012994 <_dtoa_r+0x8cc>
 801280c:	9a05      	ldr	r2, [sp, #20]
 801280e:	2a01      	cmp	r2, #1
 8012810:	f300 80a8 	bgt.w	8012964 <_dtoa_r+0x89c>
 8012814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012816:	2a00      	cmp	r2, #0
 8012818:	f000 80a0 	beq.w	801295c <_dtoa_r+0x894>
 801281c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012820:	9e06      	ldr	r6, [sp, #24]
 8012822:	4645      	mov	r5, r8
 8012824:	9a04      	ldr	r2, [sp, #16]
 8012826:	2101      	movs	r1, #1
 8012828:	441a      	add	r2, r3
 801282a:	4620      	mov	r0, r4
 801282c:	4498      	add	r8, r3
 801282e:	9204      	str	r2, [sp, #16]
 8012830:	f000 ff1c 	bl	801366c <__i2b>
 8012834:	4607      	mov	r7, r0
 8012836:	2d00      	cmp	r5, #0
 8012838:	dd0b      	ble.n	8012852 <_dtoa_r+0x78a>
 801283a:	9b04      	ldr	r3, [sp, #16]
 801283c:	2b00      	cmp	r3, #0
 801283e:	dd08      	ble.n	8012852 <_dtoa_r+0x78a>
 8012840:	42ab      	cmp	r3, r5
 8012842:	9a04      	ldr	r2, [sp, #16]
 8012844:	bfa8      	it	ge
 8012846:	462b      	movge	r3, r5
 8012848:	eba8 0803 	sub.w	r8, r8, r3
 801284c:	1aed      	subs	r5, r5, r3
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	9304      	str	r3, [sp, #16]
 8012852:	9b06      	ldr	r3, [sp, #24]
 8012854:	b1fb      	cbz	r3, 8012896 <_dtoa_r+0x7ce>
 8012856:	9b08      	ldr	r3, [sp, #32]
 8012858:	2b00      	cmp	r3, #0
 801285a:	f000 809f 	beq.w	801299c <_dtoa_r+0x8d4>
 801285e:	2e00      	cmp	r6, #0
 8012860:	dd11      	ble.n	8012886 <_dtoa_r+0x7be>
 8012862:	4639      	mov	r1, r7
 8012864:	4632      	mov	r2, r6
 8012866:	4620      	mov	r0, r4
 8012868:	f000 ffbc 	bl	80137e4 <__pow5mult>
 801286c:	465a      	mov	r2, fp
 801286e:	4601      	mov	r1, r0
 8012870:	4607      	mov	r7, r0
 8012872:	4620      	mov	r0, r4
 8012874:	f000 ff10 	bl	8013698 <__multiply>
 8012878:	4659      	mov	r1, fp
 801287a:	9007      	str	r0, [sp, #28]
 801287c:	4620      	mov	r0, r4
 801287e:	f000 fdef 	bl	8013460 <_Bfree>
 8012882:	9b07      	ldr	r3, [sp, #28]
 8012884:	469b      	mov	fp, r3
 8012886:	9b06      	ldr	r3, [sp, #24]
 8012888:	1b9a      	subs	r2, r3, r6
 801288a:	d004      	beq.n	8012896 <_dtoa_r+0x7ce>
 801288c:	4659      	mov	r1, fp
 801288e:	4620      	mov	r0, r4
 8012890:	f000 ffa8 	bl	80137e4 <__pow5mult>
 8012894:	4683      	mov	fp, r0
 8012896:	2101      	movs	r1, #1
 8012898:	4620      	mov	r0, r4
 801289a:	f000 fee7 	bl	801366c <__i2b>
 801289e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	4606      	mov	r6, r0
 80128a4:	dd7c      	ble.n	80129a0 <_dtoa_r+0x8d8>
 80128a6:	461a      	mov	r2, r3
 80128a8:	4601      	mov	r1, r0
 80128aa:	4620      	mov	r0, r4
 80128ac:	f000 ff9a 	bl	80137e4 <__pow5mult>
 80128b0:	9b05      	ldr	r3, [sp, #20]
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	4606      	mov	r6, r0
 80128b6:	dd76      	ble.n	80129a6 <_dtoa_r+0x8de>
 80128b8:	2300      	movs	r3, #0
 80128ba:	9306      	str	r3, [sp, #24]
 80128bc:	6933      	ldr	r3, [r6, #16]
 80128be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80128c2:	6918      	ldr	r0, [r3, #16]
 80128c4:	f000 fe82 	bl	80135cc <__hi0bits>
 80128c8:	f1c0 0020 	rsb	r0, r0, #32
 80128cc:	9b04      	ldr	r3, [sp, #16]
 80128ce:	4418      	add	r0, r3
 80128d0:	f010 001f 	ands.w	r0, r0, #31
 80128d4:	f000 8086 	beq.w	80129e4 <_dtoa_r+0x91c>
 80128d8:	f1c0 0320 	rsb	r3, r0, #32
 80128dc:	2b04      	cmp	r3, #4
 80128de:	dd7f      	ble.n	80129e0 <_dtoa_r+0x918>
 80128e0:	f1c0 001c 	rsb	r0, r0, #28
 80128e4:	9b04      	ldr	r3, [sp, #16]
 80128e6:	4403      	add	r3, r0
 80128e8:	4480      	add	r8, r0
 80128ea:	4405      	add	r5, r0
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	f1b8 0f00 	cmp.w	r8, #0
 80128f2:	dd05      	ble.n	8012900 <_dtoa_r+0x838>
 80128f4:	4659      	mov	r1, fp
 80128f6:	4642      	mov	r2, r8
 80128f8:	4620      	mov	r0, r4
 80128fa:	f000 ffcd 	bl	8013898 <__lshift>
 80128fe:	4683      	mov	fp, r0
 8012900:	9b04      	ldr	r3, [sp, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	dd05      	ble.n	8012912 <_dtoa_r+0x84a>
 8012906:	4631      	mov	r1, r6
 8012908:	461a      	mov	r2, r3
 801290a:	4620      	mov	r0, r4
 801290c:	f000 ffc4 	bl	8013898 <__lshift>
 8012910:	4606      	mov	r6, r0
 8012912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012914:	2b00      	cmp	r3, #0
 8012916:	d069      	beq.n	80129ec <_dtoa_r+0x924>
 8012918:	4631      	mov	r1, r6
 801291a:	4658      	mov	r0, fp
 801291c:	f001 f828 	bl	8013970 <__mcmp>
 8012920:	2800      	cmp	r0, #0
 8012922:	da63      	bge.n	80129ec <_dtoa_r+0x924>
 8012924:	2300      	movs	r3, #0
 8012926:	4659      	mov	r1, fp
 8012928:	220a      	movs	r2, #10
 801292a:	4620      	mov	r0, r4
 801292c:	f000 fdba 	bl	80134a4 <__multadd>
 8012930:	9b08      	ldr	r3, [sp, #32]
 8012932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012936:	4683      	mov	fp, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	f000 818f 	beq.w	8012c5c <_dtoa_r+0xb94>
 801293e:	4639      	mov	r1, r7
 8012940:	2300      	movs	r3, #0
 8012942:	220a      	movs	r2, #10
 8012944:	4620      	mov	r0, r4
 8012946:	f000 fdad 	bl	80134a4 <__multadd>
 801294a:	f1b9 0f00 	cmp.w	r9, #0
 801294e:	4607      	mov	r7, r0
 8012950:	f300 808e 	bgt.w	8012a70 <_dtoa_r+0x9a8>
 8012954:	9b05      	ldr	r3, [sp, #20]
 8012956:	2b02      	cmp	r3, #2
 8012958:	dc50      	bgt.n	80129fc <_dtoa_r+0x934>
 801295a:	e089      	b.n	8012a70 <_dtoa_r+0x9a8>
 801295c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801295e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012962:	e75d      	b.n	8012820 <_dtoa_r+0x758>
 8012964:	9b01      	ldr	r3, [sp, #4]
 8012966:	1e5e      	subs	r6, r3, #1
 8012968:	9b06      	ldr	r3, [sp, #24]
 801296a:	42b3      	cmp	r3, r6
 801296c:	bfbf      	itttt	lt
 801296e:	9b06      	ldrlt	r3, [sp, #24]
 8012970:	9606      	strlt	r6, [sp, #24]
 8012972:	1af2      	sublt	r2, r6, r3
 8012974:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012976:	bfb6      	itet	lt
 8012978:	189b      	addlt	r3, r3, r2
 801297a:	1b9e      	subge	r6, r3, r6
 801297c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801297e:	9b01      	ldr	r3, [sp, #4]
 8012980:	bfb8      	it	lt
 8012982:	2600      	movlt	r6, #0
 8012984:	2b00      	cmp	r3, #0
 8012986:	bfb5      	itete	lt
 8012988:	eba8 0503 	sublt.w	r5, r8, r3
 801298c:	9b01      	ldrge	r3, [sp, #4]
 801298e:	2300      	movlt	r3, #0
 8012990:	4645      	movge	r5, r8
 8012992:	e747      	b.n	8012824 <_dtoa_r+0x75c>
 8012994:	9e06      	ldr	r6, [sp, #24]
 8012996:	9f08      	ldr	r7, [sp, #32]
 8012998:	4645      	mov	r5, r8
 801299a:	e74c      	b.n	8012836 <_dtoa_r+0x76e>
 801299c:	9a06      	ldr	r2, [sp, #24]
 801299e:	e775      	b.n	801288c <_dtoa_r+0x7c4>
 80129a0:	9b05      	ldr	r3, [sp, #20]
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	dc18      	bgt.n	80129d8 <_dtoa_r+0x910>
 80129a6:	9b02      	ldr	r3, [sp, #8]
 80129a8:	b9b3      	cbnz	r3, 80129d8 <_dtoa_r+0x910>
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129b0:	b9a3      	cbnz	r3, 80129dc <_dtoa_r+0x914>
 80129b2:	9b03      	ldr	r3, [sp, #12]
 80129b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129b8:	0d1b      	lsrs	r3, r3, #20
 80129ba:	051b      	lsls	r3, r3, #20
 80129bc:	b12b      	cbz	r3, 80129ca <_dtoa_r+0x902>
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	3301      	adds	r3, #1
 80129c2:	9304      	str	r3, [sp, #16]
 80129c4:	f108 0801 	add.w	r8, r8, #1
 80129c8:	2301      	movs	r3, #1
 80129ca:	9306      	str	r3, [sp, #24]
 80129cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f47f af74 	bne.w	80128bc <_dtoa_r+0x7f4>
 80129d4:	2001      	movs	r0, #1
 80129d6:	e779      	b.n	80128cc <_dtoa_r+0x804>
 80129d8:	2300      	movs	r3, #0
 80129da:	e7f6      	b.n	80129ca <_dtoa_r+0x902>
 80129dc:	9b02      	ldr	r3, [sp, #8]
 80129de:	e7f4      	b.n	80129ca <_dtoa_r+0x902>
 80129e0:	d085      	beq.n	80128ee <_dtoa_r+0x826>
 80129e2:	4618      	mov	r0, r3
 80129e4:	301c      	adds	r0, #28
 80129e6:	e77d      	b.n	80128e4 <_dtoa_r+0x81c>
 80129e8:	40240000 	.word	0x40240000
 80129ec:	9b01      	ldr	r3, [sp, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	dc38      	bgt.n	8012a64 <_dtoa_r+0x99c>
 80129f2:	9b05      	ldr	r3, [sp, #20]
 80129f4:	2b02      	cmp	r3, #2
 80129f6:	dd35      	ble.n	8012a64 <_dtoa_r+0x99c>
 80129f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80129fc:	f1b9 0f00 	cmp.w	r9, #0
 8012a00:	d10d      	bne.n	8012a1e <_dtoa_r+0x956>
 8012a02:	4631      	mov	r1, r6
 8012a04:	464b      	mov	r3, r9
 8012a06:	2205      	movs	r2, #5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 fd4b 	bl	80134a4 <__multadd>
 8012a0e:	4601      	mov	r1, r0
 8012a10:	4606      	mov	r6, r0
 8012a12:	4658      	mov	r0, fp
 8012a14:	f000 ffac 	bl	8013970 <__mcmp>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f73f adbd 	bgt.w	8012598 <_dtoa_r+0x4d0>
 8012a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a20:	9d00      	ldr	r5, [sp, #0]
 8012a22:	ea6f 0a03 	mvn.w	sl, r3
 8012a26:	f04f 0800 	mov.w	r8, #0
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f000 fd17 	bl	8013460 <_Bfree>
 8012a32:	2f00      	cmp	r7, #0
 8012a34:	f43f aeb4 	beq.w	80127a0 <_dtoa_r+0x6d8>
 8012a38:	f1b8 0f00 	cmp.w	r8, #0
 8012a3c:	d005      	beq.n	8012a4a <_dtoa_r+0x982>
 8012a3e:	45b8      	cmp	r8, r7
 8012a40:	d003      	beq.n	8012a4a <_dtoa_r+0x982>
 8012a42:	4641      	mov	r1, r8
 8012a44:	4620      	mov	r0, r4
 8012a46:	f000 fd0b 	bl	8013460 <_Bfree>
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f000 fd07 	bl	8013460 <_Bfree>
 8012a52:	e6a5      	b.n	80127a0 <_dtoa_r+0x6d8>
 8012a54:	2600      	movs	r6, #0
 8012a56:	4637      	mov	r7, r6
 8012a58:	e7e1      	b.n	8012a1e <_dtoa_r+0x956>
 8012a5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012a60:	4637      	mov	r7, r6
 8012a62:	e599      	b.n	8012598 <_dtoa_r+0x4d0>
 8012a64:	9b08      	ldr	r3, [sp, #32]
 8012a66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 80fd 	beq.w	8012c6a <_dtoa_r+0xba2>
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	dd05      	ble.n	8012a80 <_dtoa_r+0x9b8>
 8012a74:	4639      	mov	r1, r7
 8012a76:	462a      	mov	r2, r5
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f000 ff0d 	bl	8013898 <__lshift>
 8012a7e:	4607      	mov	r7, r0
 8012a80:	9b06      	ldr	r3, [sp, #24]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d05c      	beq.n	8012b40 <_dtoa_r+0xa78>
 8012a86:	6879      	ldr	r1, [r7, #4]
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f000 fca9 	bl	80133e0 <_Balloc>
 8012a8e:	4605      	mov	r5, r0
 8012a90:	b928      	cbnz	r0, 8012a9e <_dtoa_r+0x9d6>
 8012a92:	4b80      	ldr	r3, [pc, #512]	; (8012c94 <_dtoa_r+0xbcc>)
 8012a94:	4602      	mov	r2, r0
 8012a96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a9a:	f7ff bb2e 	b.w	80120fa <_dtoa_r+0x32>
 8012a9e:	693a      	ldr	r2, [r7, #16]
 8012aa0:	3202      	adds	r2, #2
 8012aa2:	0092      	lsls	r2, r2, #2
 8012aa4:	f107 010c 	add.w	r1, r7, #12
 8012aa8:	300c      	adds	r0, #12
 8012aaa:	f7fd fc39 	bl	8010320 <memcpy>
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 fef0 	bl	8013898 <__lshift>
 8012ab8:	9b00      	ldr	r3, [sp, #0]
 8012aba:	3301      	adds	r3, #1
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	9b00      	ldr	r3, [sp, #0]
 8012ac0:	444b      	add	r3, r9
 8012ac2:	9307      	str	r3, [sp, #28]
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	f003 0301 	and.w	r3, r3, #1
 8012aca:	46b8      	mov	r8, r7
 8012acc:	9306      	str	r3, [sp, #24]
 8012ace:	4607      	mov	r7, r0
 8012ad0:	9b01      	ldr	r3, [sp, #4]
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	4658      	mov	r0, fp
 8012ad8:	9302      	str	r3, [sp, #8]
 8012ada:	f7ff fa69 	bl	8011fb0 <quorem>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	3330      	adds	r3, #48	; 0x30
 8012ae2:	9004      	str	r0, [sp, #16]
 8012ae4:	4641      	mov	r1, r8
 8012ae6:	4658      	mov	r0, fp
 8012ae8:	9308      	str	r3, [sp, #32]
 8012aea:	f000 ff41 	bl	8013970 <__mcmp>
 8012aee:	463a      	mov	r2, r7
 8012af0:	4681      	mov	r9, r0
 8012af2:	4631      	mov	r1, r6
 8012af4:	4620      	mov	r0, r4
 8012af6:	f000 ff57 	bl	80139a8 <__mdiff>
 8012afa:	68c2      	ldr	r2, [r0, #12]
 8012afc:	9b08      	ldr	r3, [sp, #32]
 8012afe:	4605      	mov	r5, r0
 8012b00:	bb02      	cbnz	r2, 8012b44 <_dtoa_r+0xa7c>
 8012b02:	4601      	mov	r1, r0
 8012b04:	4658      	mov	r0, fp
 8012b06:	f000 ff33 	bl	8013970 <__mcmp>
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	4629      	mov	r1, r5
 8012b10:	4620      	mov	r0, r4
 8012b12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012b16:	f000 fca3 	bl	8013460 <_Bfree>
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b1e:	9d01      	ldr	r5, [sp, #4]
 8012b20:	ea43 0102 	orr.w	r1, r3, r2
 8012b24:	9b06      	ldr	r3, [sp, #24]
 8012b26:	430b      	orrs	r3, r1
 8012b28:	9b08      	ldr	r3, [sp, #32]
 8012b2a:	d10d      	bne.n	8012b48 <_dtoa_r+0xa80>
 8012b2c:	2b39      	cmp	r3, #57	; 0x39
 8012b2e:	d029      	beq.n	8012b84 <_dtoa_r+0xabc>
 8012b30:	f1b9 0f00 	cmp.w	r9, #0
 8012b34:	dd01      	ble.n	8012b3a <_dtoa_r+0xa72>
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	3331      	adds	r3, #49	; 0x31
 8012b3a:	9a02      	ldr	r2, [sp, #8]
 8012b3c:	7013      	strb	r3, [r2, #0]
 8012b3e:	e774      	b.n	8012a2a <_dtoa_r+0x962>
 8012b40:	4638      	mov	r0, r7
 8012b42:	e7b9      	b.n	8012ab8 <_dtoa_r+0x9f0>
 8012b44:	2201      	movs	r2, #1
 8012b46:	e7e2      	b.n	8012b0e <_dtoa_r+0xa46>
 8012b48:	f1b9 0f00 	cmp.w	r9, #0
 8012b4c:	db06      	blt.n	8012b5c <_dtoa_r+0xa94>
 8012b4e:	9905      	ldr	r1, [sp, #20]
 8012b50:	ea41 0909 	orr.w	r9, r1, r9
 8012b54:	9906      	ldr	r1, [sp, #24]
 8012b56:	ea59 0101 	orrs.w	r1, r9, r1
 8012b5a:	d120      	bne.n	8012b9e <_dtoa_r+0xad6>
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	ddec      	ble.n	8012b3a <_dtoa_r+0xa72>
 8012b60:	4659      	mov	r1, fp
 8012b62:	2201      	movs	r2, #1
 8012b64:	4620      	mov	r0, r4
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	f000 fe96 	bl	8013898 <__lshift>
 8012b6c:	4631      	mov	r1, r6
 8012b6e:	4683      	mov	fp, r0
 8012b70:	f000 fefe 	bl	8013970 <__mcmp>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	9b01      	ldr	r3, [sp, #4]
 8012b78:	dc02      	bgt.n	8012b80 <_dtoa_r+0xab8>
 8012b7a:	d1de      	bne.n	8012b3a <_dtoa_r+0xa72>
 8012b7c:	07da      	lsls	r2, r3, #31
 8012b7e:	d5dc      	bpl.n	8012b3a <_dtoa_r+0xa72>
 8012b80:	2b39      	cmp	r3, #57	; 0x39
 8012b82:	d1d8      	bne.n	8012b36 <_dtoa_r+0xa6e>
 8012b84:	9a02      	ldr	r2, [sp, #8]
 8012b86:	2339      	movs	r3, #57	; 0x39
 8012b88:	7013      	strb	r3, [r2, #0]
 8012b8a:	462b      	mov	r3, r5
 8012b8c:	461d      	mov	r5, r3
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b94:	2a39      	cmp	r2, #57	; 0x39
 8012b96:	d050      	beq.n	8012c3a <_dtoa_r+0xb72>
 8012b98:	3201      	adds	r2, #1
 8012b9a:	701a      	strb	r2, [r3, #0]
 8012b9c:	e745      	b.n	8012a2a <_dtoa_r+0x962>
 8012b9e:	2a00      	cmp	r2, #0
 8012ba0:	dd03      	ble.n	8012baa <_dtoa_r+0xae2>
 8012ba2:	2b39      	cmp	r3, #57	; 0x39
 8012ba4:	d0ee      	beq.n	8012b84 <_dtoa_r+0xabc>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	e7c7      	b.n	8012b3a <_dtoa_r+0xa72>
 8012baa:	9a01      	ldr	r2, [sp, #4]
 8012bac:	9907      	ldr	r1, [sp, #28]
 8012bae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bb2:	428a      	cmp	r2, r1
 8012bb4:	d02a      	beq.n	8012c0c <_dtoa_r+0xb44>
 8012bb6:	4659      	mov	r1, fp
 8012bb8:	2300      	movs	r3, #0
 8012bba:	220a      	movs	r2, #10
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f000 fc71 	bl	80134a4 <__multadd>
 8012bc2:	45b8      	cmp	r8, r7
 8012bc4:	4683      	mov	fp, r0
 8012bc6:	f04f 0300 	mov.w	r3, #0
 8012bca:	f04f 020a 	mov.w	r2, #10
 8012bce:	4641      	mov	r1, r8
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	d107      	bne.n	8012be4 <_dtoa_r+0xb1c>
 8012bd4:	f000 fc66 	bl	80134a4 <__multadd>
 8012bd8:	4680      	mov	r8, r0
 8012bda:	4607      	mov	r7, r0
 8012bdc:	9b01      	ldr	r3, [sp, #4]
 8012bde:	3301      	adds	r3, #1
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	e775      	b.n	8012ad0 <_dtoa_r+0xa08>
 8012be4:	f000 fc5e 	bl	80134a4 <__multadd>
 8012be8:	4639      	mov	r1, r7
 8012bea:	4680      	mov	r8, r0
 8012bec:	2300      	movs	r3, #0
 8012bee:	220a      	movs	r2, #10
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 fc57 	bl	80134a4 <__multadd>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	e7f0      	b.n	8012bdc <_dtoa_r+0xb14>
 8012bfa:	f1b9 0f00 	cmp.w	r9, #0
 8012bfe:	9a00      	ldr	r2, [sp, #0]
 8012c00:	bfcc      	ite	gt
 8012c02:	464d      	movgt	r5, r9
 8012c04:	2501      	movle	r5, #1
 8012c06:	4415      	add	r5, r2
 8012c08:	f04f 0800 	mov.w	r8, #0
 8012c0c:	4659      	mov	r1, fp
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4620      	mov	r0, r4
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	f000 fe40 	bl	8013898 <__lshift>
 8012c18:	4631      	mov	r1, r6
 8012c1a:	4683      	mov	fp, r0
 8012c1c:	f000 fea8 	bl	8013970 <__mcmp>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	dcb2      	bgt.n	8012b8a <_dtoa_r+0xac2>
 8012c24:	d102      	bne.n	8012c2c <_dtoa_r+0xb64>
 8012c26:	9b01      	ldr	r3, [sp, #4]
 8012c28:	07db      	lsls	r3, r3, #31
 8012c2a:	d4ae      	bmi.n	8012b8a <_dtoa_r+0xac2>
 8012c2c:	462b      	mov	r3, r5
 8012c2e:	461d      	mov	r5, r3
 8012c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c34:	2a30      	cmp	r2, #48	; 0x30
 8012c36:	d0fa      	beq.n	8012c2e <_dtoa_r+0xb66>
 8012c38:	e6f7      	b.n	8012a2a <_dtoa_r+0x962>
 8012c3a:	9a00      	ldr	r2, [sp, #0]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d1a5      	bne.n	8012b8c <_dtoa_r+0xac4>
 8012c40:	f10a 0a01 	add.w	sl, sl, #1
 8012c44:	2331      	movs	r3, #49	; 0x31
 8012c46:	e779      	b.n	8012b3c <_dtoa_r+0xa74>
 8012c48:	4b13      	ldr	r3, [pc, #76]	; (8012c98 <_dtoa_r+0xbd0>)
 8012c4a:	f7ff baaf 	b.w	80121ac <_dtoa_r+0xe4>
 8012c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f47f aa86 	bne.w	8012162 <_dtoa_r+0x9a>
 8012c56:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <_dtoa_r+0xbd4>)
 8012c58:	f7ff baa8 	b.w	80121ac <_dtoa_r+0xe4>
 8012c5c:	f1b9 0f00 	cmp.w	r9, #0
 8012c60:	dc03      	bgt.n	8012c6a <_dtoa_r+0xba2>
 8012c62:	9b05      	ldr	r3, [sp, #20]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	f73f aec9 	bgt.w	80129fc <_dtoa_r+0x934>
 8012c6a:	9d00      	ldr	r5, [sp, #0]
 8012c6c:	4631      	mov	r1, r6
 8012c6e:	4658      	mov	r0, fp
 8012c70:	f7ff f99e 	bl	8011fb0 <quorem>
 8012c74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c78:	f805 3b01 	strb.w	r3, [r5], #1
 8012c7c:	9a00      	ldr	r2, [sp, #0]
 8012c7e:	1aaa      	subs	r2, r5, r2
 8012c80:	4591      	cmp	r9, r2
 8012c82:	ddba      	ble.n	8012bfa <_dtoa_r+0xb32>
 8012c84:	4659      	mov	r1, fp
 8012c86:	2300      	movs	r3, #0
 8012c88:	220a      	movs	r2, #10
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 fc0a 	bl	80134a4 <__multadd>
 8012c90:	4683      	mov	fp, r0
 8012c92:	e7eb      	b.n	8012c6c <_dtoa_r+0xba4>
 8012c94:	080174f4 	.word	0x080174f4
 8012c98:	080176f9 	.word	0x080176f9
 8012c9c:	08017471 	.word	0x08017471

08012ca0 <rshift>:
 8012ca0:	6903      	ldr	r3, [r0, #16]
 8012ca2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012ca6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012caa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012cae:	f100 0414 	add.w	r4, r0, #20
 8012cb2:	dd45      	ble.n	8012d40 <rshift+0xa0>
 8012cb4:	f011 011f 	ands.w	r1, r1, #31
 8012cb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012cbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012cc0:	d10c      	bne.n	8012cdc <rshift+0x3c>
 8012cc2:	f100 0710 	add.w	r7, r0, #16
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	42b1      	cmp	r1, r6
 8012cca:	d334      	bcc.n	8012d36 <rshift+0x96>
 8012ccc:	1a9b      	subs	r3, r3, r2
 8012cce:	009b      	lsls	r3, r3, #2
 8012cd0:	1eea      	subs	r2, r5, #3
 8012cd2:	4296      	cmp	r6, r2
 8012cd4:	bf38      	it	cc
 8012cd6:	2300      	movcc	r3, #0
 8012cd8:	4423      	add	r3, r4
 8012cda:	e015      	b.n	8012d08 <rshift+0x68>
 8012cdc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012ce0:	f1c1 0820 	rsb	r8, r1, #32
 8012ce4:	40cf      	lsrs	r7, r1
 8012ce6:	f105 0e04 	add.w	lr, r5, #4
 8012cea:	46a1      	mov	r9, r4
 8012cec:	4576      	cmp	r6, lr
 8012cee:	46f4      	mov	ip, lr
 8012cf0:	d815      	bhi.n	8012d1e <rshift+0x7e>
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	009a      	lsls	r2, r3, #2
 8012cf6:	3a04      	subs	r2, #4
 8012cf8:	3501      	adds	r5, #1
 8012cfa:	42ae      	cmp	r6, r5
 8012cfc:	bf38      	it	cc
 8012cfe:	2200      	movcc	r2, #0
 8012d00:	18a3      	adds	r3, r4, r2
 8012d02:	50a7      	str	r7, [r4, r2]
 8012d04:	b107      	cbz	r7, 8012d08 <rshift+0x68>
 8012d06:	3304      	adds	r3, #4
 8012d08:	1b1a      	subs	r2, r3, r4
 8012d0a:	42a3      	cmp	r3, r4
 8012d0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d10:	bf08      	it	eq
 8012d12:	2300      	moveq	r3, #0
 8012d14:	6102      	str	r2, [r0, #16]
 8012d16:	bf08      	it	eq
 8012d18:	6143      	streq	r3, [r0, #20]
 8012d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d1e:	f8dc c000 	ldr.w	ip, [ip]
 8012d22:	fa0c fc08 	lsl.w	ip, ip, r8
 8012d26:	ea4c 0707 	orr.w	r7, ip, r7
 8012d2a:	f849 7b04 	str.w	r7, [r9], #4
 8012d2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d32:	40cf      	lsrs	r7, r1
 8012d34:	e7da      	b.n	8012cec <rshift+0x4c>
 8012d36:	f851 cb04 	ldr.w	ip, [r1], #4
 8012d3a:	f847 cf04 	str.w	ip, [r7, #4]!
 8012d3e:	e7c3      	b.n	8012cc8 <rshift+0x28>
 8012d40:	4623      	mov	r3, r4
 8012d42:	e7e1      	b.n	8012d08 <rshift+0x68>

08012d44 <__hexdig_fun>:
 8012d44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012d48:	2b09      	cmp	r3, #9
 8012d4a:	d802      	bhi.n	8012d52 <__hexdig_fun+0xe>
 8012d4c:	3820      	subs	r0, #32
 8012d4e:	b2c0      	uxtb	r0, r0
 8012d50:	4770      	bx	lr
 8012d52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012d56:	2b05      	cmp	r3, #5
 8012d58:	d801      	bhi.n	8012d5e <__hexdig_fun+0x1a>
 8012d5a:	3847      	subs	r0, #71	; 0x47
 8012d5c:	e7f7      	b.n	8012d4e <__hexdig_fun+0xa>
 8012d5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012d62:	2b05      	cmp	r3, #5
 8012d64:	d801      	bhi.n	8012d6a <__hexdig_fun+0x26>
 8012d66:	3827      	subs	r0, #39	; 0x27
 8012d68:	e7f1      	b.n	8012d4e <__hexdig_fun+0xa>
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	4770      	bx	lr
	...

08012d70 <__gethex>:
 8012d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	ed2d 8b02 	vpush	{d8}
 8012d78:	b089      	sub	sp, #36	; 0x24
 8012d7a:	ee08 0a10 	vmov	s16, r0
 8012d7e:	9304      	str	r3, [sp, #16]
 8012d80:	4bbc      	ldr	r3, [pc, #752]	; (8013074 <__gethex+0x304>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	9301      	str	r3, [sp, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	468b      	mov	fp, r1
 8012d8a:	4690      	mov	r8, r2
 8012d8c:	f7ed fa28 	bl	80001e0 <strlen>
 8012d90:	9b01      	ldr	r3, [sp, #4]
 8012d92:	f8db 2000 	ldr.w	r2, [fp]
 8012d96:	4403      	add	r3, r0
 8012d98:	4682      	mov	sl, r0
 8012d9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012d9e:	9305      	str	r3, [sp, #20]
 8012da0:	1c93      	adds	r3, r2, #2
 8012da2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012da6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012daa:	32fe      	adds	r2, #254	; 0xfe
 8012dac:	18d1      	adds	r1, r2, r3
 8012dae:	461f      	mov	r7, r3
 8012db0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012db4:	9100      	str	r1, [sp, #0]
 8012db6:	2830      	cmp	r0, #48	; 0x30
 8012db8:	d0f8      	beq.n	8012dac <__gethex+0x3c>
 8012dba:	f7ff ffc3 	bl	8012d44 <__hexdig_fun>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d13a      	bne.n	8012e3a <__gethex+0xca>
 8012dc4:	9901      	ldr	r1, [sp, #4]
 8012dc6:	4652      	mov	r2, sl
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f001 fd5b 	bl	8014884 <strncmp>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d168      	bne.n	8012ea6 <__gethex+0x136>
 8012dd4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012dd8:	eb07 060a 	add.w	r6, r7, sl
 8012ddc:	f7ff ffb2 	bl	8012d44 <__hexdig_fun>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	d062      	beq.n	8012eaa <__gethex+0x13a>
 8012de4:	4633      	mov	r3, r6
 8012de6:	7818      	ldrb	r0, [r3, #0]
 8012de8:	2830      	cmp	r0, #48	; 0x30
 8012dea:	461f      	mov	r7, r3
 8012dec:	f103 0301 	add.w	r3, r3, #1
 8012df0:	d0f9      	beq.n	8012de6 <__gethex+0x76>
 8012df2:	f7ff ffa7 	bl	8012d44 <__hexdig_fun>
 8012df6:	2301      	movs	r3, #1
 8012df8:	fab0 f480 	clz	r4, r0
 8012dfc:	0964      	lsrs	r4, r4, #5
 8012dfe:	4635      	mov	r5, r6
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	463a      	mov	r2, r7
 8012e04:	4616      	mov	r6, r2
 8012e06:	3201      	adds	r2, #1
 8012e08:	7830      	ldrb	r0, [r6, #0]
 8012e0a:	f7ff ff9b 	bl	8012d44 <__hexdig_fun>
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	d1f8      	bne.n	8012e04 <__gethex+0x94>
 8012e12:	9901      	ldr	r1, [sp, #4]
 8012e14:	4652      	mov	r2, sl
 8012e16:	4630      	mov	r0, r6
 8012e18:	f001 fd34 	bl	8014884 <strncmp>
 8012e1c:	b980      	cbnz	r0, 8012e40 <__gethex+0xd0>
 8012e1e:	b94d      	cbnz	r5, 8012e34 <__gethex+0xc4>
 8012e20:	eb06 050a 	add.w	r5, r6, sl
 8012e24:	462a      	mov	r2, r5
 8012e26:	4616      	mov	r6, r2
 8012e28:	3201      	adds	r2, #1
 8012e2a:	7830      	ldrb	r0, [r6, #0]
 8012e2c:	f7ff ff8a 	bl	8012d44 <__hexdig_fun>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d1f8      	bne.n	8012e26 <__gethex+0xb6>
 8012e34:	1bad      	subs	r5, r5, r6
 8012e36:	00ad      	lsls	r5, r5, #2
 8012e38:	e004      	b.n	8012e44 <__gethex+0xd4>
 8012e3a:	2400      	movs	r4, #0
 8012e3c:	4625      	mov	r5, r4
 8012e3e:	e7e0      	b.n	8012e02 <__gethex+0x92>
 8012e40:	2d00      	cmp	r5, #0
 8012e42:	d1f7      	bne.n	8012e34 <__gethex+0xc4>
 8012e44:	7833      	ldrb	r3, [r6, #0]
 8012e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012e4a:	2b50      	cmp	r3, #80	; 0x50
 8012e4c:	d13b      	bne.n	8012ec6 <__gethex+0x156>
 8012e4e:	7873      	ldrb	r3, [r6, #1]
 8012e50:	2b2b      	cmp	r3, #43	; 0x2b
 8012e52:	d02c      	beq.n	8012eae <__gethex+0x13e>
 8012e54:	2b2d      	cmp	r3, #45	; 0x2d
 8012e56:	d02e      	beq.n	8012eb6 <__gethex+0x146>
 8012e58:	1c71      	adds	r1, r6, #1
 8012e5a:	f04f 0900 	mov.w	r9, #0
 8012e5e:	7808      	ldrb	r0, [r1, #0]
 8012e60:	f7ff ff70 	bl	8012d44 <__hexdig_fun>
 8012e64:	1e43      	subs	r3, r0, #1
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	2b18      	cmp	r3, #24
 8012e6a:	d82c      	bhi.n	8012ec6 <__gethex+0x156>
 8012e6c:	f1a0 0210 	sub.w	r2, r0, #16
 8012e70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012e74:	f7ff ff66 	bl	8012d44 <__hexdig_fun>
 8012e78:	1e43      	subs	r3, r0, #1
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	2b18      	cmp	r3, #24
 8012e7e:	d91d      	bls.n	8012ebc <__gethex+0x14c>
 8012e80:	f1b9 0f00 	cmp.w	r9, #0
 8012e84:	d000      	beq.n	8012e88 <__gethex+0x118>
 8012e86:	4252      	negs	r2, r2
 8012e88:	4415      	add	r5, r2
 8012e8a:	f8cb 1000 	str.w	r1, [fp]
 8012e8e:	b1e4      	cbz	r4, 8012eca <__gethex+0x15a>
 8012e90:	9b00      	ldr	r3, [sp, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	bf14      	ite	ne
 8012e96:	2700      	movne	r7, #0
 8012e98:	2706      	moveq	r7, #6
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	b009      	add	sp, #36	; 0x24
 8012e9e:	ecbd 8b02 	vpop	{d8}
 8012ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea6:	463e      	mov	r6, r7
 8012ea8:	4625      	mov	r5, r4
 8012eaa:	2401      	movs	r4, #1
 8012eac:	e7ca      	b.n	8012e44 <__gethex+0xd4>
 8012eae:	f04f 0900 	mov.w	r9, #0
 8012eb2:	1cb1      	adds	r1, r6, #2
 8012eb4:	e7d3      	b.n	8012e5e <__gethex+0xee>
 8012eb6:	f04f 0901 	mov.w	r9, #1
 8012eba:	e7fa      	b.n	8012eb2 <__gethex+0x142>
 8012ebc:	230a      	movs	r3, #10
 8012ebe:	fb03 0202 	mla	r2, r3, r2, r0
 8012ec2:	3a10      	subs	r2, #16
 8012ec4:	e7d4      	b.n	8012e70 <__gethex+0x100>
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	e7df      	b.n	8012e8a <__gethex+0x11a>
 8012eca:	1bf3      	subs	r3, r6, r7
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	4621      	mov	r1, r4
 8012ed0:	2b07      	cmp	r3, #7
 8012ed2:	dc0b      	bgt.n	8012eec <__gethex+0x17c>
 8012ed4:	ee18 0a10 	vmov	r0, s16
 8012ed8:	f000 fa82 	bl	80133e0 <_Balloc>
 8012edc:	4604      	mov	r4, r0
 8012ede:	b940      	cbnz	r0, 8012ef2 <__gethex+0x182>
 8012ee0:	4b65      	ldr	r3, [pc, #404]	; (8013078 <__gethex+0x308>)
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	21de      	movs	r1, #222	; 0xde
 8012ee6:	4865      	ldr	r0, [pc, #404]	; (801307c <__gethex+0x30c>)
 8012ee8:	f001 fda4 	bl	8014a34 <__assert_func>
 8012eec:	3101      	adds	r1, #1
 8012eee:	105b      	asrs	r3, r3, #1
 8012ef0:	e7ee      	b.n	8012ed0 <__gethex+0x160>
 8012ef2:	f100 0914 	add.w	r9, r0, #20
 8012ef6:	f04f 0b00 	mov.w	fp, #0
 8012efa:	f1ca 0301 	rsb	r3, sl, #1
 8012efe:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f02:	f8cd b000 	str.w	fp, [sp]
 8012f06:	9306      	str	r3, [sp, #24]
 8012f08:	42b7      	cmp	r7, r6
 8012f0a:	d340      	bcc.n	8012f8e <__gethex+0x21e>
 8012f0c:	9802      	ldr	r0, [sp, #8]
 8012f0e:	9b00      	ldr	r3, [sp, #0]
 8012f10:	f840 3b04 	str.w	r3, [r0], #4
 8012f14:	eba0 0009 	sub.w	r0, r0, r9
 8012f18:	1080      	asrs	r0, r0, #2
 8012f1a:	0146      	lsls	r6, r0, #5
 8012f1c:	6120      	str	r0, [r4, #16]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f000 fb54 	bl	80135cc <__hi0bits>
 8012f24:	1a30      	subs	r0, r6, r0
 8012f26:	f8d8 6000 	ldr.w	r6, [r8]
 8012f2a:	42b0      	cmp	r0, r6
 8012f2c:	dd63      	ble.n	8012ff6 <__gethex+0x286>
 8012f2e:	1b87      	subs	r7, r0, r6
 8012f30:	4639      	mov	r1, r7
 8012f32:	4620      	mov	r0, r4
 8012f34:	f000 feee 	bl	8013d14 <__any_on>
 8012f38:	4682      	mov	sl, r0
 8012f3a:	b1a8      	cbz	r0, 8012f68 <__gethex+0x1f8>
 8012f3c:	1e7b      	subs	r3, r7, #1
 8012f3e:	1159      	asrs	r1, r3, #5
 8012f40:	f003 021f 	and.w	r2, r3, #31
 8012f44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012f48:	f04f 0a01 	mov.w	sl, #1
 8012f4c:	fa0a f202 	lsl.w	r2, sl, r2
 8012f50:	420a      	tst	r2, r1
 8012f52:	d009      	beq.n	8012f68 <__gethex+0x1f8>
 8012f54:	4553      	cmp	r3, sl
 8012f56:	dd05      	ble.n	8012f64 <__gethex+0x1f4>
 8012f58:	1eb9      	subs	r1, r7, #2
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 feda 	bl	8013d14 <__any_on>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d145      	bne.n	8012ff0 <__gethex+0x280>
 8012f64:	f04f 0a02 	mov.w	sl, #2
 8012f68:	4639      	mov	r1, r7
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f7ff fe98 	bl	8012ca0 <rshift>
 8012f70:	443d      	add	r5, r7
 8012f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f76:	42ab      	cmp	r3, r5
 8012f78:	da4c      	bge.n	8013014 <__gethex+0x2a4>
 8012f7a:	ee18 0a10 	vmov	r0, s16
 8012f7e:	4621      	mov	r1, r4
 8012f80:	f000 fa6e 	bl	8013460 <_Bfree>
 8012f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f86:	2300      	movs	r3, #0
 8012f88:	6013      	str	r3, [r2, #0]
 8012f8a:	27a3      	movs	r7, #163	; 0xa3
 8012f8c:	e785      	b.n	8012e9a <__gethex+0x12a>
 8012f8e:	1e73      	subs	r3, r6, #1
 8012f90:	9a05      	ldr	r2, [sp, #20]
 8012f92:	9303      	str	r3, [sp, #12]
 8012f94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d019      	beq.n	8012fd0 <__gethex+0x260>
 8012f9c:	f1bb 0f20 	cmp.w	fp, #32
 8012fa0:	d107      	bne.n	8012fb2 <__gethex+0x242>
 8012fa2:	9b02      	ldr	r3, [sp, #8]
 8012fa4:	9a00      	ldr	r2, [sp, #0]
 8012fa6:	f843 2b04 	str.w	r2, [r3], #4
 8012faa:	9302      	str	r3, [sp, #8]
 8012fac:	2300      	movs	r3, #0
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	469b      	mov	fp, r3
 8012fb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012fb6:	f7ff fec5 	bl	8012d44 <__hexdig_fun>
 8012fba:	9b00      	ldr	r3, [sp, #0]
 8012fbc:	f000 000f 	and.w	r0, r0, #15
 8012fc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8012fc4:	4303      	orrs	r3, r0
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	f10b 0b04 	add.w	fp, fp, #4
 8012fcc:	9b03      	ldr	r3, [sp, #12]
 8012fce:	e00d      	b.n	8012fec <__gethex+0x27c>
 8012fd0:	9b03      	ldr	r3, [sp, #12]
 8012fd2:	9a06      	ldr	r2, [sp, #24]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	42bb      	cmp	r3, r7
 8012fd8:	d3e0      	bcc.n	8012f9c <__gethex+0x22c>
 8012fda:	4618      	mov	r0, r3
 8012fdc:	9901      	ldr	r1, [sp, #4]
 8012fde:	9307      	str	r3, [sp, #28]
 8012fe0:	4652      	mov	r2, sl
 8012fe2:	f001 fc4f 	bl	8014884 <strncmp>
 8012fe6:	9b07      	ldr	r3, [sp, #28]
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d1d7      	bne.n	8012f9c <__gethex+0x22c>
 8012fec:	461e      	mov	r6, r3
 8012fee:	e78b      	b.n	8012f08 <__gethex+0x198>
 8012ff0:	f04f 0a03 	mov.w	sl, #3
 8012ff4:	e7b8      	b.n	8012f68 <__gethex+0x1f8>
 8012ff6:	da0a      	bge.n	801300e <__gethex+0x29e>
 8012ff8:	1a37      	subs	r7, r6, r0
 8012ffa:	4621      	mov	r1, r4
 8012ffc:	ee18 0a10 	vmov	r0, s16
 8013000:	463a      	mov	r2, r7
 8013002:	f000 fc49 	bl	8013898 <__lshift>
 8013006:	1bed      	subs	r5, r5, r7
 8013008:	4604      	mov	r4, r0
 801300a:	f100 0914 	add.w	r9, r0, #20
 801300e:	f04f 0a00 	mov.w	sl, #0
 8013012:	e7ae      	b.n	8012f72 <__gethex+0x202>
 8013014:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013018:	42a8      	cmp	r0, r5
 801301a:	dd72      	ble.n	8013102 <__gethex+0x392>
 801301c:	1b45      	subs	r5, r0, r5
 801301e:	42ae      	cmp	r6, r5
 8013020:	dc36      	bgt.n	8013090 <__gethex+0x320>
 8013022:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013026:	2b02      	cmp	r3, #2
 8013028:	d02a      	beq.n	8013080 <__gethex+0x310>
 801302a:	2b03      	cmp	r3, #3
 801302c:	d02c      	beq.n	8013088 <__gethex+0x318>
 801302e:	2b01      	cmp	r3, #1
 8013030:	d115      	bne.n	801305e <__gethex+0x2ee>
 8013032:	42ae      	cmp	r6, r5
 8013034:	d113      	bne.n	801305e <__gethex+0x2ee>
 8013036:	2e01      	cmp	r6, #1
 8013038:	d10b      	bne.n	8013052 <__gethex+0x2e2>
 801303a:	9a04      	ldr	r2, [sp, #16]
 801303c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013040:	6013      	str	r3, [r2, #0]
 8013042:	2301      	movs	r3, #1
 8013044:	6123      	str	r3, [r4, #16]
 8013046:	f8c9 3000 	str.w	r3, [r9]
 801304a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801304c:	2762      	movs	r7, #98	; 0x62
 801304e:	601c      	str	r4, [r3, #0]
 8013050:	e723      	b.n	8012e9a <__gethex+0x12a>
 8013052:	1e71      	subs	r1, r6, #1
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fe5d 	bl	8013d14 <__any_on>
 801305a:	2800      	cmp	r0, #0
 801305c:	d1ed      	bne.n	801303a <__gethex+0x2ca>
 801305e:	ee18 0a10 	vmov	r0, s16
 8013062:	4621      	mov	r1, r4
 8013064:	f000 f9fc 	bl	8013460 <_Bfree>
 8013068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801306a:	2300      	movs	r3, #0
 801306c:	6013      	str	r3, [r2, #0]
 801306e:	2750      	movs	r7, #80	; 0x50
 8013070:	e713      	b.n	8012e9a <__gethex+0x12a>
 8013072:	bf00      	nop
 8013074:	08017570 	.word	0x08017570
 8013078:	080174f4 	.word	0x080174f4
 801307c:	08017505 	.word	0x08017505
 8013080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1eb      	bne.n	801305e <__gethex+0x2ee>
 8013086:	e7d8      	b.n	801303a <__gethex+0x2ca>
 8013088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1d5      	bne.n	801303a <__gethex+0x2ca>
 801308e:	e7e6      	b.n	801305e <__gethex+0x2ee>
 8013090:	1e6f      	subs	r7, r5, #1
 8013092:	f1ba 0f00 	cmp.w	sl, #0
 8013096:	d131      	bne.n	80130fc <__gethex+0x38c>
 8013098:	b127      	cbz	r7, 80130a4 <__gethex+0x334>
 801309a:	4639      	mov	r1, r7
 801309c:	4620      	mov	r0, r4
 801309e:	f000 fe39 	bl	8013d14 <__any_on>
 80130a2:	4682      	mov	sl, r0
 80130a4:	117b      	asrs	r3, r7, #5
 80130a6:	2101      	movs	r1, #1
 80130a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80130ac:	f007 071f 	and.w	r7, r7, #31
 80130b0:	fa01 f707 	lsl.w	r7, r1, r7
 80130b4:	421f      	tst	r7, r3
 80130b6:	4629      	mov	r1, r5
 80130b8:	4620      	mov	r0, r4
 80130ba:	bf18      	it	ne
 80130bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80130c0:	1b76      	subs	r6, r6, r5
 80130c2:	f7ff fded 	bl	8012ca0 <rshift>
 80130c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80130ca:	2702      	movs	r7, #2
 80130cc:	f1ba 0f00 	cmp.w	sl, #0
 80130d0:	d048      	beq.n	8013164 <__gethex+0x3f4>
 80130d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130d6:	2b02      	cmp	r3, #2
 80130d8:	d015      	beq.n	8013106 <__gethex+0x396>
 80130da:	2b03      	cmp	r3, #3
 80130dc:	d017      	beq.n	801310e <__gethex+0x39e>
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d109      	bne.n	80130f6 <__gethex+0x386>
 80130e2:	f01a 0f02 	tst.w	sl, #2
 80130e6:	d006      	beq.n	80130f6 <__gethex+0x386>
 80130e8:	f8d9 0000 	ldr.w	r0, [r9]
 80130ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80130f0:	f01a 0f01 	tst.w	sl, #1
 80130f4:	d10e      	bne.n	8013114 <__gethex+0x3a4>
 80130f6:	f047 0710 	orr.w	r7, r7, #16
 80130fa:	e033      	b.n	8013164 <__gethex+0x3f4>
 80130fc:	f04f 0a01 	mov.w	sl, #1
 8013100:	e7d0      	b.n	80130a4 <__gethex+0x334>
 8013102:	2701      	movs	r7, #1
 8013104:	e7e2      	b.n	80130cc <__gethex+0x35c>
 8013106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013108:	f1c3 0301 	rsb	r3, r3, #1
 801310c:	9315      	str	r3, [sp, #84]	; 0x54
 801310e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013110:	2b00      	cmp	r3, #0
 8013112:	d0f0      	beq.n	80130f6 <__gethex+0x386>
 8013114:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013118:	f104 0314 	add.w	r3, r4, #20
 801311c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013120:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013124:	f04f 0c00 	mov.w	ip, #0
 8013128:	4618      	mov	r0, r3
 801312a:	f853 2b04 	ldr.w	r2, [r3], #4
 801312e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013132:	d01c      	beq.n	801316e <__gethex+0x3fe>
 8013134:	3201      	adds	r2, #1
 8013136:	6002      	str	r2, [r0, #0]
 8013138:	2f02      	cmp	r7, #2
 801313a:	f104 0314 	add.w	r3, r4, #20
 801313e:	d13f      	bne.n	80131c0 <__gethex+0x450>
 8013140:	f8d8 2000 	ldr.w	r2, [r8]
 8013144:	3a01      	subs	r2, #1
 8013146:	42b2      	cmp	r2, r6
 8013148:	d10a      	bne.n	8013160 <__gethex+0x3f0>
 801314a:	1171      	asrs	r1, r6, #5
 801314c:	2201      	movs	r2, #1
 801314e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013152:	f006 061f 	and.w	r6, r6, #31
 8013156:	fa02 f606 	lsl.w	r6, r2, r6
 801315a:	421e      	tst	r6, r3
 801315c:	bf18      	it	ne
 801315e:	4617      	movne	r7, r2
 8013160:	f047 0720 	orr.w	r7, r7, #32
 8013164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013166:	601c      	str	r4, [r3, #0]
 8013168:	9b04      	ldr	r3, [sp, #16]
 801316a:	601d      	str	r5, [r3, #0]
 801316c:	e695      	b.n	8012e9a <__gethex+0x12a>
 801316e:	4299      	cmp	r1, r3
 8013170:	f843 cc04 	str.w	ip, [r3, #-4]
 8013174:	d8d8      	bhi.n	8013128 <__gethex+0x3b8>
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	459b      	cmp	fp, r3
 801317a:	db19      	blt.n	80131b0 <__gethex+0x440>
 801317c:	6861      	ldr	r1, [r4, #4]
 801317e:	ee18 0a10 	vmov	r0, s16
 8013182:	3101      	adds	r1, #1
 8013184:	f000 f92c 	bl	80133e0 <_Balloc>
 8013188:	4681      	mov	r9, r0
 801318a:	b918      	cbnz	r0, 8013194 <__gethex+0x424>
 801318c:	4b1a      	ldr	r3, [pc, #104]	; (80131f8 <__gethex+0x488>)
 801318e:	4602      	mov	r2, r0
 8013190:	2184      	movs	r1, #132	; 0x84
 8013192:	e6a8      	b.n	8012ee6 <__gethex+0x176>
 8013194:	6922      	ldr	r2, [r4, #16]
 8013196:	3202      	adds	r2, #2
 8013198:	f104 010c 	add.w	r1, r4, #12
 801319c:	0092      	lsls	r2, r2, #2
 801319e:	300c      	adds	r0, #12
 80131a0:	f7fd f8be 	bl	8010320 <memcpy>
 80131a4:	4621      	mov	r1, r4
 80131a6:	ee18 0a10 	vmov	r0, s16
 80131aa:	f000 f959 	bl	8013460 <_Bfree>
 80131ae:	464c      	mov	r4, r9
 80131b0:	6923      	ldr	r3, [r4, #16]
 80131b2:	1c5a      	adds	r2, r3, #1
 80131b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80131b8:	6122      	str	r2, [r4, #16]
 80131ba:	2201      	movs	r2, #1
 80131bc:	615a      	str	r2, [r3, #20]
 80131be:	e7bb      	b.n	8013138 <__gethex+0x3c8>
 80131c0:	6922      	ldr	r2, [r4, #16]
 80131c2:	455a      	cmp	r2, fp
 80131c4:	dd0b      	ble.n	80131de <__gethex+0x46e>
 80131c6:	2101      	movs	r1, #1
 80131c8:	4620      	mov	r0, r4
 80131ca:	f7ff fd69 	bl	8012ca0 <rshift>
 80131ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131d2:	3501      	adds	r5, #1
 80131d4:	42ab      	cmp	r3, r5
 80131d6:	f6ff aed0 	blt.w	8012f7a <__gethex+0x20a>
 80131da:	2701      	movs	r7, #1
 80131dc:	e7c0      	b.n	8013160 <__gethex+0x3f0>
 80131de:	f016 061f 	ands.w	r6, r6, #31
 80131e2:	d0fa      	beq.n	80131da <__gethex+0x46a>
 80131e4:	449a      	add	sl, r3
 80131e6:	f1c6 0620 	rsb	r6, r6, #32
 80131ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80131ee:	f000 f9ed 	bl	80135cc <__hi0bits>
 80131f2:	42b0      	cmp	r0, r6
 80131f4:	dbe7      	blt.n	80131c6 <__gethex+0x456>
 80131f6:	e7f0      	b.n	80131da <__gethex+0x46a>
 80131f8:	080174f4 	.word	0x080174f4

080131fc <L_shift>:
 80131fc:	f1c2 0208 	rsb	r2, r2, #8
 8013200:	0092      	lsls	r2, r2, #2
 8013202:	b570      	push	{r4, r5, r6, lr}
 8013204:	f1c2 0620 	rsb	r6, r2, #32
 8013208:	6843      	ldr	r3, [r0, #4]
 801320a:	6804      	ldr	r4, [r0, #0]
 801320c:	fa03 f506 	lsl.w	r5, r3, r6
 8013210:	432c      	orrs	r4, r5
 8013212:	40d3      	lsrs	r3, r2
 8013214:	6004      	str	r4, [r0, #0]
 8013216:	f840 3f04 	str.w	r3, [r0, #4]!
 801321a:	4288      	cmp	r0, r1
 801321c:	d3f4      	bcc.n	8013208 <L_shift+0xc>
 801321e:	bd70      	pop	{r4, r5, r6, pc}

08013220 <__match>:
 8013220:	b530      	push	{r4, r5, lr}
 8013222:	6803      	ldr	r3, [r0, #0]
 8013224:	3301      	adds	r3, #1
 8013226:	f811 4b01 	ldrb.w	r4, [r1], #1
 801322a:	b914      	cbnz	r4, 8013232 <__match+0x12>
 801322c:	6003      	str	r3, [r0, #0]
 801322e:	2001      	movs	r0, #1
 8013230:	bd30      	pop	{r4, r5, pc}
 8013232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801323a:	2d19      	cmp	r5, #25
 801323c:	bf98      	it	ls
 801323e:	3220      	addls	r2, #32
 8013240:	42a2      	cmp	r2, r4
 8013242:	d0f0      	beq.n	8013226 <__match+0x6>
 8013244:	2000      	movs	r0, #0
 8013246:	e7f3      	b.n	8013230 <__match+0x10>

08013248 <__hexnan>:
 8013248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	680b      	ldr	r3, [r1, #0]
 801324e:	6801      	ldr	r1, [r0, #0]
 8013250:	115e      	asrs	r6, r3, #5
 8013252:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013256:	f013 031f 	ands.w	r3, r3, #31
 801325a:	b087      	sub	sp, #28
 801325c:	bf18      	it	ne
 801325e:	3604      	addne	r6, #4
 8013260:	2500      	movs	r5, #0
 8013262:	1f37      	subs	r7, r6, #4
 8013264:	4682      	mov	sl, r0
 8013266:	4690      	mov	r8, r2
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	f846 5c04 	str.w	r5, [r6, #-4]
 801326e:	46b9      	mov	r9, r7
 8013270:	463c      	mov	r4, r7
 8013272:	9502      	str	r5, [sp, #8]
 8013274:	46ab      	mov	fp, r5
 8013276:	784a      	ldrb	r2, [r1, #1]
 8013278:	1c4b      	adds	r3, r1, #1
 801327a:	9303      	str	r3, [sp, #12]
 801327c:	b342      	cbz	r2, 80132d0 <__hexnan+0x88>
 801327e:	4610      	mov	r0, r2
 8013280:	9105      	str	r1, [sp, #20]
 8013282:	9204      	str	r2, [sp, #16]
 8013284:	f7ff fd5e 	bl	8012d44 <__hexdig_fun>
 8013288:	2800      	cmp	r0, #0
 801328a:	d14f      	bne.n	801332c <__hexnan+0xe4>
 801328c:	9a04      	ldr	r2, [sp, #16]
 801328e:	9905      	ldr	r1, [sp, #20]
 8013290:	2a20      	cmp	r2, #32
 8013292:	d818      	bhi.n	80132c6 <__hexnan+0x7e>
 8013294:	9b02      	ldr	r3, [sp, #8]
 8013296:	459b      	cmp	fp, r3
 8013298:	dd13      	ble.n	80132c2 <__hexnan+0x7a>
 801329a:	454c      	cmp	r4, r9
 801329c:	d206      	bcs.n	80132ac <__hexnan+0x64>
 801329e:	2d07      	cmp	r5, #7
 80132a0:	dc04      	bgt.n	80132ac <__hexnan+0x64>
 80132a2:	462a      	mov	r2, r5
 80132a4:	4649      	mov	r1, r9
 80132a6:	4620      	mov	r0, r4
 80132a8:	f7ff ffa8 	bl	80131fc <L_shift>
 80132ac:	4544      	cmp	r4, r8
 80132ae:	d950      	bls.n	8013352 <__hexnan+0x10a>
 80132b0:	2300      	movs	r3, #0
 80132b2:	f1a4 0904 	sub.w	r9, r4, #4
 80132b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80132ba:	f8cd b008 	str.w	fp, [sp, #8]
 80132be:	464c      	mov	r4, r9
 80132c0:	461d      	mov	r5, r3
 80132c2:	9903      	ldr	r1, [sp, #12]
 80132c4:	e7d7      	b.n	8013276 <__hexnan+0x2e>
 80132c6:	2a29      	cmp	r2, #41	; 0x29
 80132c8:	d156      	bne.n	8013378 <__hexnan+0x130>
 80132ca:	3102      	adds	r1, #2
 80132cc:	f8ca 1000 	str.w	r1, [sl]
 80132d0:	f1bb 0f00 	cmp.w	fp, #0
 80132d4:	d050      	beq.n	8013378 <__hexnan+0x130>
 80132d6:	454c      	cmp	r4, r9
 80132d8:	d206      	bcs.n	80132e8 <__hexnan+0xa0>
 80132da:	2d07      	cmp	r5, #7
 80132dc:	dc04      	bgt.n	80132e8 <__hexnan+0xa0>
 80132de:	462a      	mov	r2, r5
 80132e0:	4649      	mov	r1, r9
 80132e2:	4620      	mov	r0, r4
 80132e4:	f7ff ff8a 	bl	80131fc <L_shift>
 80132e8:	4544      	cmp	r4, r8
 80132ea:	d934      	bls.n	8013356 <__hexnan+0x10e>
 80132ec:	f1a8 0204 	sub.w	r2, r8, #4
 80132f0:	4623      	mov	r3, r4
 80132f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80132f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80132fa:	429f      	cmp	r7, r3
 80132fc:	d2f9      	bcs.n	80132f2 <__hexnan+0xaa>
 80132fe:	1b3b      	subs	r3, r7, r4
 8013300:	f023 0303 	bic.w	r3, r3, #3
 8013304:	3304      	adds	r3, #4
 8013306:	3401      	adds	r4, #1
 8013308:	3e03      	subs	r6, #3
 801330a:	42b4      	cmp	r4, r6
 801330c:	bf88      	it	hi
 801330e:	2304      	movhi	r3, #4
 8013310:	4443      	add	r3, r8
 8013312:	2200      	movs	r2, #0
 8013314:	f843 2b04 	str.w	r2, [r3], #4
 8013318:	429f      	cmp	r7, r3
 801331a:	d2fb      	bcs.n	8013314 <__hexnan+0xcc>
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	b91b      	cbnz	r3, 8013328 <__hexnan+0xe0>
 8013320:	4547      	cmp	r7, r8
 8013322:	d127      	bne.n	8013374 <__hexnan+0x12c>
 8013324:	2301      	movs	r3, #1
 8013326:	603b      	str	r3, [r7, #0]
 8013328:	2005      	movs	r0, #5
 801332a:	e026      	b.n	801337a <__hexnan+0x132>
 801332c:	3501      	adds	r5, #1
 801332e:	2d08      	cmp	r5, #8
 8013330:	f10b 0b01 	add.w	fp, fp, #1
 8013334:	dd06      	ble.n	8013344 <__hexnan+0xfc>
 8013336:	4544      	cmp	r4, r8
 8013338:	d9c3      	bls.n	80132c2 <__hexnan+0x7a>
 801333a:	2300      	movs	r3, #0
 801333c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013340:	2501      	movs	r5, #1
 8013342:	3c04      	subs	r4, #4
 8013344:	6822      	ldr	r2, [r4, #0]
 8013346:	f000 000f 	and.w	r0, r0, #15
 801334a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801334e:	6022      	str	r2, [r4, #0]
 8013350:	e7b7      	b.n	80132c2 <__hexnan+0x7a>
 8013352:	2508      	movs	r5, #8
 8013354:	e7b5      	b.n	80132c2 <__hexnan+0x7a>
 8013356:	9b01      	ldr	r3, [sp, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d0df      	beq.n	801331c <__hexnan+0xd4>
 801335c:	f04f 32ff 	mov.w	r2, #4294967295
 8013360:	f1c3 0320 	rsb	r3, r3, #32
 8013364:	fa22 f303 	lsr.w	r3, r2, r3
 8013368:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801336c:	401a      	ands	r2, r3
 801336e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013372:	e7d3      	b.n	801331c <__hexnan+0xd4>
 8013374:	3f04      	subs	r7, #4
 8013376:	e7d1      	b.n	801331c <__hexnan+0xd4>
 8013378:	2004      	movs	r0, #4
 801337a:	b007      	add	sp, #28
 801337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013380 <_localeconv_r>:
 8013380:	4800      	ldr	r0, [pc, #0]	; (8013384 <_localeconv_r+0x4>)
 8013382:	4770      	bx	lr
 8013384:	200001a8 	.word	0x200001a8

08013388 <_lseek_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	4d07      	ldr	r5, [pc, #28]	; (80133a8 <_lseek_r+0x20>)
 801338c:	4604      	mov	r4, r0
 801338e:	4608      	mov	r0, r1
 8013390:	4611      	mov	r1, r2
 8013392:	2200      	movs	r2, #0
 8013394:	602a      	str	r2, [r5, #0]
 8013396:	461a      	mov	r2, r3
 8013398:	f7f3 fbe0 	bl	8006b5c <_lseek>
 801339c:	1c43      	adds	r3, r0, #1
 801339e:	d102      	bne.n	80133a6 <_lseek_r+0x1e>
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	b103      	cbz	r3, 80133a6 <_lseek_r+0x1e>
 80133a4:	6023      	str	r3, [r4, #0]
 80133a6:	bd38      	pop	{r3, r4, r5, pc}
 80133a8:	20005240 	.word	0x20005240

080133ac <malloc>:
 80133ac:	4b02      	ldr	r3, [pc, #8]	; (80133b8 <malloc+0xc>)
 80133ae:	4601      	mov	r1, r0
 80133b0:	6818      	ldr	r0, [r3, #0]
 80133b2:	f000 bd2f 	b.w	8013e14 <_malloc_r>
 80133b6:	bf00      	nop
 80133b8:	20000050 	.word	0x20000050

080133bc <__ascii_mbtowc>:
 80133bc:	b082      	sub	sp, #8
 80133be:	b901      	cbnz	r1, 80133c2 <__ascii_mbtowc+0x6>
 80133c0:	a901      	add	r1, sp, #4
 80133c2:	b142      	cbz	r2, 80133d6 <__ascii_mbtowc+0x1a>
 80133c4:	b14b      	cbz	r3, 80133da <__ascii_mbtowc+0x1e>
 80133c6:	7813      	ldrb	r3, [r2, #0]
 80133c8:	600b      	str	r3, [r1, #0]
 80133ca:	7812      	ldrb	r2, [r2, #0]
 80133cc:	1e10      	subs	r0, r2, #0
 80133ce:	bf18      	it	ne
 80133d0:	2001      	movne	r0, #1
 80133d2:	b002      	add	sp, #8
 80133d4:	4770      	bx	lr
 80133d6:	4610      	mov	r0, r2
 80133d8:	e7fb      	b.n	80133d2 <__ascii_mbtowc+0x16>
 80133da:	f06f 0001 	mvn.w	r0, #1
 80133de:	e7f8      	b.n	80133d2 <__ascii_mbtowc+0x16>

080133e0 <_Balloc>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80133e4:	4604      	mov	r4, r0
 80133e6:	460d      	mov	r5, r1
 80133e8:	b976      	cbnz	r6, 8013408 <_Balloc+0x28>
 80133ea:	2010      	movs	r0, #16
 80133ec:	f7ff ffde 	bl	80133ac <malloc>
 80133f0:	4602      	mov	r2, r0
 80133f2:	6260      	str	r0, [r4, #36]	; 0x24
 80133f4:	b920      	cbnz	r0, 8013400 <_Balloc+0x20>
 80133f6:	4b18      	ldr	r3, [pc, #96]	; (8013458 <_Balloc+0x78>)
 80133f8:	4818      	ldr	r0, [pc, #96]	; (801345c <_Balloc+0x7c>)
 80133fa:	2166      	movs	r1, #102	; 0x66
 80133fc:	f001 fb1a 	bl	8014a34 <__assert_func>
 8013400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013404:	6006      	str	r6, [r0, #0]
 8013406:	60c6      	str	r6, [r0, #12]
 8013408:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801340a:	68f3      	ldr	r3, [r6, #12]
 801340c:	b183      	cbz	r3, 8013430 <_Balloc+0x50>
 801340e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013416:	b9b8      	cbnz	r0, 8013448 <_Balloc+0x68>
 8013418:	2101      	movs	r1, #1
 801341a:	fa01 f605 	lsl.w	r6, r1, r5
 801341e:	1d72      	adds	r2, r6, #5
 8013420:	0092      	lsls	r2, r2, #2
 8013422:	4620      	mov	r0, r4
 8013424:	f000 fc97 	bl	8013d56 <_calloc_r>
 8013428:	b160      	cbz	r0, 8013444 <_Balloc+0x64>
 801342a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801342e:	e00e      	b.n	801344e <_Balloc+0x6e>
 8013430:	2221      	movs	r2, #33	; 0x21
 8013432:	2104      	movs	r1, #4
 8013434:	4620      	mov	r0, r4
 8013436:	f000 fc8e 	bl	8013d56 <_calloc_r>
 801343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801343c:	60f0      	str	r0, [r6, #12]
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1e4      	bne.n	801340e <_Balloc+0x2e>
 8013444:	2000      	movs	r0, #0
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	6802      	ldr	r2, [r0, #0]
 801344a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801344e:	2300      	movs	r3, #0
 8013450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013454:	e7f7      	b.n	8013446 <_Balloc+0x66>
 8013456:	bf00      	nop
 8013458:	0801747e 	.word	0x0801747e
 801345c:	08017584 	.word	0x08017584

08013460 <_Bfree>:
 8013460:	b570      	push	{r4, r5, r6, lr}
 8013462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013464:	4605      	mov	r5, r0
 8013466:	460c      	mov	r4, r1
 8013468:	b976      	cbnz	r6, 8013488 <_Bfree+0x28>
 801346a:	2010      	movs	r0, #16
 801346c:	f7ff ff9e 	bl	80133ac <malloc>
 8013470:	4602      	mov	r2, r0
 8013472:	6268      	str	r0, [r5, #36]	; 0x24
 8013474:	b920      	cbnz	r0, 8013480 <_Bfree+0x20>
 8013476:	4b09      	ldr	r3, [pc, #36]	; (801349c <_Bfree+0x3c>)
 8013478:	4809      	ldr	r0, [pc, #36]	; (80134a0 <_Bfree+0x40>)
 801347a:	218a      	movs	r1, #138	; 0x8a
 801347c:	f001 fada 	bl	8014a34 <__assert_func>
 8013480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013484:	6006      	str	r6, [r0, #0]
 8013486:	60c6      	str	r6, [r0, #12]
 8013488:	b13c      	cbz	r4, 801349a <_Bfree+0x3a>
 801348a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801348c:	6862      	ldr	r2, [r4, #4]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013494:	6021      	str	r1, [r4, #0]
 8013496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801349a:	bd70      	pop	{r4, r5, r6, pc}
 801349c:	0801747e 	.word	0x0801747e
 80134a0:	08017584 	.word	0x08017584

080134a4 <__multadd>:
 80134a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a8:	690e      	ldr	r6, [r1, #16]
 80134aa:	4607      	mov	r7, r0
 80134ac:	4698      	mov	r8, r3
 80134ae:	460c      	mov	r4, r1
 80134b0:	f101 0014 	add.w	r0, r1, #20
 80134b4:	2300      	movs	r3, #0
 80134b6:	6805      	ldr	r5, [r0, #0]
 80134b8:	b2a9      	uxth	r1, r5
 80134ba:	fb02 8101 	mla	r1, r2, r1, r8
 80134be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80134c2:	0c2d      	lsrs	r5, r5, #16
 80134c4:	fb02 c505 	mla	r5, r2, r5, ip
 80134c8:	b289      	uxth	r1, r1
 80134ca:	3301      	adds	r3, #1
 80134cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80134d0:	429e      	cmp	r6, r3
 80134d2:	f840 1b04 	str.w	r1, [r0], #4
 80134d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80134da:	dcec      	bgt.n	80134b6 <__multadd+0x12>
 80134dc:	f1b8 0f00 	cmp.w	r8, #0
 80134e0:	d022      	beq.n	8013528 <__multadd+0x84>
 80134e2:	68a3      	ldr	r3, [r4, #8]
 80134e4:	42b3      	cmp	r3, r6
 80134e6:	dc19      	bgt.n	801351c <__multadd+0x78>
 80134e8:	6861      	ldr	r1, [r4, #4]
 80134ea:	4638      	mov	r0, r7
 80134ec:	3101      	adds	r1, #1
 80134ee:	f7ff ff77 	bl	80133e0 <_Balloc>
 80134f2:	4605      	mov	r5, r0
 80134f4:	b928      	cbnz	r0, 8013502 <__multadd+0x5e>
 80134f6:	4602      	mov	r2, r0
 80134f8:	4b0d      	ldr	r3, [pc, #52]	; (8013530 <__multadd+0x8c>)
 80134fa:	480e      	ldr	r0, [pc, #56]	; (8013534 <__multadd+0x90>)
 80134fc:	21b5      	movs	r1, #181	; 0xb5
 80134fe:	f001 fa99 	bl	8014a34 <__assert_func>
 8013502:	6922      	ldr	r2, [r4, #16]
 8013504:	3202      	adds	r2, #2
 8013506:	f104 010c 	add.w	r1, r4, #12
 801350a:	0092      	lsls	r2, r2, #2
 801350c:	300c      	adds	r0, #12
 801350e:	f7fc ff07 	bl	8010320 <memcpy>
 8013512:	4621      	mov	r1, r4
 8013514:	4638      	mov	r0, r7
 8013516:	f7ff ffa3 	bl	8013460 <_Bfree>
 801351a:	462c      	mov	r4, r5
 801351c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013520:	3601      	adds	r6, #1
 8013522:	f8c3 8014 	str.w	r8, [r3, #20]
 8013526:	6126      	str	r6, [r4, #16]
 8013528:	4620      	mov	r0, r4
 801352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801352e:	bf00      	nop
 8013530:	080174f4 	.word	0x080174f4
 8013534:	08017584 	.word	0x08017584

08013538 <__s2b>:
 8013538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801353c:	460c      	mov	r4, r1
 801353e:	4615      	mov	r5, r2
 8013540:	461f      	mov	r7, r3
 8013542:	2209      	movs	r2, #9
 8013544:	3308      	adds	r3, #8
 8013546:	4606      	mov	r6, r0
 8013548:	fb93 f3f2 	sdiv	r3, r3, r2
 801354c:	2100      	movs	r1, #0
 801354e:	2201      	movs	r2, #1
 8013550:	429a      	cmp	r2, r3
 8013552:	db09      	blt.n	8013568 <__s2b+0x30>
 8013554:	4630      	mov	r0, r6
 8013556:	f7ff ff43 	bl	80133e0 <_Balloc>
 801355a:	b940      	cbnz	r0, 801356e <__s2b+0x36>
 801355c:	4602      	mov	r2, r0
 801355e:	4b19      	ldr	r3, [pc, #100]	; (80135c4 <__s2b+0x8c>)
 8013560:	4819      	ldr	r0, [pc, #100]	; (80135c8 <__s2b+0x90>)
 8013562:	21ce      	movs	r1, #206	; 0xce
 8013564:	f001 fa66 	bl	8014a34 <__assert_func>
 8013568:	0052      	lsls	r2, r2, #1
 801356a:	3101      	adds	r1, #1
 801356c:	e7f0      	b.n	8013550 <__s2b+0x18>
 801356e:	9b08      	ldr	r3, [sp, #32]
 8013570:	6143      	str	r3, [r0, #20]
 8013572:	2d09      	cmp	r5, #9
 8013574:	f04f 0301 	mov.w	r3, #1
 8013578:	6103      	str	r3, [r0, #16]
 801357a:	dd16      	ble.n	80135aa <__s2b+0x72>
 801357c:	f104 0909 	add.w	r9, r4, #9
 8013580:	46c8      	mov	r8, r9
 8013582:	442c      	add	r4, r5
 8013584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013588:	4601      	mov	r1, r0
 801358a:	3b30      	subs	r3, #48	; 0x30
 801358c:	220a      	movs	r2, #10
 801358e:	4630      	mov	r0, r6
 8013590:	f7ff ff88 	bl	80134a4 <__multadd>
 8013594:	45a0      	cmp	r8, r4
 8013596:	d1f5      	bne.n	8013584 <__s2b+0x4c>
 8013598:	f1a5 0408 	sub.w	r4, r5, #8
 801359c:	444c      	add	r4, r9
 801359e:	1b2d      	subs	r5, r5, r4
 80135a0:	1963      	adds	r3, r4, r5
 80135a2:	42bb      	cmp	r3, r7
 80135a4:	db04      	blt.n	80135b0 <__s2b+0x78>
 80135a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135aa:	340a      	adds	r4, #10
 80135ac:	2509      	movs	r5, #9
 80135ae:	e7f6      	b.n	801359e <__s2b+0x66>
 80135b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80135b4:	4601      	mov	r1, r0
 80135b6:	3b30      	subs	r3, #48	; 0x30
 80135b8:	220a      	movs	r2, #10
 80135ba:	4630      	mov	r0, r6
 80135bc:	f7ff ff72 	bl	80134a4 <__multadd>
 80135c0:	e7ee      	b.n	80135a0 <__s2b+0x68>
 80135c2:	bf00      	nop
 80135c4:	080174f4 	.word	0x080174f4
 80135c8:	08017584 	.word	0x08017584

080135cc <__hi0bits>:
 80135cc:	0c03      	lsrs	r3, r0, #16
 80135ce:	041b      	lsls	r3, r3, #16
 80135d0:	b9d3      	cbnz	r3, 8013608 <__hi0bits+0x3c>
 80135d2:	0400      	lsls	r0, r0, #16
 80135d4:	2310      	movs	r3, #16
 80135d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80135da:	bf04      	itt	eq
 80135dc:	0200      	lsleq	r0, r0, #8
 80135de:	3308      	addeq	r3, #8
 80135e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80135e4:	bf04      	itt	eq
 80135e6:	0100      	lsleq	r0, r0, #4
 80135e8:	3304      	addeq	r3, #4
 80135ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80135ee:	bf04      	itt	eq
 80135f0:	0080      	lsleq	r0, r0, #2
 80135f2:	3302      	addeq	r3, #2
 80135f4:	2800      	cmp	r0, #0
 80135f6:	db05      	blt.n	8013604 <__hi0bits+0x38>
 80135f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80135fc:	f103 0301 	add.w	r3, r3, #1
 8013600:	bf08      	it	eq
 8013602:	2320      	moveq	r3, #32
 8013604:	4618      	mov	r0, r3
 8013606:	4770      	bx	lr
 8013608:	2300      	movs	r3, #0
 801360a:	e7e4      	b.n	80135d6 <__hi0bits+0xa>

0801360c <__lo0bits>:
 801360c:	6803      	ldr	r3, [r0, #0]
 801360e:	f013 0207 	ands.w	r2, r3, #7
 8013612:	4601      	mov	r1, r0
 8013614:	d00b      	beq.n	801362e <__lo0bits+0x22>
 8013616:	07da      	lsls	r2, r3, #31
 8013618:	d424      	bmi.n	8013664 <__lo0bits+0x58>
 801361a:	0798      	lsls	r0, r3, #30
 801361c:	bf49      	itett	mi
 801361e:	085b      	lsrmi	r3, r3, #1
 8013620:	089b      	lsrpl	r3, r3, #2
 8013622:	2001      	movmi	r0, #1
 8013624:	600b      	strmi	r3, [r1, #0]
 8013626:	bf5c      	itt	pl
 8013628:	600b      	strpl	r3, [r1, #0]
 801362a:	2002      	movpl	r0, #2
 801362c:	4770      	bx	lr
 801362e:	b298      	uxth	r0, r3
 8013630:	b9b0      	cbnz	r0, 8013660 <__lo0bits+0x54>
 8013632:	0c1b      	lsrs	r3, r3, #16
 8013634:	2010      	movs	r0, #16
 8013636:	f013 0fff 	tst.w	r3, #255	; 0xff
 801363a:	bf04      	itt	eq
 801363c:	0a1b      	lsreq	r3, r3, #8
 801363e:	3008      	addeq	r0, #8
 8013640:	071a      	lsls	r2, r3, #28
 8013642:	bf04      	itt	eq
 8013644:	091b      	lsreq	r3, r3, #4
 8013646:	3004      	addeq	r0, #4
 8013648:	079a      	lsls	r2, r3, #30
 801364a:	bf04      	itt	eq
 801364c:	089b      	lsreq	r3, r3, #2
 801364e:	3002      	addeq	r0, #2
 8013650:	07da      	lsls	r2, r3, #31
 8013652:	d403      	bmi.n	801365c <__lo0bits+0x50>
 8013654:	085b      	lsrs	r3, r3, #1
 8013656:	f100 0001 	add.w	r0, r0, #1
 801365a:	d005      	beq.n	8013668 <__lo0bits+0x5c>
 801365c:	600b      	str	r3, [r1, #0]
 801365e:	4770      	bx	lr
 8013660:	4610      	mov	r0, r2
 8013662:	e7e8      	b.n	8013636 <__lo0bits+0x2a>
 8013664:	2000      	movs	r0, #0
 8013666:	4770      	bx	lr
 8013668:	2020      	movs	r0, #32
 801366a:	4770      	bx	lr

0801366c <__i2b>:
 801366c:	b510      	push	{r4, lr}
 801366e:	460c      	mov	r4, r1
 8013670:	2101      	movs	r1, #1
 8013672:	f7ff feb5 	bl	80133e0 <_Balloc>
 8013676:	4602      	mov	r2, r0
 8013678:	b928      	cbnz	r0, 8013686 <__i2b+0x1a>
 801367a:	4b05      	ldr	r3, [pc, #20]	; (8013690 <__i2b+0x24>)
 801367c:	4805      	ldr	r0, [pc, #20]	; (8013694 <__i2b+0x28>)
 801367e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013682:	f001 f9d7 	bl	8014a34 <__assert_func>
 8013686:	2301      	movs	r3, #1
 8013688:	6144      	str	r4, [r0, #20]
 801368a:	6103      	str	r3, [r0, #16]
 801368c:	bd10      	pop	{r4, pc}
 801368e:	bf00      	nop
 8013690:	080174f4 	.word	0x080174f4
 8013694:	08017584 	.word	0x08017584

08013698 <__multiply>:
 8013698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369c:	4614      	mov	r4, r2
 801369e:	690a      	ldr	r2, [r1, #16]
 80136a0:	6923      	ldr	r3, [r4, #16]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	bfb8      	it	lt
 80136a6:	460b      	movlt	r3, r1
 80136a8:	460d      	mov	r5, r1
 80136aa:	bfbc      	itt	lt
 80136ac:	4625      	movlt	r5, r4
 80136ae:	461c      	movlt	r4, r3
 80136b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80136b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80136b8:	68ab      	ldr	r3, [r5, #8]
 80136ba:	6869      	ldr	r1, [r5, #4]
 80136bc:	eb0a 0709 	add.w	r7, sl, r9
 80136c0:	42bb      	cmp	r3, r7
 80136c2:	b085      	sub	sp, #20
 80136c4:	bfb8      	it	lt
 80136c6:	3101      	addlt	r1, #1
 80136c8:	f7ff fe8a 	bl	80133e0 <_Balloc>
 80136cc:	b930      	cbnz	r0, 80136dc <__multiply+0x44>
 80136ce:	4602      	mov	r2, r0
 80136d0:	4b42      	ldr	r3, [pc, #264]	; (80137dc <__multiply+0x144>)
 80136d2:	4843      	ldr	r0, [pc, #268]	; (80137e0 <__multiply+0x148>)
 80136d4:	f240 115d 	movw	r1, #349	; 0x15d
 80136d8:	f001 f9ac 	bl	8014a34 <__assert_func>
 80136dc:	f100 0614 	add.w	r6, r0, #20
 80136e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80136e4:	4633      	mov	r3, r6
 80136e6:	2200      	movs	r2, #0
 80136e8:	4543      	cmp	r3, r8
 80136ea:	d31e      	bcc.n	801372a <__multiply+0x92>
 80136ec:	f105 0c14 	add.w	ip, r5, #20
 80136f0:	f104 0314 	add.w	r3, r4, #20
 80136f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80136f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80136fc:	9202      	str	r2, [sp, #8]
 80136fe:	ebac 0205 	sub.w	r2, ip, r5
 8013702:	3a15      	subs	r2, #21
 8013704:	f022 0203 	bic.w	r2, r2, #3
 8013708:	3204      	adds	r2, #4
 801370a:	f105 0115 	add.w	r1, r5, #21
 801370e:	458c      	cmp	ip, r1
 8013710:	bf38      	it	cc
 8013712:	2204      	movcc	r2, #4
 8013714:	9201      	str	r2, [sp, #4]
 8013716:	9a02      	ldr	r2, [sp, #8]
 8013718:	9303      	str	r3, [sp, #12]
 801371a:	429a      	cmp	r2, r3
 801371c:	d808      	bhi.n	8013730 <__multiply+0x98>
 801371e:	2f00      	cmp	r7, #0
 8013720:	dc55      	bgt.n	80137ce <__multiply+0x136>
 8013722:	6107      	str	r7, [r0, #16]
 8013724:	b005      	add	sp, #20
 8013726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372a:	f843 2b04 	str.w	r2, [r3], #4
 801372e:	e7db      	b.n	80136e8 <__multiply+0x50>
 8013730:	f8b3 a000 	ldrh.w	sl, [r3]
 8013734:	f1ba 0f00 	cmp.w	sl, #0
 8013738:	d020      	beq.n	801377c <__multiply+0xe4>
 801373a:	f105 0e14 	add.w	lr, r5, #20
 801373e:	46b1      	mov	r9, r6
 8013740:	2200      	movs	r2, #0
 8013742:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013746:	f8d9 b000 	ldr.w	fp, [r9]
 801374a:	b2a1      	uxth	r1, r4
 801374c:	fa1f fb8b 	uxth.w	fp, fp
 8013750:	fb0a b101 	mla	r1, sl, r1, fp
 8013754:	4411      	add	r1, r2
 8013756:	f8d9 2000 	ldr.w	r2, [r9]
 801375a:	0c24      	lsrs	r4, r4, #16
 801375c:	0c12      	lsrs	r2, r2, #16
 801375e:	fb0a 2404 	mla	r4, sl, r4, r2
 8013762:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013766:	b289      	uxth	r1, r1
 8013768:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801376c:	45f4      	cmp	ip, lr
 801376e:	f849 1b04 	str.w	r1, [r9], #4
 8013772:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013776:	d8e4      	bhi.n	8013742 <__multiply+0xaa>
 8013778:	9901      	ldr	r1, [sp, #4]
 801377a:	5072      	str	r2, [r6, r1]
 801377c:	9a03      	ldr	r2, [sp, #12]
 801377e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013782:	3304      	adds	r3, #4
 8013784:	f1b9 0f00 	cmp.w	r9, #0
 8013788:	d01f      	beq.n	80137ca <__multiply+0x132>
 801378a:	6834      	ldr	r4, [r6, #0]
 801378c:	f105 0114 	add.w	r1, r5, #20
 8013790:	46b6      	mov	lr, r6
 8013792:	f04f 0a00 	mov.w	sl, #0
 8013796:	880a      	ldrh	r2, [r1, #0]
 8013798:	f8be b002 	ldrh.w	fp, [lr, #2]
 801379c:	fb09 b202 	mla	r2, r9, r2, fp
 80137a0:	4492      	add	sl, r2
 80137a2:	b2a4      	uxth	r4, r4
 80137a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80137a8:	f84e 4b04 	str.w	r4, [lr], #4
 80137ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80137b0:	f8be 2000 	ldrh.w	r2, [lr]
 80137b4:	0c24      	lsrs	r4, r4, #16
 80137b6:	fb09 2404 	mla	r4, r9, r4, r2
 80137ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80137be:	458c      	cmp	ip, r1
 80137c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80137c4:	d8e7      	bhi.n	8013796 <__multiply+0xfe>
 80137c6:	9a01      	ldr	r2, [sp, #4]
 80137c8:	50b4      	str	r4, [r6, r2]
 80137ca:	3604      	adds	r6, #4
 80137cc:	e7a3      	b.n	8013716 <__multiply+0x7e>
 80137ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1a5      	bne.n	8013722 <__multiply+0x8a>
 80137d6:	3f01      	subs	r7, #1
 80137d8:	e7a1      	b.n	801371e <__multiply+0x86>
 80137da:	bf00      	nop
 80137dc:	080174f4 	.word	0x080174f4
 80137e0:	08017584 	.word	0x08017584

080137e4 <__pow5mult>:
 80137e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137e8:	4615      	mov	r5, r2
 80137ea:	f012 0203 	ands.w	r2, r2, #3
 80137ee:	4606      	mov	r6, r0
 80137f0:	460f      	mov	r7, r1
 80137f2:	d007      	beq.n	8013804 <__pow5mult+0x20>
 80137f4:	4c25      	ldr	r4, [pc, #148]	; (801388c <__pow5mult+0xa8>)
 80137f6:	3a01      	subs	r2, #1
 80137f8:	2300      	movs	r3, #0
 80137fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80137fe:	f7ff fe51 	bl	80134a4 <__multadd>
 8013802:	4607      	mov	r7, r0
 8013804:	10ad      	asrs	r5, r5, #2
 8013806:	d03d      	beq.n	8013884 <__pow5mult+0xa0>
 8013808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801380a:	b97c      	cbnz	r4, 801382c <__pow5mult+0x48>
 801380c:	2010      	movs	r0, #16
 801380e:	f7ff fdcd 	bl	80133ac <malloc>
 8013812:	4602      	mov	r2, r0
 8013814:	6270      	str	r0, [r6, #36]	; 0x24
 8013816:	b928      	cbnz	r0, 8013824 <__pow5mult+0x40>
 8013818:	4b1d      	ldr	r3, [pc, #116]	; (8013890 <__pow5mult+0xac>)
 801381a:	481e      	ldr	r0, [pc, #120]	; (8013894 <__pow5mult+0xb0>)
 801381c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013820:	f001 f908 	bl	8014a34 <__assert_func>
 8013824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013828:	6004      	str	r4, [r0, #0]
 801382a:	60c4      	str	r4, [r0, #12]
 801382c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013834:	b94c      	cbnz	r4, 801384a <__pow5mult+0x66>
 8013836:	f240 2171 	movw	r1, #625	; 0x271
 801383a:	4630      	mov	r0, r6
 801383c:	f7ff ff16 	bl	801366c <__i2b>
 8013840:	2300      	movs	r3, #0
 8013842:	f8c8 0008 	str.w	r0, [r8, #8]
 8013846:	4604      	mov	r4, r0
 8013848:	6003      	str	r3, [r0, #0]
 801384a:	f04f 0900 	mov.w	r9, #0
 801384e:	07eb      	lsls	r3, r5, #31
 8013850:	d50a      	bpl.n	8013868 <__pow5mult+0x84>
 8013852:	4639      	mov	r1, r7
 8013854:	4622      	mov	r2, r4
 8013856:	4630      	mov	r0, r6
 8013858:	f7ff ff1e 	bl	8013698 <__multiply>
 801385c:	4639      	mov	r1, r7
 801385e:	4680      	mov	r8, r0
 8013860:	4630      	mov	r0, r6
 8013862:	f7ff fdfd 	bl	8013460 <_Bfree>
 8013866:	4647      	mov	r7, r8
 8013868:	106d      	asrs	r5, r5, #1
 801386a:	d00b      	beq.n	8013884 <__pow5mult+0xa0>
 801386c:	6820      	ldr	r0, [r4, #0]
 801386e:	b938      	cbnz	r0, 8013880 <__pow5mult+0x9c>
 8013870:	4622      	mov	r2, r4
 8013872:	4621      	mov	r1, r4
 8013874:	4630      	mov	r0, r6
 8013876:	f7ff ff0f 	bl	8013698 <__multiply>
 801387a:	6020      	str	r0, [r4, #0]
 801387c:	f8c0 9000 	str.w	r9, [r0]
 8013880:	4604      	mov	r4, r0
 8013882:	e7e4      	b.n	801384e <__pow5mult+0x6a>
 8013884:	4638      	mov	r0, r7
 8013886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801388a:	bf00      	nop
 801388c:	080176d8 	.word	0x080176d8
 8013890:	0801747e 	.word	0x0801747e
 8013894:	08017584 	.word	0x08017584

08013898 <__lshift>:
 8013898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801389c:	460c      	mov	r4, r1
 801389e:	6849      	ldr	r1, [r1, #4]
 80138a0:	6923      	ldr	r3, [r4, #16]
 80138a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	4607      	mov	r7, r0
 80138aa:	4691      	mov	r9, r2
 80138ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80138b0:	f108 0601 	add.w	r6, r8, #1
 80138b4:	42b3      	cmp	r3, r6
 80138b6:	db0b      	blt.n	80138d0 <__lshift+0x38>
 80138b8:	4638      	mov	r0, r7
 80138ba:	f7ff fd91 	bl	80133e0 <_Balloc>
 80138be:	4605      	mov	r5, r0
 80138c0:	b948      	cbnz	r0, 80138d6 <__lshift+0x3e>
 80138c2:	4602      	mov	r2, r0
 80138c4:	4b28      	ldr	r3, [pc, #160]	; (8013968 <__lshift+0xd0>)
 80138c6:	4829      	ldr	r0, [pc, #164]	; (801396c <__lshift+0xd4>)
 80138c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80138cc:	f001 f8b2 	bl	8014a34 <__assert_func>
 80138d0:	3101      	adds	r1, #1
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	e7ee      	b.n	80138b4 <__lshift+0x1c>
 80138d6:	2300      	movs	r3, #0
 80138d8:	f100 0114 	add.w	r1, r0, #20
 80138dc:	f100 0210 	add.w	r2, r0, #16
 80138e0:	4618      	mov	r0, r3
 80138e2:	4553      	cmp	r3, sl
 80138e4:	db33      	blt.n	801394e <__lshift+0xb6>
 80138e6:	6920      	ldr	r0, [r4, #16]
 80138e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138ec:	f104 0314 	add.w	r3, r4, #20
 80138f0:	f019 091f 	ands.w	r9, r9, #31
 80138f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80138f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80138fc:	d02b      	beq.n	8013956 <__lshift+0xbe>
 80138fe:	f1c9 0e20 	rsb	lr, r9, #32
 8013902:	468a      	mov	sl, r1
 8013904:	2200      	movs	r2, #0
 8013906:	6818      	ldr	r0, [r3, #0]
 8013908:	fa00 f009 	lsl.w	r0, r0, r9
 801390c:	4302      	orrs	r2, r0
 801390e:	f84a 2b04 	str.w	r2, [sl], #4
 8013912:	f853 2b04 	ldr.w	r2, [r3], #4
 8013916:	459c      	cmp	ip, r3
 8013918:	fa22 f20e 	lsr.w	r2, r2, lr
 801391c:	d8f3      	bhi.n	8013906 <__lshift+0x6e>
 801391e:	ebac 0304 	sub.w	r3, ip, r4
 8013922:	3b15      	subs	r3, #21
 8013924:	f023 0303 	bic.w	r3, r3, #3
 8013928:	3304      	adds	r3, #4
 801392a:	f104 0015 	add.w	r0, r4, #21
 801392e:	4584      	cmp	ip, r0
 8013930:	bf38      	it	cc
 8013932:	2304      	movcc	r3, #4
 8013934:	50ca      	str	r2, [r1, r3]
 8013936:	b10a      	cbz	r2, 801393c <__lshift+0xa4>
 8013938:	f108 0602 	add.w	r6, r8, #2
 801393c:	3e01      	subs	r6, #1
 801393e:	4638      	mov	r0, r7
 8013940:	612e      	str	r6, [r5, #16]
 8013942:	4621      	mov	r1, r4
 8013944:	f7ff fd8c 	bl	8013460 <_Bfree>
 8013948:	4628      	mov	r0, r5
 801394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801394e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013952:	3301      	adds	r3, #1
 8013954:	e7c5      	b.n	80138e2 <__lshift+0x4a>
 8013956:	3904      	subs	r1, #4
 8013958:	f853 2b04 	ldr.w	r2, [r3], #4
 801395c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013960:	459c      	cmp	ip, r3
 8013962:	d8f9      	bhi.n	8013958 <__lshift+0xc0>
 8013964:	e7ea      	b.n	801393c <__lshift+0xa4>
 8013966:	bf00      	nop
 8013968:	080174f4 	.word	0x080174f4
 801396c:	08017584 	.word	0x08017584

08013970 <__mcmp>:
 8013970:	b530      	push	{r4, r5, lr}
 8013972:	6902      	ldr	r2, [r0, #16]
 8013974:	690c      	ldr	r4, [r1, #16]
 8013976:	1b12      	subs	r2, r2, r4
 8013978:	d10e      	bne.n	8013998 <__mcmp+0x28>
 801397a:	f100 0314 	add.w	r3, r0, #20
 801397e:	3114      	adds	r1, #20
 8013980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801398c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013990:	42a5      	cmp	r5, r4
 8013992:	d003      	beq.n	801399c <__mcmp+0x2c>
 8013994:	d305      	bcc.n	80139a2 <__mcmp+0x32>
 8013996:	2201      	movs	r2, #1
 8013998:	4610      	mov	r0, r2
 801399a:	bd30      	pop	{r4, r5, pc}
 801399c:	4283      	cmp	r3, r0
 801399e:	d3f3      	bcc.n	8013988 <__mcmp+0x18>
 80139a0:	e7fa      	b.n	8013998 <__mcmp+0x28>
 80139a2:	f04f 32ff 	mov.w	r2, #4294967295
 80139a6:	e7f7      	b.n	8013998 <__mcmp+0x28>

080139a8 <__mdiff>:
 80139a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ac:	460c      	mov	r4, r1
 80139ae:	4606      	mov	r6, r0
 80139b0:	4611      	mov	r1, r2
 80139b2:	4620      	mov	r0, r4
 80139b4:	4617      	mov	r7, r2
 80139b6:	f7ff ffdb 	bl	8013970 <__mcmp>
 80139ba:	1e05      	subs	r5, r0, #0
 80139bc:	d110      	bne.n	80139e0 <__mdiff+0x38>
 80139be:	4629      	mov	r1, r5
 80139c0:	4630      	mov	r0, r6
 80139c2:	f7ff fd0d 	bl	80133e0 <_Balloc>
 80139c6:	b930      	cbnz	r0, 80139d6 <__mdiff+0x2e>
 80139c8:	4b39      	ldr	r3, [pc, #228]	; (8013ab0 <__mdiff+0x108>)
 80139ca:	4602      	mov	r2, r0
 80139cc:	f240 2132 	movw	r1, #562	; 0x232
 80139d0:	4838      	ldr	r0, [pc, #224]	; (8013ab4 <__mdiff+0x10c>)
 80139d2:	f001 f82f 	bl	8014a34 <__assert_func>
 80139d6:	2301      	movs	r3, #1
 80139d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80139dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e0:	bfa4      	itt	ge
 80139e2:	463b      	movge	r3, r7
 80139e4:	4627      	movge	r7, r4
 80139e6:	4630      	mov	r0, r6
 80139e8:	6879      	ldr	r1, [r7, #4]
 80139ea:	bfa6      	itte	ge
 80139ec:	461c      	movge	r4, r3
 80139ee:	2500      	movge	r5, #0
 80139f0:	2501      	movlt	r5, #1
 80139f2:	f7ff fcf5 	bl	80133e0 <_Balloc>
 80139f6:	b920      	cbnz	r0, 8013a02 <__mdiff+0x5a>
 80139f8:	4b2d      	ldr	r3, [pc, #180]	; (8013ab0 <__mdiff+0x108>)
 80139fa:	4602      	mov	r2, r0
 80139fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013a00:	e7e6      	b.n	80139d0 <__mdiff+0x28>
 8013a02:	693e      	ldr	r6, [r7, #16]
 8013a04:	60c5      	str	r5, [r0, #12]
 8013a06:	6925      	ldr	r5, [r4, #16]
 8013a08:	f107 0114 	add.w	r1, r7, #20
 8013a0c:	f104 0914 	add.w	r9, r4, #20
 8013a10:	f100 0e14 	add.w	lr, r0, #20
 8013a14:	f107 0210 	add.w	r2, r7, #16
 8013a18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013a1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013a20:	46f2      	mov	sl, lr
 8013a22:	2700      	movs	r7, #0
 8013a24:	f859 3b04 	ldr.w	r3, [r9], #4
 8013a28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013a2c:	fa1f f883 	uxth.w	r8, r3
 8013a30:	fa17 f78b 	uxtah	r7, r7, fp
 8013a34:	0c1b      	lsrs	r3, r3, #16
 8013a36:	eba7 0808 	sub.w	r8, r7, r8
 8013a3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013a3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013a42:	fa1f f888 	uxth.w	r8, r8
 8013a46:	141f      	asrs	r7, r3, #16
 8013a48:	454d      	cmp	r5, r9
 8013a4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013a4e:	f84a 3b04 	str.w	r3, [sl], #4
 8013a52:	d8e7      	bhi.n	8013a24 <__mdiff+0x7c>
 8013a54:	1b2b      	subs	r3, r5, r4
 8013a56:	3b15      	subs	r3, #21
 8013a58:	f023 0303 	bic.w	r3, r3, #3
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	3415      	adds	r4, #21
 8013a60:	42a5      	cmp	r5, r4
 8013a62:	bf38      	it	cc
 8013a64:	2304      	movcc	r3, #4
 8013a66:	4419      	add	r1, r3
 8013a68:	4473      	add	r3, lr
 8013a6a:	469e      	mov	lr, r3
 8013a6c:	460d      	mov	r5, r1
 8013a6e:	4565      	cmp	r5, ip
 8013a70:	d30e      	bcc.n	8013a90 <__mdiff+0xe8>
 8013a72:	f10c 0203 	add.w	r2, ip, #3
 8013a76:	1a52      	subs	r2, r2, r1
 8013a78:	f022 0203 	bic.w	r2, r2, #3
 8013a7c:	3903      	subs	r1, #3
 8013a7e:	458c      	cmp	ip, r1
 8013a80:	bf38      	it	cc
 8013a82:	2200      	movcc	r2, #0
 8013a84:	441a      	add	r2, r3
 8013a86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013a8a:	b17b      	cbz	r3, 8013aac <__mdiff+0x104>
 8013a8c:	6106      	str	r6, [r0, #16]
 8013a8e:	e7a5      	b.n	80139dc <__mdiff+0x34>
 8013a90:	f855 8b04 	ldr.w	r8, [r5], #4
 8013a94:	fa17 f488 	uxtah	r4, r7, r8
 8013a98:	1422      	asrs	r2, r4, #16
 8013a9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013a9e:	b2a4      	uxth	r4, r4
 8013aa0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013aa4:	f84e 4b04 	str.w	r4, [lr], #4
 8013aa8:	1417      	asrs	r7, r2, #16
 8013aaa:	e7e0      	b.n	8013a6e <__mdiff+0xc6>
 8013aac:	3e01      	subs	r6, #1
 8013aae:	e7ea      	b.n	8013a86 <__mdiff+0xde>
 8013ab0:	080174f4 	.word	0x080174f4
 8013ab4:	08017584 	.word	0x08017584

08013ab8 <__ulp>:
 8013ab8:	b082      	sub	sp, #8
 8013aba:	ed8d 0b00 	vstr	d0, [sp]
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	4912      	ldr	r1, [pc, #72]	; (8013b0c <__ulp+0x54>)
 8013ac2:	4019      	ands	r1, r3
 8013ac4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013ac8:	2900      	cmp	r1, #0
 8013aca:	dd05      	ble.n	8013ad8 <__ulp+0x20>
 8013acc:	2200      	movs	r2, #0
 8013ace:	460b      	mov	r3, r1
 8013ad0:	ec43 2b10 	vmov	d0, r2, r3
 8013ad4:	b002      	add	sp, #8
 8013ad6:	4770      	bx	lr
 8013ad8:	4249      	negs	r1, r1
 8013ada:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013ade:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013ae2:	f04f 0200 	mov.w	r2, #0
 8013ae6:	f04f 0300 	mov.w	r3, #0
 8013aea:	da04      	bge.n	8013af6 <__ulp+0x3e>
 8013aec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013af0:	fa41 f300 	asr.w	r3, r1, r0
 8013af4:	e7ec      	b.n	8013ad0 <__ulp+0x18>
 8013af6:	f1a0 0114 	sub.w	r1, r0, #20
 8013afa:	291e      	cmp	r1, #30
 8013afc:	bfda      	itte	le
 8013afe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013b02:	fa20 f101 	lsrle.w	r1, r0, r1
 8013b06:	2101      	movgt	r1, #1
 8013b08:	460a      	mov	r2, r1
 8013b0a:	e7e1      	b.n	8013ad0 <__ulp+0x18>
 8013b0c:	7ff00000 	.word	0x7ff00000

08013b10 <__b2d>:
 8013b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b12:	6905      	ldr	r5, [r0, #16]
 8013b14:	f100 0714 	add.w	r7, r0, #20
 8013b18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013b1c:	1f2e      	subs	r6, r5, #4
 8013b1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013b22:	4620      	mov	r0, r4
 8013b24:	f7ff fd52 	bl	80135cc <__hi0bits>
 8013b28:	f1c0 0320 	rsb	r3, r0, #32
 8013b2c:	280a      	cmp	r0, #10
 8013b2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013bac <__b2d+0x9c>
 8013b32:	600b      	str	r3, [r1, #0]
 8013b34:	dc14      	bgt.n	8013b60 <__b2d+0x50>
 8013b36:	f1c0 0e0b 	rsb	lr, r0, #11
 8013b3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8013b3e:	42b7      	cmp	r7, r6
 8013b40:	ea41 030c 	orr.w	r3, r1, ip
 8013b44:	bf34      	ite	cc
 8013b46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b4a:	2100      	movcs	r1, #0
 8013b4c:	3015      	adds	r0, #21
 8013b4e:	fa04 f000 	lsl.w	r0, r4, r0
 8013b52:	fa21 f10e 	lsr.w	r1, r1, lr
 8013b56:	ea40 0201 	orr.w	r2, r0, r1
 8013b5a:	ec43 2b10 	vmov	d0, r2, r3
 8013b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b60:	42b7      	cmp	r7, r6
 8013b62:	bf3a      	itte	cc
 8013b64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b68:	f1a5 0608 	subcc.w	r6, r5, #8
 8013b6c:	2100      	movcs	r1, #0
 8013b6e:	380b      	subs	r0, #11
 8013b70:	d017      	beq.n	8013ba2 <__b2d+0x92>
 8013b72:	f1c0 0c20 	rsb	ip, r0, #32
 8013b76:	fa04 f500 	lsl.w	r5, r4, r0
 8013b7a:	42be      	cmp	r6, r7
 8013b7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8013b80:	ea45 0504 	orr.w	r5, r5, r4
 8013b84:	bf8c      	ite	hi
 8013b86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013b8a:	2400      	movls	r4, #0
 8013b8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013b90:	fa01 f000 	lsl.w	r0, r1, r0
 8013b94:	fa24 f40c 	lsr.w	r4, r4, ip
 8013b98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013b9c:	ea40 0204 	orr.w	r2, r0, r4
 8013ba0:	e7db      	b.n	8013b5a <__b2d+0x4a>
 8013ba2:	ea44 030c 	orr.w	r3, r4, ip
 8013ba6:	460a      	mov	r2, r1
 8013ba8:	e7d7      	b.n	8013b5a <__b2d+0x4a>
 8013baa:	bf00      	nop
 8013bac:	3ff00000 	.word	0x3ff00000

08013bb0 <__d2b>:
 8013bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	2101      	movs	r1, #1
 8013bb8:	ec57 6b10 	vmov	r6, r7, d0
 8013bbc:	4690      	mov	r8, r2
 8013bbe:	f7ff fc0f 	bl	80133e0 <_Balloc>
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	b930      	cbnz	r0, 8013bd4 <__d2b+0x24>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	4b25      	ldr	r3, [pc, #148]	; (8013c60 <__d2b+0xb0>)
 8013bca:	4826      	ldr	r0, [pc, #152]	; (8013c64 <__d2b+0xb4>)
 8013bcc:	f240 310a 	movw	r1, #778	; 0x30a
 8013bd0:	f000 ff30 	bl	8014a34 <__assert_func>
 8013bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013bdc:	bb35      	cbnz	r5, 8013c2c <__d2b+0x7c>
 8013bde:	2e00      	cmp	r6, #0
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	d028      	beq.n	8013c36 <__d2b+0x86>
 8013be4:	4668      	mov	r0, sp
 8013be6:	9600      	str	r6, [sp, #0]
 8013be8:	f7ff fd10 	bl	801360c <__lo0bits>
 8013bec:	9900      	ldr	r1, [sp, #0]
 8013bee:	b300      	cbz	r0, 8013c32 <__d2b+0x82>
 8013bf0:	9a01      	ldr	r2, [sp, #4]
 8013bf2:	f1c0 0320 	rsb	r3, r0, #32
 8013bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8013bfa:	430b      	orrs	r3, r1
 8013bfc:	40c2      	lsrs	r2, r0
 8013bfe:	6163      	str	r3, [r4, #20]
 8013c00:	9201      	str	r2, [sp, #4]
 8013c02:	9b01      	ldr	r3, [sp, #4]
 8013c04:	61a3      	str	r3, [r4, #24]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	bf14      	ite	ne
 8013c0a:	2202      	movne	r2, #2
 8013c0c:	2201      	moveq	r2, #1
 8013c0e:	6122      	str	r2, [r4, #16]
 8013c10:	b1d5      	cbz	r5, 8013c48 <__d2b+0x98>
 8013c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c16:	4405      	add	r5, r0
 8013c18:	f8c9 5000 	str.w	r5, [r9]
 8013c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c20:	f8c8 0000 	str.w	r0, [r8]
 8013c24:	4620      	mov	r0, r4
 8013c26:	b003      	add	sp, #12
 8013c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c30:	e7d5      	b.n	8013bde <__d2b+0x2e>
 8013c32:	6161      	str	r1, [r4, #20]
 8013c34:	e7e5      	b.n	8013c02 <__d2b+0x52>
 8013c36:	a801      	add	r0, sp, #4
 8013c38:	f7ff fce8 	bl	801360c <__lo0bits>
 8013c3c:	9b01      	ldr	r3, [sp, #4]
 8013c3e:	6163      	str	r3, [r4, #20]
 8013c40:	2201      	movs	r2, #1
 8013c42:	6122      	str	r2, [r4, #16]
 8013c44:	3020      	adds	r0, #32
 8013c46:	e7e3      	b.n	8013c10 <__d2b+0x60>
 8013c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c50:	f8c9 0000 	str.w	r0, [r9]
 8013c54:	6918      	ldr	r0, [r3, #16]
 8013c56:	f7ff fcb9 	bl	80135cc <__hi0bits>
 8013c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c5e:	e7df      	b.n	8013c20 <__d2b+0x70>
 8013c60:	080174f4 	.word	0x080174f4
 8013c64:	08017584 	.word	0x08017584

08013c68 <__ratio>:
 8013c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6c:	4688      	mov	r8, r1
 8013c6e:	4669      	mov	r1, sp
 8013c70:	4681      	mov	r9, r0
 8013c72:	f7ff ff4d 	bl	8013b10 <__b2d>
 8013c76:	a901      	add	r1, sp, #4
 8013c78:	4640      	mov	r0, r8
 8013c7a:	ec55 4b10 	vmov	r4, r5, d0
 8013c7e:	f7ff ff47 	bl	8013b10 <__b2d>
 8013c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013c86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013c8a:	eba3 0c02 	sub.w	ip, r3, r2
 8013c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c92:	1a9b      	subs	r3, r3, r2
 8013c94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013c98:	ec51 0b10 	vmov	r0, r1, d0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	bfd6      	itet	le
 8013ca0:	460a      	movle	r2, r1
 8013ca2:	462a      	movgt	r2, r5
 8013ca4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ca8:	468b      	mov	fp, r1
 8013caa:	462f      	mov	r7, r5
 8013cac:	bfd4      	ite	le
 8013cae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013cb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	ee10 2a10 	vmov	r2, s0
 8013cbc:	465b      	mov	r3, fp
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	f7ec fdcc 	bl	800085c <__aeabi_ddiv>
 8013cc4:	ec41 0b10 	vmov	d0, r0, r1
 8013cc8:	b003      	add	sp, #12
 8013cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cce <__copybits>:
 8013cce:	3901      	subs	r1, #1
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	1149      	asrs	r1, r1, #5
 8013cd4:	6914      	ldr	r4, [r2, #16]
 8013cd6:	3101      	adds	r1, #1
 8013cd8:	f102 0314 	add.w	r3, r2, #20
 8013cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ce4:	1f05      	subs	r5, r0, #4
 8013ce6:	42a3      	cmp	r3, r4
 8013ce8:	d30c      	bcc.n	8013d04 <__copybits+0x36>
 8013cea:	1aa3      	subs	r3, r4, r2
 8013cec:	3b11      	subs	r3, #17
 8013cee:	f023 0303 	bic.w	r3, r3, #3
 8013cf2:	3211      	adds	r2, #17
 8013cf4:	42a2      	cmp	r2, r4
 8013cf6:	bf88      	it	hi
 8013cf8:	2300      	movhi	r3, #0
 8013cfa:	4418      	add	r0, r3
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4288      	cmp	r0, r1
 8013d00:	d305      	bcc.n	8013d0e <__copybits+0x40>
 8013d02:	bd70      	pop	{r4, r5, r6, pc}
 8013d04:	f853 6b04 	ldr.w	r6, [r3], #4
 8013d08:	f845 6f04 	str.w	r6, [r5, #4]!
 8013d0c:	e7eb      	b.n	8013ce6 <__copybits+0x18>
 8013d0e:	f840 3b04 	str.w	r3, [r0], #4
 8013d12:	e7f4      	b.n	8013cfe <__copybits+0x30>

08013d14 <__any_on>:
 8013d14:	f100 0214 	add.w	r2, r0, #20
 8013d18:	6900      	ldr	r0, [r0, #16]
 8013d1a:	114b      	asrs	r3, r1, #5
 8013d1c:	4298      	cmp	r0, r3
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	db11      	blt.n	8013d46 <__any_on+0x32>
 8013d22:	dd0a      	ble.n	8013d3a <__any_on+0x26>
 8013d24:	f011 011f 	ands.w	r1, r1, #31
 8013d28:	d007      	beq.n	8013d3a <__any_on+0x26>
 8013d2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013d2e:	fa24 f001 	lsr.w	r0, r4, r1
 8013d32:	fa00 f101 	lsl.w	r1, r0, r1
 8013d36:	428c      	cmp	r4, r1
 8013d38:	d10b      	bne.n	8013d52 <__any_on+0x3e>
 8013d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d803      	bhi.n	8013d4a <__any_on+0x36>
 8013d42:	2000      	movs	r0, #0
 8013d44:	bd10      	pop	{r4, pc}
 8013d46:	4603      	mov	r3, r0
 8013d48:	e7f7      	b.n	8013d3a <__any_on+0x26>
 8013d4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d4e:	2900      	cmp	r1, #0
 8013d50:	d0f5      	beq.n	8013d3e <__any_on+0x2a>
 8013d52:	2001      	movs	r0, #1
 8013d54:	e7f6      	b.n	8013d44 <__any_on+0x30>

08013d56 <_calloc_r>:
 8013d56:	b513      	push	{r0, r1, r4, lr}
 8013d58:	434a      	muls	r2, r1
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	9201      	str	r2, [sp, #4]
 8013d5e:	f000 f859 	bl	8013e14 <_malloc_r>
 8013d62:	4604      	mov	r4, r0
 8013d64:	b118      	cbz	r0, 8013d6e <_calloc_r+0x18>
 8013d66:	9a01      	ldr	r2, [sp, #4]
 8013d68:	2100      	movs	r1, #0
 8013d6a:	f7fc fae7 	bl	801033c <memset>
 8013d6e:	4620      	mov	r0, r4
 8013d70:	b002      	add	sp, #8
 8013d72:	bd10      	pop	{r4, pc}

08013d74 <_free_r>:
 8013d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d76:	2900      	cmp	r1, #0
 8013d78:	d048      	beq.n	8013e0c <_free_r+0x98>
 8013d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d7e:	9001      	str	r0, [sp, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f1a1 0404 	sub.w	r4, r1, #4
 8013d86:	bfb8      	it	lt
 8013d88:	18e4      	addlt	r4, r4, r3
 8013d8a:	f001 f857 	bl	8014e3c <__malloc_lock>
 8013d8e:	4a20      	ldr	r2, [pc, #128]	; (8013e10 <_free_r+0x9c>)
 8013d90:	9801      	ldr	r0, [sp, #4]
 8013d92:	6813      	ldr	r3, [r2, #0]
 8013d94:	4615      	mov	r5, r2
 8013d96:	b933      	cbnz	r3, 8013da6 <_free_r+0x32>
 8013d98:	6063      	str	r3, [r4, #4]
 8013d9a:	6014      	str	r4, [r2, #0]
 8013d9c:	b003      	add	sp, #12
 8013d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013da2:	f001 b851 	b.w	8014e48 <__malloc_unlock>
 8013da6:	42a3      	cmp	r3, r4
 8013da8:	d90b      	bls.n	8013dc2 <_free_r+0x4e>
 8013daa:	6821      	ldr	r1, [r4, #0]
 8013dac:	1862      	adds	r2, r4, r1
 8013dae:	4293      	cmp	r3, r2
 8013db0:	bf04      	itt	eq
 8013db2:	681a      	ldreq	r2, [r3, #0]
 8013db4:	685b      	ldreq	r3, [r3, #4]
 8013db6:	6063      	str	r3, [r4, #4]
 8013db8:	bf04      	itt	eq
 8013dba:	1852      	addeq	r2, r2, r1
 8013dbc:	6022      	streq	r2, [r4, #0]
 8013dbe:	602c      	str	r4, [r5, #0]
 8013dc0:	e7ec      	b.n	8013d9c <_free_r+0x28>
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	b10b      	cbz	r3, 8013dcc <_free_r+0x58>
 8013dc8:	42a3      	cmp	r3, r4
 8013dca:	d9fa      	bls.n	8013dc2 <_free_r+0x4e>
 8013dcc:	6811      	ldr	r1, [r2, #0]
 8013dce:	1855      	adds	r5, r2, r1
 8013dd0:	42a5      	cmp	r5, r4
 8013dd2:	d10b      	bne.n	8013dec <_free_r+0x78>
 8013dd4:	6824      	ldr	r4, [r4, #0]
 8013dd6:	4421      	add	r1, r4
 8013dd8:	1854      	adds	r4, r2, r1
 8013dda:	42a3      	cmp	r3, r4
 8013ddc:	6011      	str	r1, [r2, #0]
 8013dde:	d1dd      	bne.n	8013d9c <_free_r+0x28>
 8013de0:	681c      	ldr	r4, [r3, #0]
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	6053      	str	r3, [r2, #4]
 8013de6:	4421      	add	r1, r4
 8013de8:	6011      	str	r1, [r2, #0]
 8013dea:	e7d7      	b.n	8013d9c <_free_r+0x28>
 8013dec:	d902      	bls.n	8013df4 <_free_r+0x80>
 8013dee:	230c      	movs	r3, #12
 8013df0:	6003      	str	r3, [r0, #0]
 8013df2:	e7d3      	b.n	8013d9c <_free_r+0x28>
 8013df4:	6825      	ldr	r5, [r4, #0]
 8013df6:	1961      	adds	r1, r4, r5
 8013df8:	428b      	cmp	r3, r1
 8013dfa:	bf04      	itt	eq
 8013dfc:	6819      	ldreq	r1, [r3, #0]
 8013dfe:	685b      	ldreq	r3, [r3, #4]
 8013e00:	6063      	str	r3, [r4, #4]
 8013e02:	bf04      	itt	eq
 8013e04:	1949      	addeq	r1, r1, r5
 8013e06:	6021      	streq	r1, [r4, #0]
 8013e08:	6054      	str	r4, [r2, #4]
 8013e0a:	e7c7      	b.n	8013d9c <_free_r+0x28>
 8013e0c:	b003      	add	sp, #12
 8013e0e:	bd30      	pop	{r4, r5, pc}
 8013e10:	200004fc 	.word	0x200004fc

08013e14 <_malloc_r>:
 8013e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e16:	1ccd      	adds	r5, r1, #3
 8013e18:	f025 0503 	bic.w	r5, r5, #3
 8013e1c:	3508      	adds	r5, #8
 8013e1e:	2d0c      	cmp	r5, #12
 8013e20:	bf38      	it	cc
 8013e22:	250c      	movcc	r5, #12
 8013e24:	2d00      	cmp	r5, #0
 8013e26:	4606      	mov	r6, r0
 8013e28:	db01      	blt.n	8013e2e <_malloc_r+0x1a>
 8013e2a:	42a9      	cmp	r1, r5
 8013e2c:	d903      	bls.n	8013e36 <_malloc_r+0x22>
 8013e2e:	230c      	movs	r3, #12
 8013e30:	6033      	str	r3, [r6, #0]
 8013e32:	2000      	movs	r0, #0
 8013e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e36:	f001 f801 	bl	8014e3c <__malloc_lock>
 8013e3a:	4921      	ldr	r1, [pc, #132]	; (8013ec0 <_malloc_r+0xac>)
 8013e3c:	680a      	ldr	r2, [r1, #0]
 8013e3e:	4614      	mov	r4, r2
 8013e40:	b99c      	cbnz	r4, 8013e6a <_malloc_r+0x56>
 8013e42:	4f20      	ldr	r7, [pc, #128]	; (8013ec4 <_malloc_r+0xb0>)
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	b923      	cbnz	r3, 8013e52 <_malloc_r+0x3e>
 8013e48:	4621      	mov	r1, r4
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f000 fcd0 	bl	80147f0 <_sbrk_r>
 8013e50:	6038      	str	r0, [r7, #0]
 8013e52:	4629      	mov	r1, r5
 8013e54:	4630      	mov	r0, r6
 8013e56:	f000 fccb 	bl	80147f0 <_sbrk_r>
 8013e5a:	1c43      	adds	r3, r0, #1
 8013e5c:	d123      	bne.n	8013ea6 <_malloc_r+0x92>
 8013e5e:	230c      	movs	r3, #12
 8013e60:	6033      	str	r3, [r6, #0]
 8013e62:	4630      	mov	r0, r6
 8013e64:	f000 fff0 	bl	8014e48 <__malloc_unlock>
 8013e68:	e7e3      	b.n	8013e32 <_malloc_r+0x1e>
 8013e6a:	6823      	ldr	r3, [r4, #0]
 8013e6c:	1b5b      	subs	r3, r3, r5
 8013e6e:	d417      	bmi.n	8013ea0 <_malloc_r+0x8c>
 8013e70:	2b0b      	cmp	r3, #11
 8013e72:	d903      	bls.n	8013e7c <_malloc_r+0x68>
 8013e74:	6023      	str	r3, [r4, #0]
 8013e76:	441c      	add	r4, r3
 8013e78:	6025      	str	r5, [r4, #0]
 8013e7a:	e004      	b.n	8013e86 <_malloc_r+0x72>
 8013e7c:	6863      	ldr	r3, [r4, #4]
 8013e7e:	42a2      	cmp	r2, r4
 8013e80:	bf0c      	ite	eq
 8013e82:	600b      	streq	r3, [r1, #0]
 8013e84:	6053      	strne	r3, [r2, #4]
 8013e86:	4630      	mov	r0, r6
 8013e88:	f000 ffde 	bl	8014e48 <__malloc_unlock>
 8013e8c:	f104 000b 	add.w	r0, r4, #11
 8013e90:	1d23      	adds	r3, r4, #4
 8013e92:	f020 0007 	bic.w	r0, r0, #7
 8013e96:	1ac2      	subs	r2, r0, r3
 8013e98:	d0cc      	beq.n	8013e34 <_malloc_r+0x20>
 8013e9a:	1a1b      	subs	r3, r3, r0
 8013e9c:	50a3      	str	r3, [r4, r2]
 8013e9e:	e7c9      	b.n	8013e34 <_malloc_r+0x20>
 8013ea0:	4622      	mov	r2, r4
 8013ea2:	6864      	ldr	r4, [r4, #4]
 8013ea4:	e7cc      	b.n	8013e40 <_malloc_r+0x2c>
 8013ea6:	1cc4      	adds	r4, r0, #3
 8013ea8:	f024 0403 	bic.w	r4, r4, #3
 8013eac:	42a0      	cmp	r0, r4
 8013eae:	d0e3      	beq.n	8013e78 <_malloc_r+0x64>
 8013eb0:	1a21      	subs	r1, r4, r0
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	f000 fc9c 	bl	80147f0 <_sbrk_r>
 8013eb8:	3001      	adds	r0, #1
 8013eba:	d1dd      	bne.n	8013e78 <_malloc_r+0x64>
 8013ebc:	e7cf      	b.n	8013e5e <_malloc_r+0x4a>
 8013ebe:	bf00      	nop
 8013ec0:	200004fc 	.word	0x200004fc
 8013ec4:	20000500 	.word	0x20000500

08013ec8 <__ssputs_r>:
 8013ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ecc:	688e      	ldr	r6, [r1, #8]
 8013ece:	429e      	cmp	r6, r3
 8013ed0:	4682      	mov	sl, r0
 8013ed2:	460c      	mov	r4, r1
 8013ed4:	4690      	mov	r8, r2
 8013ed6:	461f      	mov	r7, r3
 8013ed8:	d838      	bhi.n	8013f4c <__ssputs_r+0x84>
 8013eda:	898a      	ldrh	r2, [r1, #12]
 8013edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ee0:	d032      	beq.n	8013f48 <__ssputs_r+0x80>
 8013ee2:	6825      	ldr	r5, [r4, #0]
 8013ee4:	6909      	ldr	r1, [r1, #16]
 8013ee6:	eba5 0901 	sub.w	r9, r5, r1
 8013eea:	6965      	ldr	r5, [r4, #20]
 8013eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	444b      	add	r3, r9
 8013ef8:	106d      	asrs	r5, r5, #1
 8013efa:	429d      	cmp	r5, r3
 8013efc:	bf38      	it	cc
 8013efe:	461d      	movcc	r5, r3
 8013f00:	0553      	lsls	r3, r2, #21
 8013f02:	d531      	bpl.n	8013f68 <__ssputs_r+0xa0>
 8013f04:	4629      	mov	r1, r5
 8013f06:	f7ff ff85 	bl	8013e14 <_malloc_r>
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	b950      	cbnz	r0, 8013f24 <__ssputs_r+0x5c>
 8013f0e:	230c      	movs	r3, #12
 8013f10:	f8ca 3000 	str.w	r3, [sl]
 8013f14:	89a3      	ldrh	r3, [r4, #12]
 8013f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f1a:	81a3      	strh	r3, [r4, #12]
 8013f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f24:	6921      	ldr	r1, [r4, #16]
 8013f26:	464a      	mov	r2, r9
 8013f28:	f7fc f9fa 	bl	8010320 <memcpy>
 8013f2c:	89a3      	ldrh	r3, [r4, #12]
 8013f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f36:	81a3      	strh	r3, [r4, #12]
 8013f38:	6126      	str	r6, [r4, #16]
 8013f3a:	6165      	str	r5, [r4, #20]
 8013f3c:	444e      	add	r6, r9
 8013f3e:	eba5 0509 	sub.w	r5, r5, r9
 8013f42:	6026      	str	r6, [r4, #0]
 8013f44:	60a5      	str	r5, [r4, #8]
 8013f46:	463e      	mov	r6, r7
 8013f48:	42be      	cmp	r6, r7
 8013f4a:	d900      	bls.n	8013f4e <__ssputs_r+0x86>
 8013f4c:	463e      	mov	r6, r7
 8013f4e:	4632      	mov	r2, r6
 8013f50:	6820      	ldr	r0, [r4, #0]
 8013f52:	4641      	mov	r1, r8
 8013f54:	f000 ff58 	bl	8014e08 <memmove>
 8013f58:	68a3      	ldr	r3, [r4, #8]
 8013f5a:	6822      	ldr	r2, [r4, #0]
 8013f5c:	1b9b      	subs	r3, r3, r6
 8013f5e:	4432      	add	r2, r6
 8013f60:	60a3      	str	r3, [r4, #8]
 8013f62:	6022      	str	r2, [r4, #0]
 8013f64:	2000      	movs	r0, #0
 8013f66:	e7db      	b.n	8013f20 <__ssputs_r+0x58>
 8013f68:	462a      	mov	r2, r5
 8013f6a:	f000 ff73 	bl	8014e54 <_realloc_r>
 8013f6e:	4606      	mov	r6, r0
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d1e1      	bne.n	8013f38 <__ssputs_r+0x70>
 8013f74:	6921      	ldr	r1, [r4, #16]
 8013f76:	4650      	mov	r0, sl
 8013f78:	f7ff fefc 	bl	8013d74 <_free_r>
 8013f7c:	e7c7      	b.n	8013f0e <__ssputs_r+0x46>
	...

08013f80 <_svfiprintf_r>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	4698      	mov	r8, r3
 8013f86:	898b      	ldrh	r3, [r1, #12]
 8013f88:	061b      	lsls	r3, r3, #24
 8013f8a:	b09d      	sub	sp, #116	; 0x74
 8013f8c:	4607      	mov	r7, r0
 8013f8e:	460d      	mov	r5, r1
 8013f90:	4614      	mov	r4, r2
 8013f92:	d50e      	bpl.n	8013fb2 <_svfiprintf_r+0x32>
 8013f94:	690b      	ldr	r3, [r1, #16]
 8013f96:	b963      	cbnz	r3, 8013fb2 <_svfiprintf_r+0x32>
 8013f98:	2140      	movs	r1, #64	; 0x40
 8013f9a:	f7ff ff3b 	bl	8013e14 <_malloc_r>
 8013f9e:	6028      	str	r0, [r5, #0]
 8013fa0:	6128      	str	r0, [r5, #16]
 8013fa2:	b920      	cbnz	r0, 8013fae <_svfiprintf_r+0x2e>
 8013fa4:	230c      	movs	r3, #12
 8013fa6:	603b      	str	r3, [r7, #0]
 8013fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fac:	e0d1      	b.n	8014152 <_svfiprintf_r+0x1d2>
 8013fae:	2340      	movs	r3, #64	; 0x40
 8013fb0:	616b      	str	r3, [r5, #20]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fb6:	2320      	movs	r3, #32
 8013fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fc0:	2330      	movs	r3, #48	; 0x30
 8013fc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801416c <_svfiprintf_r+0x1ec>
 8013fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fca:	f04f 0901 	mov.w	r9, #1
 8013fce:	4623      	mov	r3, r4
 8013fd0:	469a      	mov	sl, r3
 8013fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fd6:	b10a      	cbz	r2, 8013fdc <_svfiprintf_r+0x5c>
 8013fd8:	2a25      	cmp	r2, #37	; 0x25
 8013fda:	d1f9      	bne.n	8013fd0 <_svfiprintf_r+0x50>
 8013fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8013fe0:	d00b      	beq.n	8013ffa <_svfiprintf_r+0x7a>
 8013fe2:	465b      	mov	r3, fp
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	4629      	mov	r1, r5
 8013fe8:	4638      	mov	r0, r7
 8013fea:	f7ff ff6d 	bl	8013ec8 <__ssputs_r>
 8013fee:	3001      	adds	r0, #1
 8013ff0:	f000 80aa 	beq.w	8014148 <_svfiprintf_r+0x1c8>
 8013ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ff6:	445a      	add	r2, fp
 8013ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8013ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 80a2 	beq.w	8014148 <_svfiprintf_r+0x1c8>
 8014004:	2300      	movs	r3, #0
 8014006:	f04f 32ff 	mov.w	r2, #4294967295
 801400a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801400e:	f10a 0a01 	add.w	sl, sl, #1
 8014012:	9304      	str	r3, [sp, #16]
 8014014:	9307      	str	r3, [sp, #28]
 8014016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801401a:	931a      	str	r3, [sp, #104]	; 0x68
 801401c:	4654      	mov	r4, sl
 801401e:	2205      	movs	r2, #5
 8014020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014024:	4851      	ldr	r0, [pc, #324]	; (801416c <_svfiprintf_r+0x1ec>)
 8014026:	f7ec f8e3 	bl	80001f0 <memchr>
 801402a:	9a04      	ldr	r2, [sp, #16]
 801402c:	b9d8      	cbnz	r0, 8014066 <_svfiprintf_r+0xe6>
 801402e:	06d0      	lsls	r0, r2, #27
 8014030:	bf44      	itt	mi
 8014032:	2320      	movmi	r3, #32
 8014034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014038:	0711      	lsls	r1, r2, #28
 801403a:	bf44      	itt	mi
 801403c:	232b      	movmi	r3, #43	; 0x2b
 801403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014042:	f89a 3000 	ldrb.w	r3, [sl]
 8014046:	2b2a      	cmp	r3, #42	; 0x2a
 8014048:	d015      	beq.n	8014076 <_svfiprintf_r+0xf6>
 801404a:	9a07      	ldr	r2, [sp, #28]
 801404c:	4654      	mov	r4, sl
 801404e:	2000      	movs	r0, #0
 8014050:	f04f 0c0a 	mov.w	ip, #10
 8014054:	4621      	mov	r1, r4
 8014056:	f811 3b01 	ldrb.w	r3, [r1], #1
 801405a:	3b30      	subs	r3, #48	; 0x30
 801405c:	2b09      	cmp	r3, #9
 801405e:	d94e      	bls.n	80140fe <_svfiprintf_r+0x17e>
 8014060:	b1b0      	cbz	r0, 8014090 <_svfiprintf_r+0x110>
 8014062:	9207      	str	r2, [sp, #28]
 8014064:	e014      	b.n	8014090 <_svfiprintf_r+0x110>
 8014066:	eba0 0308 	sub.w	r3, r0, r8
 801406a:	fa09 f303 	lsl.w	r3, r9, r3
 801406e:	4313      	orrs	r3, r2
 8014070:	9304      	str	r3, [sp, #16]
 8014072:	46a2      	mov	sl, r4
 8014074:	e7d2      	b.n	801401c <_svfiprintf_r+0x9c>
 8014076:	9b03      	ldr	r3, [sp, #12]
 8014078:	1d19      	adds	r1, r3, #4
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	9103      	str	r1, [sp, #12]
 801407e:	2b00      	cmp	r3, #0
 8014080:	bfbb      	ittet	lt
 8014082:	425b      	neglt	r3, r3
 8014084:	f042 0202 	orrlt.w	r2, r2, #2
 8014088:	9307      	strge	r3, [sp, #28]
 801408a:	9307      	strlt	r3, [sp, #28]
 801408c:	bfb8      	it	lt
 801408e:	9204      	strlt	r2, [sp, #16]
 8014090:	7823      	ldrb	r3, [r4, #0]
 8014092:	2b2e      	cmp	r3, #46	; 0x2e
 8014094:	d10c      	bne.n	80140b0 <_svfiprintf_r+0x130>
 8014096:	7863      	ldrb	r3, [r4, #1]
 8014098:	2b2a      	cmp	r3, #42	; 0x2a
 801409a:	d135      	bne.n	8014108 <_svfiprintf_r+0x188>
 801409c:	9b03      	ldr	r3, [sp, #12]
 801409e:	1d1a      	adds	r2, r3, #4
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	9203      	str	r2, [sp, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	bfb8      	it	lt
 80140a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80140ac:	3402      	adds	r4, #2
 80140ae:	9305      	str	r3, [sp, #20]
 80140b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801417c <_svfiprintf_r+0x1fc>
 80140b4:	7821      	ldrb	r1, [r4, #0]
 80140b6:	2203      	movs	r2, #3
 80140b8:	4650      	mov	r0, sl
 80140ba:	f7ec f899 	bl	80001f0 <memchr>
 80140be:	b140      	cbz	r0, 80140d2 <_svfiprintf_r+0x152>
 80140c0:	2340      	movs	r3, #64	; 0x40
 80140c2:	eba0 000a 	sub.w	r0, r0, sl
 80140c6:	fa03 f000 	lsl.w	r0, r3, r0
 80140ca:	9b04      	ldr	r3, [sp, #16]
 80140cc:	4303      	orrs	r3, r0
 80140ce:	3401      	adds	r4, #1
 80140d0:	9304      	str	r3, [sp, #16]
 80140d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140d6:	4826      	ldr	r0, [pc, #152]	; (8014170 <_svfiprintf_r+0x1f0>)
 80140d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140dc:	2206      	movs	r2, #6
 80140de:	f7ec f887 	bl	80001f0 <memchr>
 80140e2:	2800      	cmp	r0, #0
 80140e4:	d038      	beq.n	8014158 <_svfiprintf_r+0x1d8>
 80140e6:	4b23      	ldr	r3, [pc, #140]	; (8014174 <_svfiprintf_r+0x1f4>)
 80140e8:	bb1b      	cbnz	r3, 8014132 <_svfiprintf_r+0x1b2>
 80140ea:	9b03      	ldr	r3, [sp, #12]
 80140ec:	3307      	adds	r3, #7
 80140ee:	f023 0307 	bic.w	r3, r3, #7
 80140f2:	3308      	adds	r3, #8
 80140f4:	9303      	str	r3, [sp, #12]
 80140f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f8:	4433      	add	r3, r6
 80140fa:	9309      	str	r3, [sp, #36]	; 0x24
 80140fc:	e767      	b.n	8013fce <_svfiprintf_r+0x4e>
 80140fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014102:	460c      	mov	r4, r1
 8014104:	2001      	movs	r0, #1
 8014106:	e7a5      	b.n	8014054 <_svfiprintf_r+0xd4>
 8014108:	2300      	movs	r3, #0
 801410a:	3401      	adds	r4, #1
 801410c:	9305      	str	r3, [sp, #20]
 801410e:	4619      	mov	r1, r3
 8014110:	f04f 0c0a 	mov.w	ip, #10
 8014114:	4620      	mov	r0, r4
 8014116:	f810 2b01 	ldrb.w	r2, [r0], #1
 801411a:	3a30      	subs	r2, #48	; 0x30
 801411c:	2a09      	cmp	r2, #9
 801411e:	d903      	bls.n	8014128 <_svfiprintf_r+0x1a8>
 8014120:	2b00      	cmp	r3, #0
 8014122:	d0c5      	beq.n	80140b0 <_svfiprintf_r+0x130>
 8014124:	9105      	str	r1, [sp, #20]
 8014126:	e7c3      	b.n	80140b0 <_svfiprintf_r+0x130>
 8014128:	fb0c 2101 	mla	r1, ip, r1, r2
 801412c:	4604      	mov	r4, r0
 801412e:	2301      	movs	r3, #1
 8014130:	e7f0      	b.n	8014114 <_svfiprintf_r+0x194>
 8014132:	ab03      	add	r3, sp, #12
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	462a      	mov	r2, r5
 8014138:	4b0f      	ldr	r3, [pc, #60]	; (8014178 <_svfiprintf_r+0x1f8>)
 801413a:	a904      	add	r1, sp, #16
 801413c:	4638      	mov	r0, r7
 801413e:	f7fc f9a5 	bl	801048c <_printf_float>
 8014142:	1c42      	adds	r2, r0, #1
 8014144:	4606      	mov	r6, r0
 8014146:	d1d6      	bne.n	80140f6 <_svfiprintf_r+0x176>
 8014148:	89ab      	ldrh	r3, [r5, #12]
 801414a:	065b      	lsls	r3, r3, #25
 801414c:	f53f af2c 	bmi.w	8013fa8 <_svfiprintf_r+0x28>
 8014150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014152:	b01d      	add	sp, #116	; 0x74
 8014154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014158:	ab03      	add	r3, sp, #12
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	462a      	mov	r2, r5
 801415e:	4b06      	ldr	r3, [pc, #24]	; (8014178 <_svfiprintf_r+0x1f8>)
 8014160:	a904      	add	r1, sp, #16
 8014162:	4638      	mov	r0, r7
 8014164:	f7fc fc36 	bl	80109d4 <_printf_i>
 8014168:	e7eb      	b.n	8014142 <_svfiprintf_r+0x1c2>
 801416a:	bf00      	nop
 801416c:	080176e4 	.word	0x080176e4
 8014170:	080176ee 	.word	0x080176ee
 8014174:	0801048d 	.word	0x0801048d
 8014178:	08013ec9 	.word	0x08013ec9
 801417c:	080176ea 	.word	0x080176ea

08014180 <_sungetc_r>:
 8014180:	b538      	push	{r3, r4, r5, lr}
 8014182:	1c4b      	adds	r3, r1, #1
 8014184:	4614      	mov	r4, r2
 8014186:	d103      	bne.n	8014190 <_sungetc_r+0x10>
 8014188:	f04f 35ff 	mov.w	r5, #4294967295
 801418c:	4628      	mov	r0, r5
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	8993      	ldrh	r3, [r2, #12]
 8014192:	f023 0320 	bic.w	r3, r3, #32
 8014196:	8193      	strh	r3, [r2, #12]
 8014198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801419a:	6852      	ldr	r2, [r2, #4]
 801419c:	b2cd      	uxtb	r5, r1
 801419e:	b18b      	cbz	r3, 80141c4 <_sungetc_r+0x44>
 80141a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80141a2:	4293      	cmp	r3, r2
 80141a4:	dd08      	ble.n	80141b8 <_sungetc_r+0x38>
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	1e5a      	subs	r2, r3, #1
 80141aa:	6022      	str	r2, [r4, #0]
 80141ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80141b0:	6863      	ldr	r3, [r4, #4]
 80141b2:	3301      	adds	r3, #1
 80141b4:	6063      	str	r3, [r4, #4]
 80141b6:	e7e9      	b.n	801418c <_sungetc_r+0xc>
 80141b8:	4621      	mov	r1, r4
 80141ba:	f000 fbf3 	bl	80149a4 <__submore>
 80141be:	2800      	cmp	r0, #0
 80141c0:	d0f1      	beq.n	80141a6 <_sungetc_r+0x26>
 80141c2:	e7e1      	b.n	8014188 <_sungetc_r+0x8>
 80141c4:	6921      	ldr	r1, [r4, #16]
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	b151      	cbz	r1, 80141e0 <_sungetc_r+0x60>
 80141ca:	4299      	cmp	r1, r3
 80141cc:	d208      	bcs.n	80141e0 <_sungetc_r+0x60>
 80141ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80141d2:	42a9      	cmp	r1, r5
 80141d4:	d104      	bne.n	80141e0 <_sungetc_r+0x60>
 80141d6:	3b01      	subs	r3, #1
 80141d8:	3201      	adds	r2, #1
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	6062      	str	r2, [r4, #4]
 80141de:	e7d5      	b.n	801418c <_sungetc_r+0xc>
 80141e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80141e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141e8:	6363      	str	r3, [r4, #52]	; 0x34
 80141ea:	2303      	movs	r3, #3
 80141ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80141ee:	4623      	mov	r3, r4
 80141f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80141f4:	6023      	str	r3, [r4, #0]
 80141f6:	2301      	movs	r3, #1
 80141f8:	e7dc      	b.n	80141b4 <_sungetc_r+0x34>

080141fa <__ssrefill_r>:
 80141fa:	b510      	push	{r4, lr}
 80141fc:	460c      	mov	r4, r1
 80141fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014200:	b169      	cbz	r1, 801421e <__ssrefill_r+0x24>
 8014202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014206:	4299      	cmp	r1, r3
 8014208:	d001      	beq.n	801420e <__ssrefill_r+0x14>
 801420a:	f7ff fdb3 	bl	8013d74 <_free_r>
 801420e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014210:	6063      	str	r3, [r4, #4]
 8014212:	2000      	movs	r0, #0
 8014214:	6360      	str	r0, [r4, #52]	; 0x34
 8014216:	b113      	cbz	r3, 801421e <__ssrefill_r+0x24>
 8014218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	bd10      	pop	{r4, pc}
 801421e:	6923      	ldr	r3, [r4, #16]
 8014220:	6023      	str	r3, [r4, #0]
 8014222:	2300      	movs	r3, #0
 8014224:	6063      	str	r3, [r4, #4]
 8014226:	89a3      	ldrh	r3, [r4, #12]
 8014228:	f043 0320 	orr.w	r3, r3, #32
 801422c:	81a3      	strh	r3, [r4, #12]
 801422e:	f04f 30ff 	mov.w	r0, #4294967295
 8014232:	e7f3      	b.n	801421c <__ssrefill_r+0x22>

08014234 <__ssvfiscanf_r>:
 8014234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014238:	460c      	mov	r4, r1
 801423a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801423e:	2100      	movs	r1, #0
 8014240:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014244:	49b2      	ldr	r1, [pc, #712]	; (8014510 <__ssvfiscanf_r+0x2dc>)
 8014246:	91a0      	str	r1, [sp, #640]	; 0x280
 8014248:	f10d 0804 	add.w	r8, sp, #4
 801424c:	49b1      	ldr	r1, [pc, #708]	; (8014514 <__ssvfiscanf_r+0x2e0>)
 801424e:	4fb2      	ldr	r7, [pc, #712]	; (8014518 <__ssvfiscanf_r+0x2e4>)
 8014250:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801451c <__ssvfiscanf_r+0x2e8>
 8014254:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014258:	4606      	mov	r6, r0
 801425a:	91a1      	str	r1, [sp, #644]	; 0x284
 801425c:	9300      	str	r3, [sp, #0]
 801425e:	f892 a000 	ldrb.w	sl, [r2]
 8014262:	f1ba 0f00 	cmp.w	sl, #0
 8014266:	f000 8151 	beq.w	801450c <__ssvfiscanf_r+0x2d8>
 801426a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801426e:	f013 0308 	ands.w	r3, r3, #8
 8014272:	f102 0501 	add.w	r5, r2, #1
 8014276:	d019      	beq.n	80142ac <__ssvfiscanf_r+0x78>
 8014278:	6863      	ldr	r3, [r4, #4]
 801427a:	2b00      	cmp	r3, #0
 801427c:	dd0f      	ble.n	801429e <__ssvfiscanf_r+0x6a>
 801427e:	6823      	ldr	r3, [r4, #0]
 8014280:	781a      	ldrb	r2, [r3, #0]
 8014282:	5cba      	ldrb	r2, [r7, r2]
 8014284:	0712      	lsls	r2, r2, #28
 8014286:	d401      	bmi.n	801428c <__ssvfiscanf_r+0x58>
 8014288:	462a      	mov	r2, r5
 801428a:	e7e8      	b.n	801425e <__ssvfiscanf_r+0x2a>
 801428c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801428e:	3201      	adds	r2, #1
 8014290:	9245      	str	r2, [sp, #276]	; 0x114
 8014292:	6862      	ldr	r2, [r4, #4]
 8014294:	3301      	adds	r3, #1
 8014296:	3a01      	subs	r2, #1
 8014298:	6062      	str	r2, [r4, #4]
 801429a:	6023      	str	r3, [r4, #0]
 801429c:	e7ec      	b.n	8014278 <__ssvfiscanf_r+0x44>
 801429e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80142a0:	4621      	mov	r1, r4
 80142a2:	4630      	mov	r0, r6
 80142a4:	4798      	blx	r3
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d0e9      	beq.n	801427e <__ssvfiscanf_r+0x4a>
 80142aa:	e7ed      	b.n	8014288 <__ssvfiscanf_r+0x54>
 80142ac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80142b0:	f040 8083 	bne.w	80143ba <__ssvfiscanf_r+0x186>
 80142b4:	9341      	str	r3, [sp, #260]	; 0x104
 80142b6:	9343      	str	r3, [sp, #268]	; 0x10c
 80142b8:	7853      	ldrb	r3, [r2, #1]
 80142ba:	2b2a      	cmp	r3, #42	; 0x2a
 80142bc:	bf02      	ittt	eq
 80142be:	2310      	moveq	r3, #16
 80142c0:	1c95      	addeq	r5, r2, #2
 80142c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80142c4:	220a      	movs	r2, #10
 80142c6:	46ab      	mov	fp, r5
 80142c8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80142cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80142d0:	2b09      	cmp	r3, #9
 80142d2:	d91d      	bls.n	8014310 <__ssvfiscanf_r+0xdc>
 80142d4:	4891      	ldr	r0, [pc, #580]	; (801451c <__ssvfiscanf_r+0x2e8>)
 80142d6:	2203      	movs	r2, #3
 80142d8:	f7eb ff8a 	bl	80001f0 <memchr>
 80142dc:	b140      	cbz	r0, 80142f0 <__ssvfiscanf_r+0xbc>
 80142de:	2301      	movs	r3, #1
 80142e0:	eba0 0009 	sub.w	r0, r0, r9
 80142e4:	fa03 f000 	lsl.w	r0, r3, r0
 80142e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80142ea:	4318      	orrs	r0, r3
 80142ec:	9041      	str	r0, [sp, #260]	; 0x104
 80142ee:	465d      	mov	r5, fp
 80142f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80142f4:	2b78      	cmp	r3, #120	; 0x78
 80142f6:	d806      	bhi.n	8014306 <__ssvfiscanf_r+0xd2>
 80142f8:	2b57      	cmp	r3, #87	; 0x57
 80142fa:	d810      	bhi.n	801431e <__ssvfiscanf_r+0xea>
 80142fc:	2b25      	cmp	r3, #37	; 0x25
 80142fe:	d05c      	beq.n	80143ba <__ssvfiscanf_r+0x186>
 8014300:	d856      	bhi.n	80143b0 <__ssvfiscanf_r+0x17c>
 8014302:	2b00      	cmp	r3, #0
 8014304:	d074      	beq.n	80143f0 <__ssvfiscanf_r+0x1bc>
 8014306:	2303      	movs	r3, #3
 8014308:	9347      	str	r3, [sp, #284]	; 0x11c
 801430a:	230a      	movs	r3, #10
 801430c:	9342      	str	r3, [sp, #264]	; 0x108
 801430e:	e081      	b.n	8014414 <__ssvfiscanf_r+0x1e0>
 8014310:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014312:	fb02 1303 	mla	r3, r2, r3, r1
 8014316:	3b30      	subs	r3, #48	; 0x30
 8014318:	9343      	str	r3, [sp, #268]	; 0x10c
 801431a:	465d      	mov	r5, fp
 801431c:	e7d3      	b.n	80142c6 <__ssvfiscanf_r+0x92>
 801431e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014322:	2a20      	cmp	r2, #32
 8014324:	d8ef      	bhi.n	8014306 <__ssvfiscanf_r+0xd2>
 8014326:	a101      	add	r1, pc, #4	; (adr r1, 801432c <__ssvfiscanf_r+0xf8>)
 8014328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801432c:	080143ff 	.word	0x080143ff
 8014330:	08014307 	.word	0x08014307
 8014334:	08014307 	.word	0x08014307
 8014338:	0801445d 	.word	0x0801445d
 801433c:	08014307 	.word	0x08014307
 8014340:	08014307 	.word	0x08014307
 8014344:	08014307 	.word	0x08014307
 8014348:	08014307 	.word	0x08014307
 801434c:	08014307 	.word	0x08014307
 8014350:	08014307 	.word	0x08014307
 8014354:	08014307 	.word	0x08014307
 8014358:	08014473 	.word	0x08014473
 801435c:	08014449 	.word	0x08014449
 8014360:	080143b7 	.word	0x080143b7
 8014364:	080143b7 	.word	0x080143b7
 8014368:	080143b7 	.word	0x080143b7
 801436c:	08014307 	.word	0x08014307
 8014370:	0801444d 	.word	0x0801444d
 8014374:	08014307 	.word	0x08014307
 8014378:	08014307 	.word	0x08014307
 801437c:	08014307 	.word	0x08014307
 8014380:	08014307 	.word	0x08014307
 8014384:	08014483 	.word	0x08014483
 8014388:	08014455 	.word	0x08014455
 801438c:	080143f7 	.word	0x080143f7
 8014390:	08014307 	.word	0x08014307
 8014394:	08014307 	.word	0x08014307
 8014398:	0801447f 	.word	0x0801447f
 801439c:	08014307 	.word	0x08014307
 80143a0:	08014449 	.word	0x08014449
 80143a4:	08014307 	.word	0x08014307
 80143a8:	08014307 	.word	0x08014307
 80143ac:	080143ff 	.word	0x080143ff
 80143b0:	3b45      	subs	r3, #69	; 0x45
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d8a7      	bhi.n	8014306 <__ssvfiscanf_r+0xd2>
 80143b6:	2305      	movs	r3, #5
 80143b8:	e02b      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 80143ba:	6863      	ldr	r3, [r4, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	dd0d      	ble.n	80143dc <__ssvfiscanf_r+0x1a8>
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	781a      	ldrb	r2, [r3, #0]
 80143c4:	4552      	cmp	r2, sl
 80143c6:	f040 80a1 	bne.w	801450c <__ssvfiscanf_r+0x2d8>
 80143ca:	3301      	adds	r3, #1
 80143cc:	6862      	ldr	r2, [r4, #4]
 80143ce:	6023      	str	r3, [r4, #0]
 80143d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80143d2:	3a01      	subs	r2, #1
 80143d4:	3301      	adds	r3, #1
 80143d6:	6062      	str	r2, [r4, #4]
 80143d8:	9345      	str	r3, [sp, #276]	; 0x114
 80143da:	e755      	b.n	8014288 <__ssvfiscanf_r+0x54>
 80143dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143de:	4621      	mov	r1, r4
 80143e0:	4630      	mov	r0, r6
 80143e2:	4798      	blx	r3
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d0eb      	beq.n	80143c0 <__ssvfiscanf_r+0x18c>
 80143e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80143ea:	2800      	cmp	r0, #0
 80143ec:	f040 8084 	bne.w	80144f8 <__ssvfiscanf_r+0x2c4>
 80143f0:	f04f 30ff 	mov.w	r0, #4294967295
 80143f4:	e086      	b.n	8014504 <__ssvfiscanf_r+0x2d0>
 80143f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80143f8:	f042 0220 	orr.w	r2, r2, #32
 80143fc:	9241      	str	r2, [sp, #260]	; 0x104
 80143fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014404:	9241      	str	r2, [sp, #260]	; 0x104
 8014406:	2210      	movs	r2, #16
 8014408:	2b6f      	cmp	r3, #111	; 0x6f
 801440a:	9242      	str	r2, [sp, #264]	; 0x108
 801440c:	bf34      	ite	cc
 801440e:	2303      	movcc	r3, #3
 8014410:	2304      	movcs	r3, #4
 8014412:	9347      	str	r3, [sp, #284]	; 0x11c
 8014414:	6863      	ldr	r3, [r4, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	dd41      	ble.n	801449e <__ssvfiscanf_r+0x26a>
 801441a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801441c:	0659      	lsls	r1, r3, #25
 801441e:	d404      	bmi.n	801442a <__ssvfiscanf_r+0x1f6>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	781a      	ldrb	r2, [r3, #0]
 8014424:	5cba      	ldrb	r2, [r7, r2]
 8014426:	0712      	lsls	r2, r2, #28
 8014428:	d440      	bmi.n	80144ac <__ssvfiscanf_r+0x278>
 801442a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801442c:	2b02      	cmp	r3, #2
 801442e:	dc4f      	bgt.n	80144d0 <__ssvfiscanf_r+0x29c>
 8014430:	466b      	mov	r3, sp
 8014432:	4622      	mov	r2, r4
 8014434:	a941      	add	r1, sp, #260	; 0x104
 8014436:	4630      	mov	r0, r6
 8014438:	f000 f874 	bl	8014524 <_scanf_chars>
 801443c:	2801      	cmp	r0, #1
 801443e:	d065      	beq.n	801450c <__ssvfiscanf_r+0x2d8>
 8014440:	2802      	cmp	r0, #2
 8014442:	f47f af21 	bne.w	8014288 <__ssvfiscanf_r+0x54>
 8014446:	e7cf      	b.n	80143e8 <__ssvfiscanf_r+0x1b4>
 8014448:	220a      	movs	r2, #10
 801444a:	e7dd      	b.n	8014408 <__ssvfiscanf_r+0x1d4>
 801444c:	2300      	movs	r3, #0
 801444e:	9342      	str	r3, [sp, #264]	; 0x108
 8014450:	2303      	movs	r3, #3
 8014452:	e7de      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 8014454:	2308      	movs	r3, #8
 8014456:	9342      	str	r3, [sp, #264]	; 0x108
 8014458:	2304      	movs	r3, #4
 801445a:	e7da      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 801445c:	4629      	mov	r1, r5
 801445e:	4640      	mov	r0, r8
 8014460:	f000 f9d6 	bl	8014810 <__sccl>
 8014464:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801446a:	9341      	str	r3, [sp, #260]	; 0x104
 801446c:	4605      	mov	r5, r0
 801446e:	2301      	movs	r3, #1
 8014470:	e7cf      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 8014472:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014478:	9341      	str	r3, [sp, #260]	; 0x104
 801447a:	2300      	movs	r3, #0
 801447c:	e7c9      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 801447e:	2302      	movs	r3, #2
 8014480:	e7c7      	b.n	8014412 <__ssvfiscanf_r+0x1de>
 8014482:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014484:	06c3      	lsls	r3, r0, #27
 8014486:	f53f aeff 	bmi.w	8014288 <__ssvfiscanf_r+0x54>
 801448a:	9b00      	ldr	r3, [sp, #0]
 801448c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801448e:	1d19      	adds	r1, r3, #4
 8014490:	9100      	str	r1, [sp, #0]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	07c0      	lsls	r0, r0, #31
 8014496:	bf4c      	ite	mi
 8014498:	801a      	strhmi	r2, [r3, #0]
 801449a:	601a      	strpl	r2, [r3, #0]
 801449c:	e6f4      	b.n	8014288 <__ssvfiscanf_r+0x54>
 801449e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144a0:	4621      	mov	r1, r4
 80144a2:	4630      	mov	r0, r6
 80144a4:	4798      	blx	r3
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d0b7      	beq.n	801441a <__ssvfiscanf_r+0x1e6>
 80144aa:	e79d      	b.n	80143e8 <__ssvfiscanf_r+0x1b4>
 80144ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80144ae:	3201      	adds	r2, #1
 80144b0:	9245      	str	r2, [sp, #276]	; 0x114
 80144b2:	6862      	ldr	r2, [r4, #4]
 80144b4:	3a01      	subs	r2, #1
 80144b6:	2a00      	cmp	r2, #0
 80144b8:	6062      	str	r2, [r4, #4]
 80144ba:	dd02      	ble.n	80144c2 <__ssvfiscanf_r+0x28e>
 80144bc:	3301      	adds	r3, #1
 80144be:	6023      	str	r3, [r4, #0]
 80144c0:	e7ae      	b.n	8014420 <__ssvfiscanf_r+0x1ec>
 80144c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144c4:	4621      	mov	r1, r4
 80144c6:	4630      	mov	r0, r6
 80144c8:	4798      	blx	r3
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d0a8      	beq.n	8014420 <__ssvfiscanf_r+0x1ec>
 80144ce:	e78b      	b.n	80143e8 <__ssvfiscanf_r+0x1b4>
 80144d0:	2b04      	cmp	r3, #4
 80144d2:	dc06      	bgt.n	80144e2 <__ssvfiscanf_r+0x2ae>
 80144d4:	466b      	mov	r3, sp
 80144d6:	4622      	mov	r2, r4
 80144d8:	a941      	add	r1, sp, #260	; 0x104
 80144da:	4630      	mov	r0, r6
 80144dc:	f000 f87a 	bl	80145d4 <_scanf_i>
 80144e0:	e7ac      	b.n	801443c <__ssvfiscanf_r+0x208>
 80144e2:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <__ssvfiscanf_r+0x2ec>)
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f43f aecf 	beq.w	8014288 <__ssvfiscanf_r+0x54>
 80144ea:	466b      	mov	r3, sp
 80144ec:	4622      	mov	r2, r4
 80144ee:	a941      	add	r1, sp, #260	; 0x104
 80144f0:	4630      	mov	r0, r6
 80144f2:	f7fc fb95 	bl	8010c20 <_scanf_float>
 80144f6:	e7a1      	b.n	801443c <__ssvfiscanf_r+0x208>
 80144f8:	89a3      	ldrh	r3, [r4, #12]
 80144fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80144fe:	bf18      	it	ne
 8014500:	f04f 30ff 	movne.w	r0, #4294967295
 8014504:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801450e:	e7f9      	b.n	8014504 <__ssvfiscanf_r+0x2d0>
 8014510:	08014181 	.word	0x08014181
 8014514:	080141fb 	.word	0x080141fb
 8014518:	08017371 	.word	0x08017371
 801451c:	080176ea 	.word	0x080176ea
 8014520:	08010c21 	.word	0x08010c21

08014524 <_scanf_chars>:
 8014524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014528:	4615      	mov	r5, r2
 801452a:	688a      	ldr	r2, [r1, #8]
 801452c:	4680      	mov	r8, r0
 801452e:	460c      	mov	r4, r1
 8014530:	b932      	cbnz	r2, 8014540 <_scanf_chars+0x1c>
 8014532:	698a      	ldr	r2, [r1, #24]
 8014534:	2a00      	cmp	r2, #0
 8014536:	bf0c      	ite	eq
 8014538:	2201      	moveq	r2, #1
 801453a:	f04f 32ff 	movne.w	r2, #4294967295
 801453e:	608a      	str	r2, [r1, #8]
 8014540:	6822      	ldr	r2, [r4, #0]
 8014542:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80145d0 <_scanf_chars+0xac>
 8014546:	06d1      	lsls	r1, r2, #27
 8014548:	bf5f      	itttt	pl
 801454a:	681a      	ldrpl	r2, [r3, #0]
 801454c:	1d11      	addpl	r1, r2, #4
 801454e:	6019      	strpl	r1, [r3, #0]
 8014550:	6816      	ldrpl	r6, [r2, #0]
 8014552:	2700      	movs	r7, #0
 8014554:	69a0      	ldr	r0, [r4, #24]
 8014556:	b188      	cbz	r0, 801457c <_scanf_chars+0x58>
 8014558:	2801      	cmp	r0, #1
 801455a:	d107      	bne.n	801456c <_scanf_chars+0x48>
 801455c:	682b      	ldr	r3, [r5, #0]
 801455e:	781a      	ldrb	r2, [r3, #0]
 8014560:	6963      	ldr	r3, [r4, #20]
 8014562:	5c9b      	ldrb	r3, [r3, r2]
 8014564:	b953      	cbnz	r3, 801457c <_scanf_chars+0x58>
 8014566:	bb27      	cbnz	r7, 80145b2 <_scanf_chars+0x8e>
 8014568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801456c:	2802      	cmp	r0, #2
 801456e:	d120      	bne.n	80145b2 <_scanf_chars+0x8e>
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014578:	071b      	lsls	r3, r3, #28
 801457a:	d41a      	bmi.n	80145b2 <_scanf_chars+0x8e>
 801457c:	6823      	ldr	r3, [r4, #0]
 801457e:	06da      	lsls	r2, r3, #27
 8014580:	bf5e      	ittt	pl
 8014582:	682b      	ldrpl	r3, [r5, #0]
 8014584:	781b      	ldrbpl	r3, [r3, #0]
 8014586:	f806 3b01 	strbpl.w	r3, [r6], #1
 801458a:	682a      	ldr	r2, [r5, #0]
 801458c:	686b      	ldr	r3, [r5, #4]
 801458e:	3201      	adds	r2, #1
 8014590:	602a      	str	r2, [r5, #0]
 8014592:	68a2      	ldr	r2, [r4, #8]
 8014594:	3b01      	subs	r3, #1
 8014596:	3a01      	subs	r2, #1
 8014598:	606b      	str	r3, [r5, #4]
 801459a:	3701      	adds	r7, #1
 801459c:	60a2      	str	r2, [r4, #8]
 801459e:	b142      	cbz	r2, 80145b2 <_scanf_chars+0x8e>
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dcd7      	bgt.n	8014554 <_scanf_chars+0x30>
 80145a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80145a8:	4629      	mov	r1, r5
 80145aa:	4640      	mov	r0, r8
 80145ac:	4798      	blx	r3
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d0d0      	beq.n	8014554 <_scanf_chars+0x30>
 80145b2:	6823      	ldr	r3, [r4, #0]
 80145b4:	f013 0310 	ands.w	r3, r3, #16
 80145b8:	d105      	bne.n	80145c6 <_scanf_chars+0xa2>
 80145ba:	68e2      	ldr	r2, [r4, #12]
 80145bc:	3201      	adds	r2, #1
 80145be:	60e2      	str	r2, [r4, #12]
 80145c0:	69a2      	ldr	r2, [r4, #24]
 80145c2:	b102      	cbz	r2, 80145c6 <_scanf_chars+0xa2>
 80145c4:	7033      	strb	r3, [r6, #0]
 80145c6:	6923      	ldr	r3, [r4, #16]
 80145c8:	441f      	add	r7, r3
 80145ca:	6127      	str	r7, [r4, #16]
 80145cc:	2000      	movs	r0, #0
 80145ce:	e7cb      	b.n	8014568 <_scanf_chars+0x44>
 80145d0:	08017371 	.word	0x08017371

080145d4 <_scanf_i>:
 80145d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d8:	4698      	mov	r8, r3
 80145da:	4b74      	ldr	r3, [pc, #464]	; (80147ac <_scanf_i+0x1d8>)
 80145dc:	460c      	mov	r4, r1
 80145de:	4682      	mov	sl, r0
 80145e0:	4616      	mov	r6, r2
 80145e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80145e6:	b087      	sub	sp, #28
 80145e8:	ab03      	add	r3, sp, #12
 80145ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80145ee:	4b70      	ldr	r3, [pc, #448]	; (80147b0 <_scanf_i+0x1dc>)
 80145f0:	69a1      	ldr	r1, [r4, #24]
 80145f2:	4a70      	ldr	r2, [pc, #448]	; (80147b4 <_scanf_i+0x1e0>)
 80145f4:	2903      	cmp	r1, #3
 80145f6:	bf18      	it	ne
 80145f8:	461a      	movne	r2, r3
 80145fa:	68a3      	ldr	r3, [r4, #8]
 80145fc:	9201      	str	r2, [sp, #4]
 80145fe:	1e5a      	subs	r2, r3, #1
 8014600:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014604:	bf88      	it	hi
 8014606:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801460a:	4627      	mov	r7, r4
 801460c:	bf82      	ittt	hi
 801460e:	eb03 0905 	addhi.w	r9, r3, r5
 8014612:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014616:	60a3      	strhi	r3, [r4, #8]
 8014618:	f857 3b1c 	ldr.w	r3, [r7], #28
 801461c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014620:	bf98      	it	ls
 8014622:	f04f 0900 	movls.w	r9, #0
 8014626:	6023      	str	r3, [r4, #0]
 8014628:	463d      	mov	r5, r7
 801462a:	f04f 0b00 	mov.w	fp, #0
 801462e:	6831      	ldr	r1, [r6, #0]
 8014630:	ab03      	add	r3, sp, #12
 8014632:	7809      	ldrb	r1, [r1, #0]
 8014634:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014638:	2202      	movs	r2, #2
 801463a:	f7eb fdd9 	bl	80001f0 <memchr>
 801463e:	b328      	cbz	r0, 801468c <_scanf_i+0xb8>
 8014640:	f1bb 0f01 	cmp.w	fp, #1
 8014644:	d159      	bne.n	80146fa <_scanf_i+0x126>
 8014646:	6862      	ldr	r2, [r4, #4]
 8014648:	b92a      	cbnz	r2, 8014656 <_scanf_i+0x82>
 801464a:	6822      	ldr	r2, [r4, #0]
 801464c:	2308      	movs	r3, #8
 801464e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014652:	6063      	str	r3, [r4, #4]
 8014654:	6022      	str	r2, [r4, #0]
 8014656:	6822      	ldr	r2, [r4, #0]
 8014658:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801465c:	6022      	str	r2, [r4, #0]
 801465e:	68a2      	ldr	r2, [r4, #8]
 8014660:	1e51      	subs	r1, r2, #1
 8014662:	60a1      	str	r1, [r4, #8]
 8014664:	b192      	cbz	r2, 801468c <_scanf_i+0xb8>
 8014666:	6832      	ldr	r2, [r6, #0]
 8014668:	1c51      	adds	r1, r2, #1
 801466a:	6031      	str	r1, [r6, #0]
 801466c:	7812      	ldrb	r2, [r2, #0]
 801466e:	f805 2b01 	strb.w	r2, [r5], #1
 8014672:	6872      	ldr	r2, [r6, #4]
 8014674:	3a01      	subs	r2, #1
 8014676:	2a00      	cmp	r2, #0
 8014678:	6072      	str	r2, [r6, #4]
 801467a:	dc07      	bgt.n	801468c <_scanf_i+0xb8>
 801467c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014680:	4631      	mov	r1, r6
 8014682:	4650      	mov	r0, sl
 8014684:	4790      	blx	r2
 8014686:	2800      	cmp	r0, #0
 8014688:	f040 8085 	bne.w	8014796 <_scanf_i+0x1c2>
 801468c:	f10b 0b01 	add.w	fp, fp, #1
 8014690:	f1bb 0f03 	cmp.w	fp, #3
 8014694:	d1cb      	bne.n	801462e <_scanf_i+0x5a>
 8014696:	6863      	ldr	r3, [r4, #4]
 8014698:	b90b      	cbnz	r3, 801469e <_scanf_i+0xca>
 801469a:	230a      	movs	r3, #10
 801469c:	6063      	str	r3, [r4, #4]
 801469e:	6863      	ldr	r3, [r4, #4]
 80146a0:	4945      	ldr	r1, [pc, #276]	; (80147b8 <_scanf_i+0x1e4>)
 80146a2:	6960      	ldr	r0, [r4, #20]
 80146a4:	1ac9      	subs	r1, r1, r3
 80146a6:	f000 f8b3 	bl	8014810 <__sccl>
 80146aa:	f04f 0b00 	mov.w	fp, #0
 80146ae:	68a3      	ldr	r3, [r4, #8]
 80146b0:	6822      	ldr	r2, [r4, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d03d      	beq.n	8014732 <_scanf_i+0x15e>
 80146b6:	6831      	ldr	r1, [r6, #0]
 80146b8:	6960      	ldr	r0, [r4, #20]
 80146ba:	f891 c000 	ldrb.w	ip, [r1]
 80146be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80146c2:	2800      	cmp	r0, #0
 80146c4:	d035      	beq.n	8014732 <_scanf_i+0x15e>
 80146c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80146ca:	d124      	bne.n	8014716 <_scanf_i+0x142>
 80146cc:	0510      	lsls	r0, r2, #20
 80146ce:	d522      	bpl.n	8014716 <_scanf_i+0x142>
 80146d0:	f10b 0b01 	add.w	fp, fp, #1
 80146d4:	f1b9 0f00 	cmp.w	r9, #0
 80146d8:	d003      	beq.n	80146e2 <_scanf_i+0x10e>
 80146da:	3301      	adds	r3, #1
 80146dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80146e0:	60a3      	str	r3, [r4, #8]
 80146e2:	6873      	ldr	r3, [r6, #4]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	6073      	str	r3, [r6, #4]
 80146ea:	dd1b      	ble.n	8014724 <_scanf_i+0x150>
 80146ec:	6833      	ldr	r3, [r6, #0]
 80146ee:	3301      	adds	r3, #1
 80146f0:	6033      	str	r3, [r6, #0]
 80146f2:	68a3      	ldr	r3, [r4, #8]
 80146f4:	3b01      	subs	r3, #1
 80146f6:	60a3      	str	r3, [r4, #8]
 80146f8:	e7d9      	b.n	80146ae <_scanf_i+0xda>
 80146fa:	f1bb 0f02 	cmp.w	fp, #2
 80146fe:	d1ae      	bne.n	801465e <_scanf_i+0x8a>
 8014700:	6822      	ldr	r2, [r4, #0]
 8014702:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014706:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801470a:	d1bf      	bne.n	801468c <_scanf_i+0xb8>
 801470c:	2310      	movs	r3, #16
 801470e:	6063      	str	r3, [r4, #4]
 8014710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014714:	e7a2      	b.n	801465c <_scanf_i+0x88>
 8014716:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801471a:	6022      	str	r2, [r4, #0]
 801471c:	780b      	ldrb	r3, [r1, #0]
 801471e:	f805 3b01 	strb.w	r3, [r5], #1
 8014722:	e7de      	b.n	80146e2 <_scanf_i+0x10e>
 8014724:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014728:	4631      	mov	r1, r6
 801472a:	4650      	mov	r0, sl
 801472c:	4798      	blx	r3
 801472e:	2800      	cmp	r0, #0
 8014730:	d0df      	beq.n	80146f2 <_scanf_i+0x11e>
 8014732:	6823      	ldr	r3, [r4, #0]
 8014734:	05d9      	lsls	r1, r3, #23
 8014736:	d50d      	bpl.n	8014754 <_scanf_i+0x180>
 8014738:	42bd      	cmp	r5, r7
 801473a:	d909      	bls.n	8014750 <_scanf_i+0x17c>
 801473c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014744:	4632      	mov	r2, r6
 8014746:	4650      	mov	r0, sl
 8014748:	4798      	blx	r3
 801474a:	f105 39ff 	add.w	r9, r5, #4294967295
 801474e:	464d      	mov	r5, r9
 8014750:	42bd      	cmp	r5, r7
 8014752:	d028      	beq.n	80147a6 <_scanf_i+0x1d2>
 8014754:	6822      	ldr	r2, [r4, #0]
 8014756:	f012 0210 	ands.w	r2, r2, #16
 801475a:	d113      	bne.n	8014784 <_scanf_i+0x1b0>
 801475c:	702a      	strb	r2, [r5, #0]
 801475e:	6863      	ldr	r3, [r4, #4]
 8014760:	9e01      	ldr	r6, [sp, #4]
 8014762:	4639      	mov	r1, r7
 8014764:	4650      	mov	r0, sl
 8014766:	47b0      	blx	r6
 8014768:	f8d8 3000 	ldr.w	r3, [r8]
 801476c:	6821      	ldr	r1, [r4, #0]
 801476e:	1d1a      	adds	r2, r3, #4
 8014770:	f8c8 2000 	str.w	r2, [r8]
 8014774:	f011 0f20 	tst.w	r1, #32
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	d00f      	beq.n	801479c <_scanf_i+0x1c8>
 801477c:	6018      	str	r0, [r3, #0]
 801477e:	68e3      	ldr	r3, [r4, #12]
 8014780:	3301      	adds	r3, #1
 8014782:	60e3      	str	r3, [r4, #12]
 8014784:	1bed      	subs	r5, r5, r7
 8014786:	44ab      	add	fp, r5
 8014788:	6925      	ldr	r5, [r4, #16]
 801478a:	445d      	add	r5, fp
 801478c:	6125      	str	r5, [r4, #16]
 801478e:	2000      	movs	r0, #0
 8014790:	b007      	add	sp, #28
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014796:	f04f 0b00 	mov.w	fp, #0
 801479a:	e7ca      	b.n	8014732 <_scanf_i+0x15e>
 801479c:	07ca      	lsls	r2, r1, #31
 801479e:	bf4c      	ite	mi
 80147a0:	8018      	strhmi	r0, [r3, #0]
 80147a2:	6018      	strpl	r0, [r3, #0]
 80147a4:	e7eb      	b.n	801477e <_scanf_i+0x1aa>
 80147a6:	2001      	movs	r0, #1
 80147a8:	e7f2      	b.n	8014790 <_scanf_i+0x1bc>
 80147aa:	bf00      	nop
 80147ac:	08016e78 	.word	0x08016e78
 80147b0:	080149a1 	.word	0x080149a1
 80147b4:	08011f69 	.word	0x08011f69
 80147b8:	0801770e 	.word	0x0801770e

080147bc <_read_r>:
 80147bc:	b538      	push	{r3, r4, r5, lr}
 80147be:	4d07      	ldr	r5, [pc, #28]	; (80147dc <_read_r+0x20>)
 80147c0:	4604      	mov	r4, r0
 80147c2:	4608      	mov	r0, r1
 80147c4:	4611      	mov	r1, r2
 80147c6:	2200      	movs	r2, #0
 80147c8:	602a      	str	r2, [r5, #0]
 80147ca:	461a      	mov	r2, r3
 80147cc:	f7f2 f966 	bl	8006a9c <_read>
 80147d0:	1c43      	adds	r3, r0, #1
 80147d2:	d102      	bne.n	80147da <_read_r+0x1e>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	b103      	cbz	r3, 80147da <_read_r+0x1e>
 80147d8:	6023      	str	r3, [r4, #0]
 80147da:	bd38      	pop	{r3, r4, r5, pc}
 80147dc:	20005240 	.word	0x20005240

080147e0 <nan>:
 80147e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80147e8 <nan+0x8>
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	00000000 	.word	0x00000000
 80147ec:	7ff80000 	.word	0x7ff80000

080147f0 <_sbrk_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d06      	ldr	r5, [pc, #24]	; (801480c <_sbrk_r+0x1c>)
 80147f4:	2300      	movs	r3, #0
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	602b      	str	r3, [r5, #0]
 80147fc:	f7f2 f9bc 	bl	8006b78 <_sbrk>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_sbrk_r+0x1a>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_sbrk_r+0x1a>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	20005240 	.word	0x20005240

08014810 <__sccl>:
 8014810:	b570      	push	{r4, r5, r6, lr}
 8014812:	780b      	ldrb	r3, [r1, #0]
 8014814:	4604      	mov	r4, r0
 8014816:	2b5e      	cmp	r3, #94	; 0x5e
 8014818:	bf0b      	itete	eq
 801481a:	784b      	ldrbeq	r3, [r1, #1]
 801481c:	1c48      	addne	r0, r1, #1
 801481e:	1c88      	addeq	r0, r1, #2
 8014820:	2200      	movne	r2, #0
 8014822:	bf08      	it	eq
 8014824:	2201      	moveq	r2, #1
 8014826:	1e61      	subs	r1, r4, #1
 8014828:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801482c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014830:	42a9      	cmp	r1, r5
 8014832:	d1fb      	bne.n	801482c <__sccl+0x1c>
 8014834:	b90b      	cbnz	r3, 801483a <__sccl+0x2a>
 8014836:	3801      	subs	r0, #1
 8014838:	bd70      	pop	{r4, r5, r6, pc}
 801483a:	f082 0101 	eor.w	r1, r2, #1
 801483e:	54e1      	strb	r1, [r4, r3]
 8014840:	1c42      	adds	r2, r0, #1
 8014842:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014846:	2d2d      	cmp	r5, #45	; 0x2d
 8014848:	f102 36ff 	add.w	r6, r2, #4294967295
 801484c:	4610      	mov	r0, r2
 801484e:	d006      	beq.n	801485e <__sccl+0x4e>
 8014850:	2d5d      	cmp	r5, #93	; 0x5d
 8014852:	d0f1      	beq.n	8014838 <__sccl+0x28>
 8014854:	b90d      	cbnz	r5, 801485a <__sccl+0x4a>
 8014856:	4630      	mov	r0, r6
 8014858:	e7ee      	b.n	8014838 <__sccl+0x28>
 801485a:	462b      	mov	r3, r5
 801485c:	e7ef      	b.n	801483e <__sccl+0x2e>
 801485e:	7816      	ldrb	r6, [r2, #0]
 8014860:	2e5d      	cmp	r6, #93	; 0x5d
 8014862:	d0fa      	beq.n	801485a <__sccl+0x4a>
 8014864:	42b3      	cmp	r3, r6
 8014866:	dcf8      	bgt.n	801485a <__sccl+0x4a>
 8014868:	4618      	mov	r0, r3
 801486a:	3001      	adds	r0, #1
 801486c:	4286      	cmp	r6, r0
 801486e:	5421      	strb	r1, [r4, r0]
 8014870:	dcfb      	bgt.n	801486a <__sccl+0x5a>
 8014872:	43d8      	mvns	r0, r3
 8014874:	4430      	add	r0, r6
 8014876:	1c5d      	adds	r5, r3, #1
 8014878:	42b3      	cmp	r3, r6
 801487a:	bfa8      	it	ge
 801487c:	2000      	movge	r0, #0
 801487e:	182b      	adds	r3, r5, r0
 8014880:	3202      	adds	r2, #2
 8014882:	e7de      	b.n	8014842 <__sccl+0x32>

08014884 <strncmp>:
 8014884:	b510      	push	{r4, lr}
 8014886:	b16a      	cbz	r2, 80148a4 <strncmp+0x20>
 8014888:	3901      	subs	r1, #1
 801488a:	1884      	adds	r4, r0, r2
 801488c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014890:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014894:	4293      	cmp	r3, r2
 8014896:	d103      	bne.n	80148a0 <strncmp+0x1c>
 8014898:	42a0      	cmp	r0, r4
 801489a:	d001      	beq.n	80148a0 <strncmp+0x1c>
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1f5      	bne.n	801488c <strncmp+0x8>
 80148a0:	1a98      	subs	r0, r3, r2
 80148a2:	bd10      	pop	{r4, pc}
 80148a4:	4610      	mov	r0, r2
 80148a6:	e7fc      	b.n	80148a2 <strncmp+0x1e>

080148a8 <_strtoul_l.isra.0>:
 80148a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148ac:	4e3b      	ldr	r6, [pc, #236]	; (801499c <_strtoul_l.isra.0+0xf4>)
 80148ae:	4686      	mov	lr, r0
 80148b0:	468c      	mov	ip, r1
 80148b2:	4660      	mov	r0, ip
 80148b4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80148b8:	5da5      	ldrb	r5, [r4, r6]
 80148ba:	f015 0508 	ands.w	r5, r5, #8
 80148be:	d1f8      	bne.n	80148b2 <_strtoul_l.isra.0+0xa>
 80148c0:	2c2d      	cmp	r4, #45	; 0x2d
 80148c2:	d134      	bne.n	801492e <_strtoul_l.isra.0+0x86>
 80148c4:	f89c 4000 	ldrb.w	r4, [ip]
 80148c8:	f04f 0801 	mov.w	r8, #1
 80148cc:	f100 0c02 	add.w	ip, r0, #2
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d05e      	beq.n	8014992 <_strtoul_l.isra.0+0xea>
 80148d4:	2b10      	cmp	r3, #16
 80148d6:	d10c      	bne.n	80148f2 <_strtoul_l.isra.0+0x4a>
 80148d8:	2c30      	cmp	r4, #48	; 0x30
 80148da:	d10a      	bne.n	80148f2 <_strtoul_l.isra.0+0x4a>
 80148dc:	f89c 0000 	ldrb.w	r0, [ip]
 80148e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80148e4:	2858      	cmp	r0, #88	; 0x58
 80148e6:	d14f      	bne.n	8014988 <_strtoul_l.isra.0+0xe0>
 80148e8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80148ec:	2310      	movs	r3, #16
 80148ee:	f10c 0c02 	add.w	ip, ip, #2
 80148f2:	f04f 37ff 	mov.w	r7, #4294967295
 80148f6:	2500      	movs	r5, #0
 80148f8:	fbb7 f7f3 	udiv	r7, r7, r3
 80148fc:	fb03 f907 	mul.w	r9, r3, r7
 8014900:	ea6f 0909 	mvn.w	r9, r9
 8014904:	4628      	mov	r0, r5
 8014906:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801490a:	2e09      	cmp	r6, #9
 801490c:	d818      	bhi.n	8014940 <_strtoul_l.isra.0+0x98>
 801490e:	4634      	mov	r4, r6
 8014910:	42a3      	cmp	r3, r4
 8014912:	dd24      	ble.n	801495e <_strtoul_l.isra.0+0xb6>
 8014914:	2d00      	cmp	r5, #0
 8014916:	db1f      	blt.n	8014958 <_strtoul_l.isra.0+0xb0>
 8014918:	4287      	cmp	r7, r0
 801491a:	d31d      	bcc.n	8014958 <_strtoul_l.isra.0+0xb0>
 801491c:	d101      	bne.n	8014922 <_strtoul_l.isra.0+0x7a>
 801491e:	45a1      	cmp	r9, r4
 8014920:	db1a      	blt.n	8014958 <_strtoul_l.isra.0+0xb0>
 8014922:	fb00 4003 	mla	r0, r0, r3, r4
 8014926:	2501      	movs	r5, #1
 8014928:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801492c:	e7eb      	b.n	8014906 <_strtoul_l.isra.0+0x5e>
 801492e:	2c2b      	cmp	r4, #43	; 0x2b
 8014930:	bf08      	it	eq
 8014932:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014936:	46a8      	mov	r8, r5
 8014938:	bf08      	it	eq
 801493a:	f100 0c02 	addeq.w	ip, r0, #2
 801493e:	e7c7      	b.n	80148d0 <_strtoul_l.isra.0+0x28>
 8014940:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014944:	2e19      	cmp	r6, #25
 8014946:	d801      	bhi.n	801494c <_strtoul_l.isra.0+0xa4>
 8014948:	3c37      	subs	r4, #55	; 0x37
 801494a:	e7e1      	b.n	8014910 <_strtoul_l.isra.0+0x68>
 801494c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014950:	2e19      	cmp	r6, #25
 8014952:	d804      	bhi.n	801495e <_strtoul_l.isra.0+0xb6>
 8014954:	3c57      	subs	r4, #87	; 0x57
 8014956:	e7db      	b.n	8014910 <_strtoul_l.isra.0+0x68>
 8014958:	f04f 35ff 	mov.w	r5, #4294967295
 801495c:	e7e4      	b.n	8014928 <_strtoul_l.isra.0+0x80>
 801495e:	2d00      	cmp	r5, #0
 8014960:	da07      	bge.n	8014972 <_strtoul_l.isra.0+0xca>
 8014962:	2322      	movs	r3, #34	; 0x22
 8014964:	f8ce 3000 	str.w	r3, [lr]
 8014968:	f04f 30ff 	mov.w	r0, #4294967295
 801496c:	b942      	cbnz	r2, 8014980 <_strtoul_l.isra.0+0xd8>
 801496e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014972:	f1b8 0f00 	cmp.w	r8, #0
 8014976:	d000      	beq.n	801497a <_strtoul_l.isra.0+0xd2>
 8014978:	4240      	negs	r0, r0
 801497a:	2a00      	cmp	r2, #0
 801497c:	d0f7      	beq.n	801496e <_strtoul_l.isra.0+0xc6>
 801497e:	b10d      	cbz	r5, 8014984 <_strtoul_l.isra.0+0xdc>
 8014980:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014984:	6011      	str	r1, [r2, #0]
 8014986:	e7f2      	b.n	801496e <_strtoul_l.isra.0+0xc6>
 8014988:	2430      	movs	r4, #48	; 0x30
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1b1      	bne.n	80148f2 <_strtoul_l.isra.0+0x4a>
 801498e:	2308      	movs	r3, #8
 8014990:	e7af      	b.n	80148f2 <_strtoul_l.isra.0+0x4a>
 8014992:	2c30      	cmp	r4, #48	; 0x30
 8014994:	d0a2      	beq.n	80148dc <_strtoul_l.isra.0+0x34>
 8014996:	230a      	movs	r3, #10
 8014998:	e7ab      	b.n	80148f2 <_strtoul_l.isra.0+0x4a>
 801499a:	bf00      	nop
 801499c:	08017371 	.word	0x08017371

080149a0 <_strtoul_r>:
 80149a0:	f7ff bf82 	b.w	80148a8 <_strtoul_l.isra.0>

080149a4 <__submore>:
 80149a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a8:	460c      	mov	r4, r1
 80149aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80149ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149b0:	4299      	cmp	r1, r3
 80149b2:	d11d      	bne.n	80149f0 <__submore+0x4c>
 80149b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80149b8:	f7ff fa2c 	bl	8013e14 <_malloc_r>
 80149bc:	b918      	cbnz	r0, 80149c6 <__submore+0x22>
 80149be:	f04f 30ff 	mov.w	r0, #4294967295
 80149c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80149cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80149d0:	6360      	str	r0, [r4, #52]	; 0x34
 80149d2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80149d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80149da:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80149de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80149e2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80149e6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80149ea:	6020      	str	r0, [r4, #0]
 80149ec:	2000      	movs	r0, #0
 80149ee:	e7e8      	b.n	80149c2 <__submore+0x1e>
 80149f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80149f2:	0077      	lsls	r7, r6, #1
 80149f4:	463a      	mov	r2, r7
 80149f6:	f000 fa2d 	bl	8014e54 <_realloc_r>
 80149fa:	4605      	mov	r5, r0
 80149fc:	2800      	cmp	r0, #0
 80149fe:	d0de      	beq.n	80149be <__submore+0x1a>
 8014a00:	eb00 0806 	add.w	r8, r0, r6
 8014a04:	4601      	mov	r1, r0
 8014a06:	4632      	mov	r2, r6
 8014a08:	4640      	mov	r0, r8
 8014a0a:	f7fb fc89 	bl	8010320 <memcpy>
 8014a0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014a12:	f8c4 8000 	str.w	r8, [r4]
 8014a16:	e7e9      	b.n	80149ec <__submore+0x48>

08014a18 <__ascii_wctomb>:
 8014a18:	b149      	cbz	r1, 8014a2e <__ascii_wctomb+0x16>
 8014a1a:	2aff      	cmp	r2, #255	; 0xff
 8014a1c:	bf85      	ittet	hi
 8014a1e:	238a      	movhi	r3, #138	; 0x8a
 8014a20:	6003      	strhi	r3, [r0, #0]
 8014a22:	700a      	strbls	r2, [r1, #0]
 8014a24:	f04f 30ff 	movhi.w	r0, #4294967295
 8014a28:	bf98      	it	ls
 8014a2a:	2001      	movls	r0, #1
 8014a2c:	4770      	bx	lr
 8014a2e:	4608      	mov	r0, r1
 8014a30:	4770      	bx	lr
	...

08014a34 <__assert_func>:
 8014a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a36:	4614      	mov	r4, r2
 8014a38:	461a      	mov	r2, r3
 8014a3a:	4b09      	ldr	r3, [pc, #36]	; (8014a60 <__assert_func+0x2c>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	4605      	mov	r5, r0
 8014a40:	68d8      	ldr	r0, [r3, #12]
 8014a42:	b14c      	cbz	r4, 8014a58 <__assert_func+0x24>
 8014a44:	4b07      	ldr	r3, [pc, #28]	; (8014a64 <__assert_func+0x30>)
 8014a46:	9100      	str	r1, [sp, #0]
 8014a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a4c:	4906      	ldr	r1, [pc, #24]	; (8014a68 <__assert_func+0x34>)
 8014a4e:	462b      	mov	r3, r5
 8014a50:	f000 f9a6 	bl	8014da0 <fiprintf>
 8014a54:	f000 fc3e 	bl	80152d4 <abort>
 8014a58:	4b04      	ldr	r3, [pc, #16]	; (8014a6c <__assert_func+0x38>)
 8014a5a:	461c      	mov	r4, r3
 8014a5c:	e7f3      	b.n	8014a46 <__assert_func+0x12>
 8014a5e:	bf00      	nop
 8014a60:	20000050 	.word	0x20000050
 8014a64:	08017710 	.word	0x08017710
 8014a68:	0801771d 	.word	0x0801771d
 8014a6c:	0801774b 	.word	0x0801774b

08014a70 <__sflush_r>:
 8014a70:	898a      	ldrh	r2, [r1, #12]
 8014a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a76:	4605      	mov	r5, r0
 8014a78:	0710      	lsls	r0, r2, #28
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	d458      	bmi.n	8014b30 <__sflush_r+0xc0>
 8014a7e:	684b      	ldr	r3, [r1, #4]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	dc05      	bgt.n	8014a90 <__sflush_r+0x20>
 8014a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	dc02      	bgt.n	8014a90 <__sflush_r+0x20>
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a92:	2e00      	cmp	r6, #0
 8014a94:	d0f9      	beq.n	8014a8a <__sflush_r+0x1a>
 8014a96:	2300      	movs	r3, #0
 8014a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a9c:	682f      	ldr	r7, [r5, #0]
 8014a9e:	602b      	str	r3, [r5, #0]
 8014aa0:	d032      	beq.n	8014b08 <__sflush_r+0x98>
 8014aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014aa4:	89a3      	ldrh	r3, [r4, #12]
 8014aa6:	075a      	lsls	r2, r3, #29
 8014aa8:	d505      	bpl.n	8014ab6 <__sflush_r+0x46>
 8014aaa:	6863      	ldr	r3, [r4, #4]
 8014aac:	1ac0      	subs	r0, r0, r3
 8014aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ab0:	b10b      	cbz	r3, 8014ab6 <__sflush_r+0x46>
 8014ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ab4:	1ac0      	subs	r0, r0, r3
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	4602      	mov	r2, r0
 8014aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014abc:	6a21      	ldr	r1, [r4, #32]
 8014abe:	4628      	mov	r0, r5
 8014ac0:	47b0      	blx	r6
 8014ac2:	1c43      	adds	r3, r0, #1
 8014ac4:	89a3      	ldrh	r3, [r4, #12]
 8014ac6:	d106      	bne.n	8014ad6 <__sflush_r+0x66>
 8014ac8:	6829      	ldr	r1, [r5, #0]
 8014aca:	291d      	cmp	r1, #29
 8014acc:	d82c      	bhi.n	8014b28 <__sflush_r+0xb8>
 8014ace:	4a2a      	ldr	r2, [pc, #168]	; (8014b78 <__sflush_r+0x108>)
 8014ad0:	40ca      	lsrs	r2, r1
 8014ad2:	07d6      	lsls	r6, r2, #31
 8014ad4:	d528      	bpl.n	8014b28 <__sflush_r+0xb8>
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	6062      	str	r2, [r4, #4]
 8014ada:	04d9      	lsls	r1, r3, #19
 8014adc:	6922      	ldr	r2, [r4, #16]
 8014ade:	6022      	str	r2, [r4, #0]
 8014ae0:	d504      	bpl.n	8014aec <__sflush_r+0x7c>
 8014ae2:	1c42      	adds	r2, r0, #1
 8014ae4:	d101      	bne.n	8014aea <__sflush_r+0x7a>
 8014ae6:	682b      	ldr	r3, [r5, #0]
 8014ae8:	b903      	cbnz	r3, 8014aec <__sflush_r+0x7c>
 8014aea:	6560      	str	r0, [r4, #84]	; 0x54
 8014aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014aee:	602f      	str	r7, [r5, #0]
 8014af0:	2900      	cmp	r1, #0
 8014af2:	d0ca      	beq.n	8014a8a <__sflush_r+0x1a>
 8014af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014af8:	4299      	cmp	r1, r3
 8014afa:	d002      	beq.n	8014b02 <__sflush_r+0x92>
 8014afc:	4628      	mov	r0, r5
 8014afe:	f7ff f939 	bl	8013d74 <_free_r>
 8014b02:	2000      	movs	r0, #0
 8014b04:	6360      	str	r0, [r4, #52]	; 0x34
 8014b06:	e7c1      	b.n	8014a8c <__sflush_r+0x1c>
 8014b08:	6a21      	ldr	r1, [r4, #32]
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	47b0      	blx	r6
 8014b10:	1c41      	adds	r1, r0, #1
 8014b12:	d1c7      	bne.n	8014aa4 <__sflush_r+0x34>
 8014b14:	682b      	ldr	r3, [r5, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d0c4      	beq.n	8014aa4 <__sflush_r+0x34>
 8014b1a:	2b1d      	cmp	r3, #29
 8014b1c:	d001      	beq.n	8014b22 <__sflush_r+0xb2>
 8014b1e:	2b16      	cmp	r3, #22
 8014b20:	d101      	bne.n	8014b26 <__sflush_r+0xb6>
 8014b22:	602f      	str	r7, [r5, #0]
 8014b24:	e7b1      	b.n	8014a8a <__sflush_r+0x1a>
 8014b26:	89a3      	ldrh	r3, [r4, #12]
 8014b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b2c:	81a3      	strh	r3, [r4, #12]
 8014b2e:	e7ad      	b.n	8014a8c <__sflush_r+0x1c>
 8014b30:	690f      	ldr	r7, [r1, #16]
 8014b32:	2f00      	cmp	r7, #0
 8014b34:	d0a9      	beq.n	8014a8a <__sflush_r+0x1a>
 8014b36:	0793      	lsls	r3, r2, #30
 8014b38:	680e      	ldr	r6, [r1, #0]
 8014b3a:	bf08      	it	eq
 8014b3c:	694b      	ldreq	r3, [r1, #20]
 8014b3e:	600f      	str	r7, [r1, #0]
 8014b40:	bf18      	it	ne
 8014b42:	2300      	movne	r3, #0
 8014b44:	eba6 0807 	sub.w	r8, r6, r7
 8014b48:	608b      	str	r3, [r1, #8]
 8014b4a:	f1b8 0f00 	cmp.w	r8, #0
 8014b4e:	dd9c      	ble.n	8014a8a <__sflush_r+0x1a>
 8014b50:	6a21      	ldr	r1, [r4, #32]
 8014b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b54:	4643      	mov	r3, r8
 8014b56:	463a      	mov	r2, r7
 8014b58:	4628      	mov	r0, r5
 8014b5a:	47b0      	blx	r6
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	dc06      	bgt.n	8014b6e <__sflush_r+0xfe>
 8014b60:	89a3      	ldrh	r3, [r4, #12]
 8014b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b66:	81a3      	strh	r3, [r4, #12]
 8014b68:	f04f 30ff 	mov.w	r0, #4294967295
 8014b6c:	e78e      	b.n	8014a8c <__sflush_r+0x1c>
 8014b6e:	4407      	add	r7, r0
 8014b70:	eba8 0800 	sub.w	r8, r8, r0
 8014b74:	e7e9      	b.n	8014b4a <__sflush_r+0xda>
 8014b76:	bf00      	nop
 8014b78:	20400001 	.word	0x20400001

08014b7c <_fflush_r>:
 8014b7c:	b538      	push	{r3, r4, r5, lr}
 8014b7e:	690b      	ldr	r3, [r1, #16]
 8014b80:	4605      	mov	r5, r0
 8014b82:	460c      	mov	r4, r1
 8014b84:	b913      	cbnz	r3, 8014b8c <_fflush_r+0x10>
 8014b86:	2500      	movs	r5, #0
 8014b88:	4628      	mov	r0, r5
 8014b8a:	bd38      	pop	{r3, r4, r5, pc}
 8014b8c:	b118      	cbz	r0, 8014b96 <_fflush_r+0x1a>
 8014b8e:	6983      	ldr	r3, [r0, #24]
 8014b90:	b90b      	cbnz	r3, 8014b96 <_fflush_r+0x1a>
 8014b92:	f000 f887 	bl	8014ca4 <__sinit>
 8014b96:	4b14      	ldr	r3, [pc, #80]	; (8014be8 <_fflush_r+0x6c>)
 8014b98:	429c      	cmp	r4, r3
 8014b9a:	d11b      	bne.n	8014bd4 <_fflush_r+0x58>
 8014b9c:	686c      	ldr	r4, [r5, #4]
 8014b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d0ef      	beq.n	8014b86 <_fflush_r+0xa>
 8014ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ba8:	07d0      	lsls	r0, r2, #31
 8014baa:	d404      	bmi.n	8014bb6 <_fflush_r+0x3a>
 8014bac:	0599      	lsls	r1, r3, #22
 8014bae:	d402      	bmi.n	8014bb6 <_fflush_r+0x3a>
 8014bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bb2:	f000 f927 	bl	8014e04 <__retarget_lock_acquire_recursive>
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	4621      	mov	r1, r4
 8014bba:	f7ff ff59 	bl	8014a70 <__sflush_r>
 8014bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bc0:	07da      	lsls	r2, r3, #31
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	d4e0      	bmi.n	8014b88 <_fflush_r+0xc>
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	059b      	lsls	r3, r3, #22
 8014bca:	d4dd      	bmi.n	8014b88 <_fflush_r+0xc>
 8014bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bce:	f000 f91a 	bl	8014e06 <__retarget_lock_release_recursive>
 8014bd2:	e7d9      	b.n	8014b88 <_fflush_r+0xc>
 8014bd4:	4b05      	ldr	r3, [pc, #20]	; (8014bec <_fflush_r+0x70>)
 8014bd6:	429c      	cmp	r4, r3
 8014bd8:	d101      	bne.n	8014bde <_fflush_r+0x62>
 8014bda:	68ac      	ldr	r4, [r5, #8]
 8014bdc:	e7df      	b.n	8014b9e <_fflush_r+0x22>
 8014bde:	4b04      	ldr	r3, [pc, #16]	; (8014bf0 <_fflush_r+0x74>)
 8014be0:	429c      	cmp	r4, r3
 8014be2:	bf08      	it	eq
 8014be4:	68ec      	ldreq	r4, [r5, #12]
 8014be6:	e7da      	b.n	8014b9e <_fflush_r+0x22>
 8014be8:	0801776c 	.word	0x0801776c
 8014bec:	0801778c 	.word	0x0801778c
 8014bf0:	0801774c 	.word	0x0801774c

08014bf4 <std>:
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8014bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c02:	6083      	str	r3, [r0, #8]
 8014c04:	8181      	strh	r1, [r0, #12]
 8014c06:	6643      	str	r3, [r0, #100]	; 0x64
 8014c08:	81c2      	strh	r2, [r0, #14]
 8014c0a:	6183      	str	r3, [r0, #24]
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	2208      	movs	r2, #8
 8014c10:	305c      	adds	r0, #92	; 0x5c
 8014c12:	f7fb fb93 	bl	801033c <memset>
 8014c16:	4b05      	ldr	r3, [pc, #20]	; (8014c2c <std+0x38>)
 8014c18:	6263      	str	r3, [r4, #36]	; 0x24
 8014c1a:	4b05      	ldr	r3, [pc, #20]	; (8014c30 <std+0x3c>)
 8014c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c1e:	4b05      	ldr	r3, [pc, #20]	; (8014c34 <std+0x40>)
 8014c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c22:	4b05      	ldr	r3, [pc, #20]	; (8014c38 <std+0x44>)
 8014c24:	6224      	str	r4, [r4, #32]
 8014c26:	6323      	str	r3, [r4, #48]	; 0x30
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	bf00      	nop
 8014c2c:	0801114d 	.word	0x0801114d
 8014c30:	08011173 	.word	0x08011173
 8014c34:	080111ab 	.word	0x080111ab
 8014c38:	080111cf 	.word	0x080111cf

08014c3c <_cleanup_r>:
 8014c3c:	4901      	ldr	r1, [pc, #4]	; (8014c44 <_cleanup_r+0x8>)
 8014c3e:	f000 b8c1 	b.w	8014dc4 <_fwalk_reent>
 8014c42:	bf00      	nop
 8014c44:	08014b7d 	.word	0x08014b7d

08014c48 <__sfmoreglue>:
 8014c48:	b570      	push	{r4, r5, r6, lr}
 8014c4a:	1e4a      	subs	r2, r1, #1
 8014c4c:	2568      	movs	r5, #104	; 0x68
 8014c4e:	4355      	muls	r5, r2
 8014c50:	460e      	mov	r6, r1
 8014c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c56:	f7ff f8dd 	bl	8013e14 <_malloc_r>
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	b140      	cbz	r0, 8014c70 <__sfmoreglue+0x28>
 8014c5e:	2100      	movs	r1, #0
 8014c60:	e9c0 1600 	strd	r1, r6, [r0]
 8014c64:	300c      	adds	r0, #12
 8014c66:	60a0      	str	r0, [r4, #8]
 8014c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c6c:	f7fb fb66 	bl	801033c <memset>
 8014c70:	4620      	mov	r0, r4
 8014c72:	bd70      	pop	{r4, r5, r6, pc}

08014c74 <__sfp_lock_acquire>:
 8014c74:	4801      	ldr	r0, [pc, #4]	; (8014c7c <__sfp_lock_acquire+0x8>)
 8014c76:	f000 b8c5 	b.w	8014e04 <__retarget_lock_acquire_recursive>
 8014c7a:	bf00      	nop
 8014c7c:	2000524c 	.word	0x2000524c

08014c80 <__sfp_lock_release>:
 8014c80:	4801      	ldr	r0, [pc, #4]	; (8014c88 <__sfp_lock_release+0x8>)
 8014c82:	f000 b8c0 	b.w	8014e06 <__retarget_lock_release_recursive>
 8014c86:	bf00      	nop
 8014c88:	2000524c 	.word	0x2000524c

08014c8c <__sinit_lock_acquire>:
 8014c8c:	4801      	ldr	r0, [pc, #4]	; (8014c94 <__sinit_lock_acquire+0x8>)
 8014c8e:	f000 b8b9 	b.w	8014e04 <__retarget_lock_acquire_recursive>
 8014c92:	bf00      	nop
 8014c94:	20005247 	.word	0x20005247

08014c98 <__sinit_lock_release>:
 8014c98:	4801      	ldr	r0, [pc, #4]	; (8014ca0 <__sinit_lock_release+0x8>)
 8014c9a:	f000 b8b4 	b.w	8014e06 <__retarget_lock_release_recursive>
 8014c9e:	bf00      	nop
 8014ca0:	20005247 	.word	0x20005247

08014ca4 <__sinit>:
 8014ca4:	b510      	push	{r4, lr}
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	f7ff fff0 	bl	8014c8c <__sinit_lock_acquire>
 8014cac:	69a3      	ldr	r3, [r4, #24]
 8014cae:	b11b      	cbz	r3, 8014cb8 <__sinit+0x14>
 8014cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cb4:	f7ff bff0 	b.w	8014c98 <__sinit_lock_release>
 8014cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8014cbe:	4b13      	ldr	r3, [pc, #76]	; (8014d0c <__sinit+0x68>)
 8014cc0:	4a13      	ldr	r2, [pc, #76]	; (8014d10 <__sinit+0x6c>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8014cc6:	42a3      	cmp	r3, r4
 8014cc8:	bf04      	itt	eq
 8014cca:	2301      	moveq	r3, #1
 8014ccc:	61a3      	streq	r3, [r4, #24]
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f000 f820 	bl	8014d14 <__sfp>
 8014cd4:	6060      	str	r0, [r4, #4]
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f000 f81c 	bl	8014d14 <__sfp>
 8014cdc:	60a0      	str	r0, [r4, #8]
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f000 f818 	bl	8014d14 <__sfp>
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	60e0      	str	r0, [r4, #12]
 8014ce8:	2104      	movs	r1, #4
 8014cea:	6860      	ldr	r0, [r4, #4]
 8014cec:	f7ff ff82 	bl	8014bf4 <std>
 8014cf0:	68a0      	ldr	r0, [r4, #8]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	2109      	movs	r1, #9
 8014cf6:	f7ff ff7d 	bl	8014bf4 <std>
 8014cfa:	68e0      	ldr	r0, [r4, #12]
 8014cfc:	2202      	movs	r2, #2
 8014cfe:	2112      	movs	r1, #18
 8014d00:	f7ff ff78 	bl	8014bf4 <std>
 8014d04:	2301      	movs	r3, #1
 8014d06:	61a3      	str	r3, [r4, #24]
 8014d08:	e7d2      	b.n	8014cb0 <__sinit+0xc>
 8014d0a:	bf00      	nop
 8014d0c:	080172e4 	.word	0x080172e4
 8014d10:	08014c3d 	.word	0x08014c3d

08014d14 <__sfp>:
 8014d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d16:	4607      	mov	r7, r0
 8014d18:	f7ff ffac 	bl	8014c74 <__sfp_lock_acquire>
 8014d1c:	4b1e      	ldr	r3, [pc, #120]	; (8014d98 <__sfp+0x84>)
 8014d1e:	681e      	ldr	r6, [r3, #0]
 8014d20:	69b3      	ldr	r3, [r6, #24]
 8014d22:	b913      	cbnz	r3, 8014d2a <__sfp+0x16>
 8014d24:	4630      	mov	r0, r6
 8014d26:	f7ff ffbd 	bl	8014ca4 <__sinit>
 8014d2a:	3648      	adds	r6, #72	; 0x48
 8014d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	d503      	bpl.n	8014d3c <__sfp+0x28>
 8014d34:	6833      	ldr	r3, [r6, #0]
 8014d36:	b30b      	cbz	r3, 8014d7c <__sfp+0x68>
 8014d38:	6836      	ldr	r6, [r6, #0]
 8014d3a:	e7f7      	b.n	8014d2c <__sfp+0x18>
 8014d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d40:	b9d5      	cbnz	r5, 8014d78 <__sfp+0x64>
 8014d42:	4b16      	ldr	r3, [pc, #88]	; (8014d9c <__sfp+0x88>)
 8014d44:	60e3      	str	r3, [r4, #12]
 8014d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8014d4c:	f000 f859 	bl	8014e02 <__retarget_lock_init_recursive>
 8014d50:	f7ff ff96 	bl	8014c80 <__sfp_lock_release>
 8014d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014d5c:	6025      	str	r5, [r4, #0]
 8014d5e:	61a5      	str	r5, [r4, #24]
 8014d60:	2208      	movs	r2, #8
 8014d62:	4629      	mov	r1, r5
 8014d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d68:	f7fb fae8 	bl	801033c <memset>
 8014d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d74:	4620      	mov	r0, r4
 8014d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d78:	3468      	adds	r4, #104	; 0x68
 8014d7a:	e7d9      	b.n	8014d30 <__sfp+0x1c>
 8014d7c:	2104      	movs	r1, #4
 8014d7e:	4638      	mov	r0, r7
 8014d80:	f7ff ff62 	bl	8014c48 <__sfmoreglue>
 8014d84:	4604      	mov	r4, r0
 8014d86:	6030      	str	r0, [r6, #0]
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d1d5      	bne.n	8014d38 <__sfp+0x24>
 8014d8c:	f7ff ff78 	bl	8014c80 <__sfp_lock_release>
 8014d90:	230c      	movs	r3, #12
 8014d92:	603b      	str	r3, [r7, #0]
 8014d94:	e7ee      	b.n	8014d74 <__sfp+0x60>
 8014d96:	bf00      	nop
 8014d98:	080172e4 	.word	0x080172e4
 8014d9c:	ffff0001 	.word	0xffff0001

08014da0 <fiprintf>:
 8014da0:	b40e      	push	{r1, r2, r3}
 8014da2:	b503      	push	{r0, r1, lr}
 8014da4:	4601      	mov	r1, r0
 8014da6:	ab03      	add	r3, sp, #12
 8014da8:	4805      	ldr	r0, [pc, #20]	; (8014dc0 <fiprintf+0x20>)
 8014daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dae:	6800      	ldr	r0, [r0, #0]
 8014db0:	9301      	str	r3, [sp, #4]
 8014db2:	f000 f89f 	bl	8014ef4 <_vfiprintf_r>
 8014db6:	b002      	add	sp, #8
 8014db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014dbc:	b003      	add	sp, #12
 8014dbe:	4770      	bx	lr
 8014dc0:	20000050 	.word	0x20000050

08014dc4 <_fwalk_reent>:
 8014dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dc8:	4606      	mov	r6, r0
 8014dca:	4688      	mov	r8, r1
 8014dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014dd0:	2700      	movs	r7, #0
 8014dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8014dda:	d505      	bpl.n	8014de8 <_fwalk_reent+0x24>
 8014ddc:	6824      	ldr	r4, [r4, #0]
 8014dde:	2c00      	cmp	r4, #0
 8014de0:	d1f7      	bne.n	8014dd2 <_fwalk_reent+0xe>
 8014de2:	4638      	mov	r0, r7
 8014de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de8:	89ab      	ldrh	r3, [r5, #12]
 8014dea:	2b01      	cmp	r3, #1
 8014dec:	d907      	bls.n	8014dfe <_fwalk_reent+0x3a>
 8014dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014df2:	3301      	adds	r3, #1
 8014df4:	d003      	beq.n	8014dfe <_fwalk_reent+0x3a>
 8014df6:	4629      	mov	r1, r5
 8014df8:	4630      	mov	r0, r6
 8014dfa:	47c0      	blx	r8
 8014dfc:	4307      	orrs	r7, r0
 8014dfe:	3568      	adds	r5, #104	; 0x68
 8014e00:	e7e9      	b.n	8014dd6 <_fwalk_reent+0x12>

08014e02 <__retarget_lock_init_recursive>:
 8014e02:	4770      	bx	lr

08014e04 <__retarget_lock_acquire_recursive>:
 8014e04:	4770      	bx	lr

08014e06 <__retarget_lock_release_recursive>:
 8014e06:	4770      	bx	lr

08014e08 <memmove>:
 8014e08:	4288      	cmp	r0, r1
 8014e0a:	b510      	push	{r4, lr}
 8014e0c:	eb01 0402 	add.w	r4, r1, r2
 8014e10:	d902      	bls.n	8014e18 <memmove+0x10>
 8014e12:	4284      	cmp	r4, r0
 8014e14:	4623      	mov	r3, r4
 8014e16:	d807      	bhi.n	8014e28 <memmove+0x20>
 8014e18:	1e43      	subs	r3, r0, #1
 8014e1a:	42a1      	cmp	r1, r4
 8014e1c:	d008      	beq.n	8014e30 <memmove+0x28>
 8014e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e26:	e7f8      	b.n	8014e1a <memmove+0x12>
 8014e28:	4402      	add	r2, r0
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	428a      	cmp	r2, r1
 8014e2e:	d100      	bne.n	8014e32 <memmove+0x2a>
 8014e30:	bd10      	pop	{r4, pc}
 8014e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e3a:	e7f7      	b.n	8014e2c <memmove+0x24>

08014e3c <__malloc_lock>:
 8014e3c:	4801      	ldr	r0, [pc, #4]	; (8014e44 <__malloc_lock+0x8>)
 8014e3e:	f7ff bfe1 	b.w	8014e04 <__retarget_lock_acquire_recursive>
 8014e42:	bf00      	nop
 8014e44:	20005248 	.word	0x20005248

08014e48 <__malloc_unlock>:
 8014e48:	4801      	ldr	r0, [pc, #4]	; (8014e50 <__malloc_unlock+0x8>)
 8014e4a:	f7ff bfdc 	b.w	8014e06 <__retarget_lock_release_recursive>
 8014e4e:	bf00      	nop
 8014e50:	20005248 	.word	0x20005248

08014e54 <_realloc_r>:
 8014e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e56:	4607      	mov	r7, r0
 8014e58:	4614      	mov	r4, r2
 8014e5a:	460e      	mov	r6, r1
 8014e5c:	b921      	cbnz	r1, 8014e68 <_realloc_r+0x14>
 8014e5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e62:	4611      	mov	r1, r2
 8014e64:	f7fe bfd6 	b.w	8013e14 <_malloc_r>
 8014e68:	b922      	cbnz	r2, 8014e74 <_realloc_r+0x20>
 8014e6a:	f7fe ff83 	bl	8013d74 <_free_r>
 8014e6e:	4625      	mov	r5, r4
 8014e70:	4628      	mov	r0, r5
 8014e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e74:	f000 fa9a 	bl	80153ac <_malloc_usable_size_r>
 8014e78:	42a0      	cmp	r0, r4
 8014e7a:	d20f      	bcs.n	8014e9c <_realloc_r+0x48>
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	4638      	mov	r0, r7
 8014e80:	f7fe ffc8 	bl	8013e14 <_malloc_r>
 8014e84:	4605      	mov	r5, r0
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d0f2      	beq.n	8014e70 <_realloc_r+0x1c>
 8014e8a:	4631      	mov	r1, r6
 8014e8c:	4622      	mov	r2, r4
 8014e8e:	f7fb fa47 	bl	8010320 <memcpy>
 8014e92:	4631      	mov	r1, r6
 8014e94:	4638      	mov	r0, r7
 8014e96:	f7fe ff6d 	bl	8013d74 <_free_r>
 8014e9a:	e7e9      	b.n	8014e70 <_realloc_r+0x1c>
 8014e9c:	4635      	mov	r5, r6
 8014e9e:	e7e7      	b.n	8014e70 <_realloc_r+0x1c>

08014ea0 <__sfputc_r>:
 8014ea0:	6893      	ldr	r3, [r2, #8]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	b410      	push	{r4}
 8014ea8:	6093      	str	r3, [r2, #8]
 8014eaa:	da08      	bge.n	8014ebe <__sfputc_r+0x1e>
 8014eac:	6994      	ldr	r4, [r2, #24]
 8014eae:	42a3      	cmp	r3, r4
 8014eb0:	db01      	blt.n	8014eb6 <__sfputc_r+0x16>
 8014eb2:	290a      	cmp	r1, #10
 8014eb4:	d103      	bne.n	8014ebe <__sfputc_r+0x1e>
 8014eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eba:	f000 b94b 	b.w	8015154 <__swbuf_r>
 8014ebe:	6813      	ldr	r3, [r2, #0]
 8014ec0:	1c58      	adds	r0, r3, #1
 8014ec2:	6010      	str	r0, [r2, #0]
 8014ec4:	7019      	strb	r1, [r3, #0]
 8014ec6:	4608      	mov	r0, r1
 8014ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ecc:	4770      	bx	lr

08014ece <__sfputs_r>:
 8014ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed0:	4606      	mov	r6, r0
 8014ed2:	460f      	mov	r7, r1
 8014ed4:	4614      	mov	r4, r2
 8014ed6:	18d5      	adds	r5, r2, r3
 8014ed8:	42ac      	cmp	r4, r5
 8014eda:	d101      	bne.n	8014ee0 <__sfputs_r+0x12>
 8014edc:	2000      	movs	r0, #0
 8014ede:	e007      	b.n	8014ef0 <__sfputs_r+0x22>
 8014ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ee4:	463a      	mov	r2, r7
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	f7ff ffda 	bl	8014ea0 <__sfputc_r>
 8014eec:	1c43      	adds	r3, r0, #1
 8014eee:	d1f3      	bne.n	8014ed8 <__sfputs_r+0xa>
 8014ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ef4 <_vfiprintf_r>:
 8014ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef8:	460d      	mov	r5, r1
 8014efa:	b09d      	sub	sp, #116	; 0x74
 8014efc:	4614      	mov	r4, r2
 8014efe:	4698      	mov	r8, r3
 8014f00:	4606      	mov	r6, r0
 8014f02:	b118      	cbz	r0, 8014f0c <_vfiprintf_r+0x18>
 8014f04:	6983      	ldr	r3, [r0, #24]
 8014f06:	b90b      	cbnz	r3, 8014f0c <_vfiprintf_r+0x18>
 8014f08:	f7ff fecc 	bl	8014ca4 <__sinit>
 8014f0c:	4b89      	ldr	r3, [pc, #548]	; (8015134 <_vfiprintf_r+0x240>)
 8014f0e:	429d      	cmp	r5, r3
 8014f10:	d11b      	bne.n	8014f4a <_vfiprintf_r+0x56>
 8014f12:	6875      	ldr	r5, [r6, #4]
 8014f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f16:	07d9      	lsls	r1, r3, #31
 8014f18:	d405      	bmi.n	8014f26 <_vfiprintf_r+0x32>
 8014f1a:	89ab      	ldrh	r3, [r5, #12]
 8014f1c:	059a      	lsls	r2, r3, #22
 8014f1e:	d402      	bmi.n	8014f26 <_vfiprintf_r+0x32>
 8014f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f22:	f7ff ff6f 	bl	8014e04 <__retarget_lock_acquire_recursive>
 8014f26:	89ab      	ldrh	r3, [r5, #12]
 8014f28:	071b      	lsls	r3, r3, #28
 8014f2a:	d501      	bpl.n	8014f30 <_vfiprintf_r+0x3c>
 8014f2c:	692b      	ldr	r3, [r5, #16]
 8014f2e:	b9eb      	cbnz	r3, 8014f6c <_vfiprintf_r+0x78>
 8014f30:	4629      	mov	r1, r5
 8014f32:	4630      	mov	r0, r6
 8014f34:	f000 f960 	bl	80151f8 <__swsetup_r>
 8014f38:	b1c0      	cbz	r0, 8014f6c <_vfiprintf_r+0x78>
 8014f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f3c:	07dc      	lsls	r4, r3, #31
 8014f3e:	d50e      	bpl.n	8014f5e <_vfiprintf_r+0x6a>
 8014f40:	f04f 30ff 	mov.w	r0, #4294967295
 8014f44:	b01d      	add	sp, #116	; 0x74
 8014f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4a:	4b7b      	ldr	r3, [pc, #492]	; (8015138 <_vfiprintf_r+0x244>)
 8014f4c:	429d      	cmp	r5, r3
 8014f4e:	d101      	bne.n	8014f54 <_vfiprintf_r+0x60>
 8014f50:	68b5      	ldr	r5, [r6, #8]
 8014f52:	e7df      	b.n	8014f14 <_vfiprintf_r+0x20>
 8014f54:	4b79      	ldr	r3, [pc, #484]	; (801513c <_vfiprintf_r+0x248>)
 8014f56:	429d      	cmp	r5, r3
 8014f58:	bf08      	it	eq
 8014f5a:	68f5      	ldreq	r5, [r6, #12]
 8014f5c:	e7da      	b.n	8014f14 <_vfiprintf_r+0x20>
 8014f5e:	89ab      	ldrh	r3, [r5, #12]
 8014f60:	0598      	lsls	r0, r3, #22
 8014f62:	d4ed      	bmi.n	8014f40 <_vfiprintf_r+0x4c>
 8014f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f66:	f7ff ff4e 	bl	8014e06 <__retarget_lock_release_recursive>
 8014f6a:	e7e9      	b.n	8014f40 <_vfiprintf_r+0x4c>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f70:	2320      	movs	r3, #32
 8014f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f7a:	2330      	movs	r3, #48	; 0x30
 8014f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015140 <_vfiprintf_r+0x24c>
 8014f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f84:	f04f 0901 	mov.w	r9, #1
 8014f88:	4623      	mov	r3, r4
 8014f8a:	469a      	mov	sl, r3
 8014f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f90:	b10a      	cbz	r2, 8014f96 <_vfiprintf_r+0xa2>
 8014f92:	2a25      	cmp	r2, #37	; 0x25
 8014f94:	d1f9      	bne.n	8014f8a <_vfiprintf_r+0x96>
 8014f96:	ebba 0b04 	subs.w	fp, sl, r4
 8014f9a:	d00b      	beq.n	8014fb4 <_vfiprintf_r+0xc0>
 8014f9c:	465b      	mov	r3, fp
 8014f9e:	4622      	mov	r2, r4
 8014fa0:	4629      	mov	r1, r5
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f7ff ff93 	bl	8014ece <__sfputs_r>
 8014fa8:	3001      	adds	r0, #1
 8014faa:	f000 80aa 	beq.w	8015102 <_vfiprintf_r+0x20e>
 8014fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fb0:	445a      	add	r2, fp
 8014fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8014fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	f000 80a2 	beq.w	8015102 <_vfiprintf_r+0x20e>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fc8:	f10a 0a01 	add.w	sl, sl, #1
 8014fcc:	9304      	str	r3, [sp, #16]
 8014fce:	9307      	str	r3, [sp, #28]
 8014fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8014fd6:	4654      	mov	r4, sl
 8014fd8:	2205      	movs	r2, #5
 8014fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fde:	4858      	ldr	r0, [pc, #352]	; (8015140 <_vfiprintf_r+0x24c>)
 8014fe0:	f7eb f906 	bl	80001f0 <memchr>
 8014fe4:	9a04      	ldr	r2, [sp, #16]
 8014fe6:	b9d8      	cbnz	r0, 8015020 <_vfiprintf_r+0x12c>
 8014fe8:	06d1      	lsls	r1, r2, #27
 8014fea:	bf44      	itt	mi
 8014fec:	2320      	movmi	r3, #32
 8014fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ff2:	0713      	lsls	r3, r2, #28
 8014ff4:	bf44      	itt	mi
 8014ff6:	232b      	movmi	r3, #43	; 0x2b
 8014ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8015000:	2b2a      	cmp	r3, #42	; 0x2a
 8015002:	d015      	beq.n	8015030 <_vfiprintf_r+0x13c>
 8015004:	9a07      	ldr	r2, [sp, #28]
 8015006:	4654      	mov	r4, sl
 8015008:	2000      	movs	r0, #0
 801500a:	f04f 0c0a 	mov.w	ip, #10
 801500e:	4621      	mov	r1, r4
 8015010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015014:	3b30      	subs	r3, #48	; 0x30
 8015016:	2b09      	cmp	r3, #9
 8015018:	d94e      	bls.n	80150b8 <_vfiprintf_r+0x1c4>
 801501a:	b1b0      	cbz	r0, 801504a <_vfiprintf_r+0x156>
 801501c:	9207      	str	r2, [sp, #28]
 801501e:	e014      	b.n	801504a <_vfiprintf_r+0x156>
 8015020:	eba0 0308 	sub.w	r3, r0, r8
 8015024:	fa09 f303 	lsl.w	r3, r9, r3
 8015028:	4313      	orrs	r3, r2
 801502a:	9304      	str	r3, [sp, #16]
 801502c:	46a2      	mov	sl, r4
 801502e:	e7d2      	b.n	8014fd6 <_vfiprintf_r+0xe2>
 8015030:	9b03      	ldr	r3, [sp, #12]
 8015032:	1d19      	adds	r1, r3, #4
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	9103      	str	r1, [sp, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	bfbb      	ittet	lt
 801503c:	425b      	neglt	r3, r3
 801503e:	f042 0202 	orrlt.w	r2, r2, #2
 8015042:	9307      	strge	r3, [sp, #28]
 8015044:	9307      	strlt	r3, [sp, #28]
 8015046:	bfb8      	it	lt
 8015048:	9204      	strlt	r2, [sp, #16]
 801504a:	7823      	ldrb	r3, [r4, #0]
 801504c:	2b2e      	cmp	r3, #46	; 0x2e
 801504e:	d10c      	bne.n	801506a <_vfiprintf_r+0x176>
 8015050:	7863      	ldrb	r3, [r4, #1]
 8015052:	2b2a      	cmp	r3, #42	; 0x2a
 8015054:	d135      	bne.n	80150c2 <_vfiprintf_r+0x1ce>
 8015056:	9b03      	ldr	r3, [sp, #12]
 8015058:	1d1a      	adds	r2, r3, #4
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	9203      	str	r2, [sp, #12]
 801505e:	2b00      	cmp	r3, #0
 8015060:	bfb8      	it	lt
 8015062:	f04f 33ff 	movlt.w	r3, #4294967295
 8015066:	3402      	adds	r4, #2
 8015068:	9305      	str	r3, [sp, #20]
 801506a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015150 <_vfiprintf_r+0x25c>
 801506e:	7821      	ldrb	r1, [r4, #0]
 8015070:	2203      	movs	r2, #3
 8015072:	4650      	mov	r0, sl
 8015074:	f7eb f8bc 	bl	80001f0 <memchr>
 8015078:	b140      	cbz	r0, 801508c <_vfiprintf_r+0x198>
 801507a:	2340      	movs	r3, #64	; 0x40
 801507c:	eba0 000a 	sub.w	r0, r0, sl
 8015080:	fa03 f000 	lsl.w	r0, r3, r0
 8015084:	9b04      	ldr	r3, [sp, #16]
 8015086:	4303      	orrs	r3, r0
 8015088:	3401      	adds	r4, #1
 801508a:	9304      	str	r3, [sp, #16]
 801508c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015090:	482c      	ldr	r0, [pc, #176]	; (8015144 <_vfiprintf_r+0x250>)
 8015092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015096:	2206      	movs	r2, #6
 8015098:	f7eb f8aa 	bl	80001f0 <memchr>
 801509c:	2800      	cmp	r0, #0
 801509e:	d03f      	beq.n	8015120 <_vfiprintf_r+0x22c>
 80150a0:	4b29      	ldr	r3, [pc, #164]	; (8015148 <_vfiprintf_r+0x254>)
 80150a2:	bb1b      	cbnz	r3, 80150ec <_vfiprintf_r+0x1f8>
 80150a4:	9b03      	ldr	r3, [sp, #12]
 80150a6:	3307      	adds	r3, #7
 80150a8:	f023 0307 	bic.w	r3, r3, #7
 80150ac:	3308      	adds	r3, #8
 80150ae:	9303      	str	r3, [sp, #12]
 80150b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b2:	443b      	add	r3, r7
 80150b4:	9309      	str	r3, [sp, #36]	; 0x24
 80150b6:	e767      	b.n	8014f88 <_vfiprintf_r+0x94>
 80150b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80150bc:	460c      	mov	r4, r1
 80150be:	2001      	movs	r0, #1
 80150c0:	e7a5      	b.n	801500e <_vfiprintf_r+0x11a>
 80150c2:	2300      	movs	r3, #0
 80150c4:	3401      	adds	r4, #1
 80150c6:	9305      	str	r3, [sp, #20]
 80150c8:	4619      	mov	r1, r3
 80150ca:	f04f 0c0a 	mov.w	ip, #10
 80150ce:	4620      	mov	r0, r4
 80150d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150d4:	3a30      	subs	r2, #48	; 0x30
 80150d6:	2a09      	cmp	r2, #9
 80150d8:	d903      	bls.n	80150e2 <_vfiprintf_r+0x1ee>
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d0c5      	beq.n	801506a <_vfiprintf_r+0x176>
 80150de:	9105      	str	r1, [sp, #20]
 80150e0:	e7c3      	b.n	801506a <_vfiprintf_r+0x176>
 80150e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80150e6:	4604      	mov	r4, r0
 80150e8:	2301      	movs	r3, #1
 80150ea:	e7f0      	b.n	80150ce <_vfiprintf_r+0x1da>
 80150ec:	ab03      	add	r3, sp, #12
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	462a      	mov	r2, r5
 80150f2:	4b16      	ldr	r3, [pc, #88]	; (801514c <_vfiprintf_r+0x258>)
 80150f4:	a904      	add	r1, sp, #16
 80150f6:	4630      	mov	r0, r6
 80150f8:	f7fb f9c8 	bl	801048c <_printf_float>
 80150fc:	4607      	mov	r7, r0
 80150fe:	1c78      	adds	r0, r7, #1
 8015100:	d1d6      	bne.n	80150b0 <_vfiprintf_r+0x1bc>
 8015102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015104:	07d9      	lsls	r1, r3, #31
 8015106:	d405      	bmi.n	8015114 <_vfiprintf_r+0x220>
 8015108:	89ab      	ldrh	r3, [r5, #12]
 801510a:	059a      	lsls	r2, r3, #22
 801510c:	d402      	bmi.n	8015114 <_vfiprintf_r+0x220>
 801510e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015110:	f7ff fe79 	bl	8014e06 <__retarget_lock_release_recursive>
 8015114:	89ab      	ldrh	r3, [r5, #12]
 8015116:	065b      	lsls	r3, r3, #25
 8015118:	f53f af12 	bmi.w	8014f40 <_vfiprintf_r+0x4c>
 801511c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801511e:	e711      	b.n	8014f44 <_vfiprintf_r+0x50>
 8015120:	ab03      	add	r3, sp, #12
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	462a      	mov	r2, r5
 8015126:	4b09      	ldr	r3, [pc, #36]	; (801514c <_vfiprintf_r+0x258>)
 8015128:	a904      	add	r1, sp, #16
 801512a:	4630      	mov	r0, r6
 801512c:	f7fb fc52 	bl	80109d4 <_printf_i>
 8015130:	e7e4      	b.n	80150fc <_vfiprintf_r+0x208>
 8015132:	bf00      	nop
 8015134:	0801776c 	.word	0x0801776c
 8015138:	0801778c 	.word	0x0801778c
 801513c:	0801774c 	.word	0x0801774c
 8015140:	080176e4 	.word	0x080176e4
 8015144:	080176ee 	.word	0x080176ee
 8015148:	0801048d 	.word	0x0801048d
 801514c:	08014ecf 	.word	0x08014ecf
 8015150:	080176ea 	.word	0x080176ea

08015154 <__swbuf_r>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	460e      	mov	r6, r1
 8015158:	4614      	mov	r4, r2
 801515a:	4605      	mov	r5, r0
 801515c:	b118      	cbz	r0, 8015166 <__swbuf_r+0x12>
 801515e:	6983      	ldr	r3, [r0, #24]
 8015160:	b90b      	cbnz	r3, 8015166 <__swbuf_r+0x12>
 8015162:	f7ff fd9f 	bl	8014ca4 <__sinit>
 8015166:	4b21      	ldr	r3, [pc, #132]	; (80151ec <__swbuf_r+0x98>)
 8015168:	429c      	cmp	r4, r3
 801516a:	d12b      	bne.n	80151c4 <__swbuf_r+0x70>
 801516c:	686c      	ldr	r4, [r5, #4]
 801516e:	69a3      	ldr	r3, [r4, #24]
 8015170:	60a3      	str	r3, [r4, #8]
 8015172:	89a3      	ldrh	r3, [r4, #12]
 8015174:	071a      	lsls	r2, r3, #28
 8015176:	d52f      	bpl.n	80151d8 <__swbuf_r+0x84>
 8015178:	6923      	ldr	r3, [r4, #16]
 801517a:	b36b      	cbz	r3, 80151d8 <__swbuf_r+0x84>
 801517c:	6923      	ldr	r3, [r4, #16]
 801517e:	6820      	ldr	r0, [r4, #0]
 8015180:	1ac0      	subs	r0, r0, r3
 8015182:	6963      	ldr	r3, [r4, #20]
 8015184:	b2f6      	uxtb	r6, r6
 8015186:	4283      	cmp	r3, r0
 8015188:	4637      	mov	r7, r6
 801518a:	dc04      	bgt.n	8015196 <__swbuf_r+0x42>
 801518c:	4621      	mov	r1, r4
 801518e:	4628      	mov	r0, r5
 8015190:	f7ff fcf4 	bl	8014b7c <_fflush_r>
 8015194:	bb30      	cbnz	r0, 80151e4 <__swbuf_r+0x90>
 8015196:	68a3      	ldr	r3, [r4, #8]
 8015198:	3b01      	subs	r3, #1
 801519a:	60a3      	str	r3, [r4, #8]
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	1c5a      	adds	r2, r3, #1
 80151a0:	6022      	str	r2, [r4, #0]
 80151a2:	701e      	strb	r6, [r3, #0]
 80151a4:	6963      	ldr	r3, [r4, #20]
 80151a6:	3001      	adds	r0, #1
 80151a8:	4283      	cmp	r3, r0
 80151aa:	d004      	beq.n	80151b6 <__swbuf_r+0x62>
 80151ac:	89a3      	ldrh	r3, [r4, #12]
 80151ae:	07db      	lsls	r3, r3, #31
 80151b0:	d506      	bpl.n	80151c0 <__swbuf_r+0x6c>
 80151b2:	2e0a      	cmp	r6, #10
 80151b4:	d104      	bne.n	80151c0 <__swbuf_r+0x6c>
 80151b6:	4621      	mov	r1, r4
 80151b8:	4628      	mov	r0, r5
 80151ba:	f7ff fcdf 	bl	8014b7c <_fflush_r>
 80151be:	b988      	cbnz	r0, 80151e4 <__swbuf_r+0x90>
 80151c0:	4638      	mov	r0, r7
 80151c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c4:	4b0a      	ldr	r3, [pc, #40]	; (80151f0 <__swbuf_r+0x9c>)
 80151c6:	429c      	cmp	r4, r3
 80151c8:	d101      	bne.n	80151ce <__swbuf_r+0x7a>
 80151ca:	68ac      	ldr	r4, [r5, #8]
 80151cc:	e7cf      	b.n	801516e <__swbuf_r+0x1a>
 80151ce:	4b09      	ldr	r3, [pc, #36]	; (80151f4 <__swbuf_r+0xa0>)
 80151d0:	429c      	cmp	r4, r3
 80151d2:	bf08      	it	eq
 80151d4:	68ec      	ldreq	r4, [r5, #12]
 80151d6:	e7ca      	b.n	801516e <__swbuf_r+0x1a>
 80151d8:	4621      	mov	r1, r4
 80151da:	4628      	mov	r0, r5
 80151dc:	f000 f80c 	bl	80151f8 <__swsetup_r>
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d0cb      	beq.n	801517c <__swbuf_r+0x28>
 80151e4:	f04f 37ff 	mov.w	r7, #4294967295
 80151e8:	e7ea      	b.n	80151c0 <__swbuf_r+0x6c>
 80151ea:	bf00      	nop
 80151ec:	0801776c 	.word	0x0801776c
 80151f0:	0801778c 	.word	0x0801778c
 80151f4:	0801774c 	.word	0x0801774c

080151f8 <__swsetup_r>:
 80151f8:	4b32      	ldr	r3, [pc, #200]	; (80152c4 <__swsetup_r+0xcc>)
 80151fa:	b570      	push	{r4, r5, r6, lr}
 80151fc:	681d      	ldr	r5, [r3, #0]
 80151fe:	4606      	mov	r6, r0
 8015200:	460c      	mov	r4, r1
 8015202:	b125      	cbz	r5, 801520e <__swsetup_r+0x16>
 8015204:	69ab      	ldr	r3, [r5, #24]
 8015206:	b913      	cbnz	r3, 801520e <__swsetup_r+0x16>
 8015208:	4628      	mov	r0, r5
 801520a:	f7ff fd4b 	bl	8014ca4 <__sinit>
 801520e:	4b2e      	ldr	r3, [pc, #184]	; (80152c8 <__swsetup_r+0xd0>)
 8015210:	429c      	cmp	r4, r3
 8015212:	d10f      	bne.n	8015234 <__swsetup_r+0x3c>
 8015214:	686c      	ldr	r4, [r5, #4]
 8015216:	89a3      	ldrh	r3, [r4, #12]
 8015218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801521c:	0719      	lsls	r1, r3, #28
 801521e:	d42c      	bmi.n	801527a <__swsetup_r+0x82>
 8015220:	06dd      	lsls	r5, r3, #27
 8015222:	d411      	bmi.n	8015248 <__swsetup_r+0x50>
 8015224:	2309      	movs	r3, #9
 8015226:	6033      	str	r3, [r6, #0]
 8015228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801522c:	81a3      	strh	r3, [r4, #12]
 801522e:	f04f 30ff 	mov.w	r0, #4294967295
 8015232:	e03e      	b.n	80152b2 <__swsetup_r+0xba>
 8015234:	4b25      	ldr	r3, [pc, #148]	; (80152cc <__swsetup_r+0xd4>)
 8015236:	429c      	cmp	r4, r3
 8015238:	d101      	bne.n	801523e <__swsetup_r+0x46>
 801523a:	68ac      	ldr	r4, [r5, #8]
 801523c:	e7eb      	b.n	8015216 <__swsetup_r+0x1e>
 801523e:	4b24      	ldr	r3, [pc, #144]	; (80152d0 <__swsetup_r+0xd8>)
 8015240:	429c      	cmp	r4, r3
 8015242:	bf08      	it	eq
 8015244:	68ec      	ldreq	r4, [r5, #12]
 8015246:	e7e6      	b.n	8015216 <__swsetup_r+0x1e>
 8015248:	0758      	lsls	r0, r3, #29
 801524a:	d512      	bpl.n	8015272 <__swsetup_r+0x7a>
 801524c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801524e:	b141      	cbz	r1, 8015262 <__swsetup_r+0x6a>
 8015250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015254:	4299      	cmp	r1, r3
 8015256:	d002      	beq.n	801525e <__swsetup_r+0x66>
 8015258:	4630      	mov	r0, r6
 801525a:	f7fe fd8b 	bl	8013d74 <_free_r>
 801525e:	2300      	movs	r3, #0
 8015260:	6363      	str	r3, [r4, #52]	; 0x34
 8015262:	89a3      	ldrh	r3, [r4, #12]
 8015264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015268:	81a3      	strh	r3, [r4, #12]
 801526a:	2300      	movs	r3, #0
 801526c:	6063      	str	r3, [r4, #4]
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	6023      	str	r3, [r4, #0]
 8015272:	89a3      	ldrh	r3, [r4, #12]
 8015274:	f043 0308 	orr.w	r3, r3, #8
 8015278:	81a3      	strh	r3, [r4, #12]
 801527a:	6923      	ldr	r3, [r4, #16]
 801527c:	b94b      	cbnz	r3, 8015292 <__swsetup_r+0x9a>
 801527e:	89a3      	ldrh	r3, [r4, #12]
 8015280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015288:	d003      	beq.n	8015292 <__swsetup_r+0x9a>
 801528a:	4621      	mov	r1, r4
 801528c:	4630      	mov	r0, r6
 801528e:	f000 f84d 	bl	801532c <__smakebuf_r>
 8015292:	89a0      	ldrh	r0, [r4, #12]
 8015294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015298:	f010 0301 	ands.w	r3, r0, #1
 801529c:	d00a      	beq.n	80152b4 <__swsetup_r+0xbc>
 801529e:	2300      	movs	r3, #0
 80152a0:	60a3      	str	r3, [r4, #8]
 80152a2:	6963      	ldr	r3, [r4, #20]
 80152a4:	425b      	negs	r3, r3
 80152a6:	61a3      	str	r3, [r4, #24]
 80152a8:	6923      	ldr	r3, [r4, #16]
 80152aa:	b943      	cbnz	r3, 80152be <__swsetup_r+0xc6>
 80152ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80152b0:	d1ba      	bne.n	8015228 <__swsetup_r+0x30>
 80152b2:	bd70      	pop	{r4, r5, r6, pc}
 80152b4:	0781      	lsls	r1, r0, #30
 80152b6:	bf58      	it	pl
 80152b8:	6963      	ldrpl	r3, [r4, #20]
 80152ba:	60a3      	str	r3, [r4, #8]
 80152bc:	e7f4      	b.n	80152a8 <__swsetup_r+0xb0>
 80152be:	2000      	movs	r0, #0
 80152c0:	e7f7      	b.n	80152b2 <__swsetup_r+0xba>
 80152c2:	bf00      	nop
 80152c4:	20000050 	.word	0x20000050
 80152c8:	0801776c 	.word	0x0801776c
 80152cc:	0801778c 	.word	0x0801778c
 80152d0:	0801774c 	.word	0x0801774c

080152d4 <abort>:
 80152d4:	b508      	push	{r3, lr}
 80152d6:	2006      	movs	r0, #6
 80152d8:	f000 f898 	bl	801540c <raise>
 80152dc:	2001      	movs	r0, #1
 80152de:	f7f1 fbd3 	bl	8006a88 <_exit>

080152e2 <__swhatbuf_r>:
 80152e2:	b570      	push	{r4, r5, r6, lr}
 80152e4:	460e      	mov	r6, r1
 80152e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152ea:	2900      	cmp	r1, #0
 80152ec:	b096      	sub	sp, #88	; 0x58
 80152ee:	4614      	mov	r4, r2
 80152f0:	461d      	mov	r5, r3
 80152f2:	da07      	bge.n	8015304 <__swhatbuf_r+0x22>
 80152f4:	2300      	movs	r3, #0
 80152f6:	602b      	str	r3, [r5, #0]
 80152f8:	89b3      	ldrh	r3, [r6, #12]
 80152fa:	061a      	lsls	r2, r3, #24
 80152fc:	d410      	bmi.n	8015320 <__swhatbuf_r+0x3e>
 80152fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015302:	e00e      	b.n	8015322 <__swhatbuf_r+0x40>
 8015304:	466a      	mov	r2, sp
 8015306:	f000 f89d 	bl	8015444 <_fstat_r>
 801530a:	2800      	cmp	r0, #0
 801530c:	dbf2      	blt.n	80152f4 <__swhatbuf_r+0x12>
 801530e:	9a01      	ldr	r2, [sp, #4]
 8015310:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015314:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015318:	425a      	negs	r2, r3
 801531a:	415a      	adcs	r2, r3
 801531c:	602a      	str	r2, [r5, #0]
 801531e:	e7ee      	b.n	80152fe <__swhatbuf_r+0x1c>
 8015320:	2340      	movs	r3, #64	; 0x40
 8015322:	2000      	movs	r0, #0
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	b016      	add	sp, #88	; 0x58
 8015328:	bd70      	pop	{r4, r5, r6, pc}
	...

0801532c <__smakebuf_r>:
 801532c:	898b      	ldrh	r3, [r1, #12]
 801532e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015330:	079d      	lsls	r5, r3, #30
 8015332:	4606      	mov	r6, r0
 8015334:	460c      	mov	r4, r1
 8015336:	d507      	bpl.n	8015348 <__smakebuf_r+0x1c>
 8015338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801533c:	6023      	str	r3, [r4, #0]
 801533e:	6123      	str	r3, [r4, #16]
 8015340:	2301      	movs	r3, #1
 8015342:	6163      	str	r3, [r4, #20]
 8015344:	b002      	add	sp, #8
 8015346:	bd70      	pop	{r4, r5, r6, pc}
 8015348:	ab01      	add	r3, sp, #4
 801534a:	466a      	mov	r2, sp
 801534c:	f7ff ffc9 	bl	80152e2 <__swhatbuf_r>
 8015350:	9900      	ldr	r1, [sp, #0]
 8015352:	4605      	mov	r5, r0
 8015354:	4630      	mov	r0, r6
 8015356:	f7fe fd5d 	bl	8013e14 <_malloc_r>
 801535a:	b948      	cbnz	r0, 8015370 <__smakebuf_r+0x44>
 801535c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015360:	059a      	lsls	r2, r3, #22
 8015362:	d4ef      	bmi.n	8015344 <__smakebuf_r+0x18>
 8015364:	f023 0303 	bic.w	r3, r3, #3
 8015368:	f043 0302 	orr.w	r3, r3, #2
 801536c:	81a3      	strh	r3, [r4, #12]
 801536e:	e7e3      	b.n	8015338 <__smakebuf_r+0xc>
 8015370:	4b0d      	ldr	r3, [pc, #52]	; (80153a8 <__smakebuf_r+0x7c>)
 8015372:	62b3      	str	r3, [r6, #40]	; 0x28
 8015374:	89a3      	ldrh	r3, [r4, #12]
 8015376:	6020      	str	r0, [r4, #0]
 8015378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801537c:	81a3      	strh	r3, [r4, #12]
 801537e:	9b00      	ldr	r3, [sp, #0]
 8015380:	6163      	str	r3, [r4, #20]
 8015382:	9b01      	ldr	r3, [sp, #4]
 8015384:	6120      	str	r0, [r4, #16]
 8015386:	b15b      	cbz	r3, 80153a0 <__smakebuf_r+0x74>
 8015388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801538c:	4630      	mov	r0, r6
 801538e:	f000 f86b 	bl	8015468 <_isatty_r>
 8015392:	b128      	cbz	r0, 80153a0 <__smakebuf_r+0x74>
 8015394:	89a3      	ldrh	r3, [r4, #12]
 8015396:	f023 0303 	bic.w	r3, r3, #3
 801539a:	f043 0301 	orr.w	r3, r3, #1
 801539e:	81a3      	strh	r3, [r4, #12]
 80153a0:	89a0      	ldrh	r0, [r4, #12]
 80153a2:	4305      	orrs	r5, r0
 80153a4:	81a5      	strh	r5, [r4, #12]
 80153a6:	e7cd      	b.n	8015344 <__smakebuf_r+0x18>
 80153a8:	08014c3d 	.word	0x08014c3d

080153ac <_malloc_usable_size_r>:
 80153ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153b0:	1f18      	subs	r0, r3, #4
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	bfbc      	itt	lt
 80153b6:	580b      	ldrlt	r3, [r1, r0]
 80153b8:	18c0      	addlt	r0, r0, r3
 80153ba:	4770      	bx	lr

080153bc <_raise_r>:
 80153bc:	291f      	cmp	r1, #31
 80153be:	b538      	push	{r3, r4, r5, lr}
 80153c0:	4604      	mov	r4, r0
 80153c2:	460d      	mov	r5, r1
 80153c4:	d904      	bls.n	80153d0 <_raise_r+0x14>
 80153c6:	2316      	movs	r3, #22
 80153c8:	6003      	str	r3, [r0, #0]
 80153ca:	f04f 30ff 	mov.w	r0, #4294967295
 80153ce:	bd38      	pop	{r3, r4, r5, pc}
 80153d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80153d2:	b112      	cbz	r2, 80153da <_raise_r+0x1e>
 80153d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153d8:	b94b      	cbnz	r3, 80153ee <_raise_r+0x32>
 80153da:	4620      	mov	r0, r4
 80153dc:	f000 f830 	bl	8015440 <_getpid_r>
 80153e0:	462a      	mov	r2, r5
 80153e2:	4601      	mov	r1, r0
 80153e4:	4620      	mov	r0, r4
 80153e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153ea:	f000 b817 	b.w	801541c <_kill_r>
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d00a      	beq.n	8015408 <_raise_r+0x4c>
 80153f2:	1c59      	adds	r1, r3, #1
 80153f4:	d103      	bne.n	80153fe <_raise_r+0x42>
 80153f6:	2316      	movs	r3, #22
 80153f8:	6003      	str	r3, [r0, #0]
 80153fa:	2001      	movs	r0, #1
 80153fc:	e7e7      	b.n	80153ce <_raise_r+0x12>
 80153fe:	2400      	movs	r4, #0
 8015400:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015404:	4628      	mov	r0, r5
 8015406:	4798      	blx	r3
 8015408:	2000      	movs	r0, #0
 801540a:	e7e0      	b.n	80153ce <_raise_r+0x12>

0801540c <raise>:
 801540c:	4b02      	ldr	r3, [pc, #8]	; (8015418 <raise+0xc>)
 801540e:	4601      	mov	r1, r0
 8015410:	6818      	ldr	r0, [r3, #0]
 8015412:	f7ff bfd3 	b.w	80153bc <_raise_r>
 8015416:	bf00      	nop
 8015418:	20000050 	.word	0x20000050

0801541c <_kill_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d07      	ldr	r5, [pc, #28]	; (801543c <_kill_r+0x20>)
 8015420:	2300      	movs	r3, #0
 8015422:	4604      	mov	r4, r0
 8015424:	4608      	mov	r0, r1
 8015426:	4611      	mov	r1, r2
 8015428:	602b      	str	r3, [r5, #0]
 801542a:	f7f1 fb1d 	bl	8006a68 <_kill>
 801542e:	1c43      	adds	r3, r0, #1
 8015430:	d102      	bne.n	8015438 <_kill_r+0x1c>
 8015432:	682b      	ldr	r3, [r5, #0]
 8015434:	b103      	cbz	r3, 8015438 <_kill_r+0x1c>
 8015436:	6023      	str	r3, [r4, #0]
 8015438:	bd38      	pop	{r3, r4, r5, pc}
 801543a:	bf00      	nop
 801543c:	20005240 	.word	0x20005240

08015440 <_getpid_r>:
 8015440:	f7f1 bb0a 	b.w	8006a58 <_getpid>

08015444 <_fstat_r>:
 8015444:	b538      	push	{r3, r4, r5, lr}
 8015446:	4d07      	ldr	r5, [pc, #28]	; (8015464 <_fstat_r+0x20>)
 8015448:	2300      	movs	r3, #0
 801544a:	4604      	mov	r4, r0
 801544c:	4608      	mov	r0, r1
 801544e:	4611      	mov	r1, r2
 8015450:	602b      	str	r3, [r5, #0]
 8015452:	f7f1 fb68 	bl	8006b26 <_fstat>
 8015456:	1c43      	adds	r3, r0, #1
 8015458:	d102      	bne.n	8015460 <_fstat_r+0x1c>
 801545a:	682b      	ldr	r3, [r5, #0]
 801545c:	b103      	cbz	r3, 8015460 <_fstat_r+0x1c>
 801545e:	6023      	str	r3, [r4, #0]
 8015460:	bd38      	pop	{r3, r4, r5, pc}
 8015462:	bf00      	nop
 8015464:	20005240 	.word	0x20005240

08015468 <_isatty_r>:
 8015468:	b538      	push	{r3, r4, r5, lr}
 801546a:	4d06      	ldr	r5, [pc, #24]	; (8015484 <_isatty_r+0x1c>)
 801546c:	2300      	movs	r3, #0
 801546e:	4604      	mov	r4, r0
 8015470:	4608      	mov	r0, r1
 8015472:	602b      	str	r3, [r5, #0]
 8015474:	f7f1 fb67 	bl	8006b46 <_isatty>
 8015478:	1c43      	adds	r3, r0, #1
 801547a:	d102      	bne.n	8015482 <_isatty_r+0x1a>
 801547c:	682b      	ldr	r3, [r5, #0]
 801547e:	b103      	cbz	r3, 8015482 <_isatty_r+0x1a>
 8015480:	6023      	str	r3, [r4, #0]
 8015482:	bd38      	pop	{r3, r4, r5, pc}
 8015484:	20005240 	.word	0x20005240

08015488 <fmod>:
 8015488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801548a:	ed2d 8b02 	vpush	{d8}
 801548e:	ec57 6b10 	vmov	r6, r7, d0
 8015492:	ec55 4b11 	vmov	r4, r5, d1
 8015496:	f000 f949 	bl	801572c <__ieee754_fmod>
 801549a:	4b18      	ldr	r3, [pc, #96]	; (80154fc <fmod+0x74>)
 801549c:	eeb0 8a40 	vmov.f32	s16, s0
 80154a0:	eef0 8a60 	vmov.f32	s17, s1
 80154a4:	f993 3000 	ldrsb.w	r3, [r3]
 80154a8:	3301      	adds	r3, #1
 80154aa:	d020      	beq.n	80154ee <fmod+0x66>
 80154ac:	4622      	mov	r2, r4
 80154ae:	462b      	mov	r3, r5
 80154b0:	4620      	mov	r0, r4
 80154b2:	4629      	mov	r1, r5
 80154b4:	f7eb fb42 	bl	8000b3c <__aeabi_dcmpun>
 80154b8:	b9c8      	cbnz	r0, 80154ee <fmod+0x66>
 80154ba:	4632      	mov	r2, r6
 80154bc:	463b      	mov	r3, r7
 80154be:	4630      	mov	r0, r6
 80154c0:	4639      	mov	r1, r7
 80154c2:	f7eb fb3b 	bl	8000b3c <__aeabi_dcmpun>
 80154c6:	b990      	cbnz	r0, 80154ee <fmod+0x66>
 80154c8:	2200      	movs	r2, #0
 80154ca:	2300      	movs	r3, #0
 80154cc:	4620      	mov	r0, r4
 80154ce:	4629      	mov	r1, r5
 80154d0:	f7eb fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80154d4:	b158      	cbz	r0, 80154ee <fmod+0x66>
 80154d6:	f7fa fef9 	bl	80102cc <__errno>
 80154da:	2321      	movs	r3, #33	; 0x21
 80154dc:	6003      	str	r3, [r0, #0]
 80154de:	2200      	movs	r2, #0
 80154e0:	2300      	movs	r3, #0
 80154e2:	4610      	mov	r0, r2
 80154e4:	4619      	mov	r1, r3
 80154e6:	f7eb f9b9 	bl	800085c <__aeabi_ddiv>
 80154ea:	ec41 0b18 	vmov	d8, r0, r1
 80154ee:	eeb0 0a48 	vmov.f32	s0, s16
 80154f2:	eef0 0a68 	vmov.f32	s1, s17
 80154f6:	ecbd 8b02 	vpop	{d8}
 80154fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154fc:	20000224 	.word	0x20000224

08015500 <pow>:
 8015500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015504:	ec59 8b10 	vmov	r8, r9, d0
 8015508:	ec57 6b11 	vmov	r6, r7, d1
 801550c:	f000 fa20 	bl	8015950 <__ieee754_pow>
 8015510:	4b4e      	ldr	r3, [pc, #312]	; (801564c <pow+0x14c>)
 8015512:	f993 3000 	ldrsb.w	r3, [r3]
 8015516:	3301      	adds	r3, #1
 8015518:	ec55 4b10 	vmov	r4, r5, d0
 801551c:	d015      	beq.n	801554a <pow+0x4a>
 801551e:	4632      	mov	r2, r6
 8015520:	463b      	mov	r3, r7
 8015522:	4630      	mov	r0, r6
 8015524:	4639      	mov	r1, r7
 8015526:	f7eb fb09 	bl	8000b3c <__aeabi_dcmpun>
 801552a:	b970      	cbnz	r0, 801554a <pow+0x4a>
 801552c:	4642      	mov	r2, r8
 801552e:	464b      	mov	r3, r9
 8015530:	4640      	mov	r0, r8
 8015532:	4649      	mov	r1, r9
 8015534:	f7eb fb02 	bl	8000b3c <__aeabi_dcmpun>
 8015538:	2200      	movs	r2, #0
 801553a:	2300      	movs	r3, #0
 801553c:	b148      	cbz	r0, 8015552 <pow+0x52>
 801553e:	4630      	mov	r0, r6
 8015540:	4639      	mov	r1, r7
 8015542:	f7eb fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8015546:	2800      	cmp	r0, #0
 8015548:	d17d      	bne.n	8015646 <pow+0x146>
 801554a:	ec45 4b10 	vmov	d0, r4, r5
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	4640      	mov	r0, r8
 8015554:	4649      	mov	r1, r9
 8015556:	f7eb fabf 	bl	8000ad8 <__aeabi_dcmpeq>
 801555a:	b1e0      	cbz	r0, 8015596 <pow+0x96>
 801555c:	2200      	movs	r2, #0
 801555e:	2300      	movs	r3, #0
 8015560:	4630      	mov	r0, r6
 8015562:	4639      	mov	r1, r7
 8015564:	f7eb fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8015568:	2800      	cmp	r0, #0
 801556a:	d16c      	bne.n	8015646 <pow+0x146>
 801556c:	ec47 6b10 	vmov	d0, r6, r7
 8015570:	f001 f956 	bl	8016820 <finite>
 8015574:	2800      	cmp	r0, #0
 8015576:	d0e8      	beq.n	801554a <pow+0x4a>
 8015578:	2200      	movs	r2, #0
 801557a:	2300      	movs	r3, #0
 801557c:	4630      	mov	r0, r6
 801557e:	4639      	mov	r1, r7
 8015580:	f7eb fab4 	bl	8000aec <__aeabi_dcmplt>
 8015584:	2800      	cmp	r0, #0
 8015586:	d0e0      	beq.n	801554a <pow+0x4a>
 8015588:	f7fa fea0 	bl	80102cc <__errno>
 801558c:	2321      	movs	r3, #33	; 0x21
 801558e:	6003      	str	r3, [r0, #0]
 8015590:	2400      	movs	r4, #0
 8015592:	4d2f      	ldr	r5, [pc, #188]	; (8015650 <pow+0x150>)
 8015594:	e7d9      	b.n	801554a <pow+0x4a>
 8015596:	ec45 4b10 	vmov	d0, r4, r5
 801559a:	f001 f941 	bl	8016820 <finite>
 801559e:	bbb8      	cbnz	r0, 8015610 <pow+0x110>
 80155a0:	ec49 8b10 	vmov	d0, r8, r9
 80155a4:	f001 f93c 	bl	8016820 <finite>
 80155a8:	b390      	cbz	r0, 8015610 <pow+0x110>
 80155aa:	ec47 6b10 	vmov	d0, r6, r7
 80155ae:	f001 f937 	bl	8016820 <finite>
 80155b2:	b368      	cbz	r0, 8015610 <pow+0x110>
 80155b4:	4622      	mov	r2, r4
 80155b6:	462b      	mov	r3, r5
 80155b8:	4620      	mov	r0, r4
 80155ba:	4629      	mov	r1, r5
 80155bc:	f7eb fabe 	bl	8000b3c <__aeabi_dcmpun>
 80155c0:	b160      	cbz	r0, 80155dc <pow+0xdc>
 80155c2:	f7fa fe83 	bl	80102cc <__errno>
 80155c6:	2321      	movs	r3, #33	; 0x21
 80155c8:	6003      	str	r3, [r0, #0]
 80155ca:	2200      	movs	r2, #0
 80155cc:	2300      	movs	r3, #0
 80155ce:	4610      	mov	r0, r2
 80155d0:	4619      	mov	r1, r3
 80155d2:	f7eb f943 	bl	800085c <__aeabi_ddiv>
 80155d6:	4604      	mov	r4, r0
 80155d8:	460d      	mov	r5, r1
 80155da:	e7b6      	b.n	801554a <pow+0x4a>
 80155dc:	f7fa fe76 	bl	80102cc <__errno>
 80155e0:	2322      	movs	r3, #34	; 0x22
 80155e2:	6003      	str	r3, [r0, #0]
 80155e4:	2200      	movs	r2, #0
 80155e6:	2300      	movs	r3, #0
 80155e8:	4640      	mov	r0, r8
 80155ea:	4649      	mov	r1, r9
 80155ec:	f7eb fa7e 	bl	8000aec <__aeabi_dcmplt>
 80155f0:	2400      	movs	r4, #0
 80155f2:	b158      	cbz	r0, 801560c <pow+0x10c>
 80155f4:	ec47 6b10 	vmov	d0, r6, r7
 80155f8:	f001 f91e 	bl	8016838 <rint>
 80155fc:	4632      	mov	r2, r6
 80155fe:	ec51 0b10 	vmov	r0, r1, d0
 8015602:	463b      	mov	r3, r7
 8015604:	f7eb fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8015608:	2800      	cmp	r0, #0
 801560a:	d0c2      	beq.n	8015592 <pow+0x92>
 801560c:	4d11      	ldr	r5, [pc, #68]	; (8015654 <pow+0x154>)
 801560e:	e79c      	b.n	801554a <pow+0x4a>
 8015610:	2200      	movs	r2, #0
 8015612:	2300      	movs	r3, #0
 8015614:	4620      	mov	r0, r4
 8015616:	4629      	mov	r1, r5
 8015618:	f7eb fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 801561c:	2800      	cmp	r0, #0
 801561e:	d094      	beq.n	801554a <pow+0x4a>
 8015620:	ec49 8b10 	vmov	d0, r8, r9
 8015624:	f001 f8fc 	bl	8016820 <finite>
 8015628:	2800      	cmp	r0, #0
 801562a:	d08e      	beq.n	801554a <pow+0x4a>
 801562c:	ec47 6b10 	vmov	d0, r6, r7
 8015630:	f001 f8f6 	bl	8016820 <finite>
 8015634:	2800      	cmp	r0, #0
 8015636:	d088      	beq.n	801554a <pow+0x4a>
 8015638:	f7fa fe48 	bl	80102cc <__errno>
 801563c:	2322      	movs	r3, #34	; 0x22
 801563e:	6003      	str	r3, [r0, #0]
 8015640:	2400      	movs	r4, #0
 8015642:	2500      	movs	r5, #0
 8015644:	e781      	b.n	801554a <pow+0x4a>
 8015646:	4d04      	ldr	r5, [pc, #16]	; (8015658 <pow+0x158>)
 8015648:	2400      	movs	r4, #0
 801564a:	e77e      	b.n	801554a <pow+0x4a>
 801564c:	20000224 	.word	0x20000224
 8015650:	fff00000 	.word	0xfff00000
 8015654:	7ff00000 	.word	0x7ff00000
 8015658:	3ff00000 	.word	0x3ff00000

0801565c <sqrt>:
 801565c:	b538      	push	{r3, r4, r5, lr}
 801565e:	ed2d 8b02 	vpush	{d8}
 8015662:	ec55 4b10 	vmov	r4, r5, d0
 8015666:	f000 fe95 	bl	8016394 <__ieee754_sqrt>
 801566a:	4b15      	ldr	r3, [pc, #84]	; (80156c0 <sqrt+0x64>)
 801566c:	eeb0 8a40 	vmov.f32	s16, s0
 8015670:	eef0 8a60 	vmov.f32	s17, s1
 8015674:	f993 3000 	ldrsb.w	r3, [r3]
 8015678:	3301      	adds	r3, #1
 801567a:	d019      	beq.n	80156b0 <sqrt+0x54>
 801567c:	4622      	mov	r2, r4
 801567e:	462b      	mov	r3, r5
 8015680:	4620      	mov	r0, r4
 8015682:	4629      	mov	r1, r5
 8015684:	f7eb fa5a 	bl	8000b3c <__aeabi_dcmpun>
 8015688:	b990      	cbnz	r0, 80156b0 <sqrt+0x54>
 801568a:	2200      	movs	r2, #0
 801568c:	2300      	movs	r3, #0
 801568e:	4620      	mov	r0, r4
 8015690:	4629      	mov	r1, r5
 8015692:	f7eb fa2b 	bl	8000aec <__aeabi_dcmplt>
 8015696:	b158      	cbz	r0, 80156b0 <sqrt+0x54>
 8015698:	f7fa fe18 	bl	80102cc <__errno>
 801569c:	2321      	movs	r3, #33	; 0x21
 801569e:	6003      	str	r3, [r0, #0]
 80156a0:	2200      	movs	r2, #0
 80156a2:	2300      	movs	r3, #0
 80156a4:	4610      	mov	r0, r2
 80156a6:	4619      	mov	r1, r3
 80156a8:	f7eb f8d8 	bl	800085c <__aeabi_ddiv>
 80156ac:	ec41 0b18 	vmov	d8, r0, r1
 80156b0:	eeb0 0a48 	vmov.f32	s0, s16
 80156b4:	eef0 0a68 	vmov.f32	s1, s17
 80156b8:	ecbd 8b02 	vpop	{d8}
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	bf00      	nop
 80156c0:	20000224 	.word	0x20000224

080156c4 <asinf>:
 80156c4:	b508      	push	{r3, lr}
 80156c6:	ed2d 8b02 	vpush	{d8}
 80156ca:	eeb0 8a40 	vmov.f32	s16, s0
 80156ce:	f000 ff15 	bl	80164fc <__ieee754_asinf>
 80156d2:	4b13      	ldr	r3, [pc, #76]	; (8015720 <asinf+0x5c>)
 80156d4:	f993 3000 	ldrsb.w	r3, [r3]
 80156d8:	3301      	adds	r3, #1
 80156da:	eef0 8a40 	vmov.f32	s17, s0
 80156de:	d01a      	beq.n	8015716 <asinf+0x52>
 80156e0:	eeb4 8a48 	vcmp.f32	s16, s16
 80156e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e8:	d615      	bvs.n	8015716 <asinf+0x52>
 80156ea:	eeb0 0a48 	vmov.f32	s0, s16
 80156ee:	f001 fa89 	bl	8016c04 <fabsf>
 80156f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80156f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80156fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fe:	dd0a      	ble.n	8015716 <asinf+0x52>
 8015700:	f7fa fde4 	bl	80102cc <__errno>
 8015704:	ecbd 8b02 	vpop	{d8}
 8015708:	2321      	movs	r3, #33	; 0x21
 801570a:	6003      	str	r3, [r0, #0]
 801570c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015710:	4804      	ldr	r0, [pc, #16]	; (8015724 <asinf+0x60>)
 8015712:	f7fb bc95 	b.w	8011040 <nanf>
 8015716:	eeb0 0a68 	vmov.f32	s0, s17
 801571a:	ecbd 8b02 	vpop	{d8}
 801571e:	bd08      	pop	{r3, pc}
 8015720:	20000224 	.word	0x20000224
 8015724:	0801774b 	.word	0x0801774b

08015728 <atan2f>:
 8015728:	f000 bfce 	b.w	80166c8 <__ieee754_atan2f>

0801572c <__ieee754_fmod>:
 801572c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015730:	ec53 2b11 	vmov	r2, r3, d1
 8015734:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8015738:	ea5e 0402 	orrs.w	r4, lr, r2
 801573c:	ec51 0b10 	vmov	r0, r1, d0
 8015740:	ee11 7a10 	vmov	r7, s2
 8015744:	ee11 ca10 	vmov	ip, s2
 8015748:	461e      	mov	r6, r3
 801574a:	d00d      	beq.n	8015768 <__ieee754_fmod+0x3c>
 801574c:	4c7a      	ldr	r4, [pc, #488]	; (8015938 <__ieee754_fmod+0x20c>)
 801574e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8015752:	45a0      	cmp	r8, r4
 8015754:	4689      	mov	r9, r1
 8015756:	dc07      	bgt.n	8015768 <__ieee754_fmod+0x3c>
 8015758:	4254      	negs	r4, r2
 801575a:	4d78      	ldr	r5, [pc, #480]	; (801593c <__ieee754_fmod+0x210>)
 801575c:	4314      	orrs	r4, r2
 801575e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8015762:	42ac      	cmp	r4, r5
 8015764:	46ab      	mov	fp, r5
 8015766:	d909      	bls.n	801577c <__ieee754_fmod+0x50>
 8015768:	f7ea ff4e 	bl	8000608 <__aeabi_dmul>
 801576c:	4602      	mov	r2, r0
 801576e:	460b      	mov	r3, r1
 8015770:	f7eb f874 	bl	800085c <__aeabi_ddiv>
 8015774:	ec41 0b10 	vmov	d0, r0, r1
 8015778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801577c:	45f0      	cmp	r8, lr
 801577e:	ee10 aa10 	vmov	sl, s0
 8015782:	ee10 4a10 	vmov	r4, s0
 8015786:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801578a:	dc0a      	bgt.n	80157a2 <__ieee754_fmod+0x76>
 801578c:	dbf2      	blt.n	8015774 <__ieee754_fmod+0x48>
 801578e:	4290      	cmp	r0, r2
 8015790:	d3f0      	bcc.n	8015774 <__ieee754_fmod+0x48>
 8015792:	d106      	bne.n	80157a2 <__ieee754_fmod+0x76>
 8015794:	4a6a      	ldr	r2, [pc, #424]	; (8015940 <__ieee754_fmod+0x214>)
 8015796:	0fed      	lsrs	r5, r5, #31
 8015798:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801579c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80157a0:	e7e8      	b.n	8015774 <__ieee754_fmod+0x48>
 80157a2:	ea19 0f0b 	tst.w	r9, fp
 80157a6:	d14a      	bne.n	801583e <__ieee754_fmod+0x112>
 80157a8:	f1b8 0f00 	cmp.w	r8, #0
 80157ac:	d13f      	bne.n	801582e <__ieee754_fmod+0x102>
 80157ae:	4965      	ldr	r1, [pc, #404]	; (8015944 <__ieee754_fmod+0x218>)
 80157b0:	4653      	mov	r3, sl
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	dc38      	bgt.n	8015828 <__ieee754_fmod+0xfc>
 80157b6:	4b61      	ldr	r3, [pc, #388]	; (801593c <__ieee754_fmod+0x210>)
 80157b8:	4033      	ands	r3, r6
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d14f      	bne.n	801585e <__ieee754_fmod+0x132>
 80157be:	f1be 0f00 	cmp.w	lr, #0
 80157c2:	d144      	bne.n	801584e <__ieee754_fmod+0x122>
 80157c4:	4a5f      	ldr	r2, [pc, #380]	; (8015944 <__ieee754_fmod+0x218>)
 80157c6:	463b      	mov	r3, r7
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	dc3d      	bgt.n	8015848 <__ieee754_fmod+0x11c>
 80157cc:	4b5e      	ldr	r3, [pc, #376]	; (8015948 <__ieee754_fmod+0x21c>)
 80157ce:	4299      	cmp	r1, r3
 80157d0:	db4a      	blt.n	8015868 <__ieee754_fmod+0x13c>
 80157d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80157d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157da:	485b      	ldr	r0, [pc, #364]	; (8015948 <__ieee754_fmod+0x21c>)
 80157dc:	4282      	cmp	r2, r0
 80157de:	db57      	blt.n	8015890 <__ieee754_fmod+0x164>
 80157e0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80157e4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80157e8:	1a89      	subs	r1, r1, r2
 80157ea:	1b98      	subs	r0, r3, r6
 80157ec:	eba4 070c 	sub.w	r7, r4, ip
 80157f0:	2900      	cmp	r1, #0
 80157f2:	d164      	bne.n	80158be <__ieee754_fmod+0x192>
 80157f4:	4564      	cmp	r4, ip
 80157f6:	bf38      	it	cc
 80157f8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80157fc:	2800      	cmp	r0, #0
 80157fe:	bfa4      	itt	ge
 8015800:	463c      	movge	r4, r7
 8015802:	4603      	movge	r3, r0
 8015804:	ea53 0104 	orrs.w	r1, r3, r4
 8015808:	d0c4      	beq.n	8015794 <__ieee754_fmod+0x68>
 801580a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801580e:	db6b      	blt.n	80158e8 <__ieee754_fmod+0x1bc>
 8015810:	494d      	ldr	r1, [pc, #308]	; (8015948 <__ieee754_fmod+0x21c>)
 8015812:	428a      	cmp	r2, r1
 8015814:	db6e      	blt.n	80158f4 <__ieee754_fmod+0x1c8>
 8015816:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801581a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801581e:	431d      	orrs	r5, r3
 8015820:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8015824:	4620      	mov	r0, r4
 8015826:	e7a5      	b.n	8015774 <__ieee754_fmod+0x48>
 8015828:	3901      	subs	r1, #1
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	e7c1      	b.n	80157b2 <__ieee754_fmod+0x86>
 801582e:	4946      	ldr	r1, [pc, #280]	; (8015948 <__ieee754_fmod+0x21c>)
 8015830:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015834:	2b00      	cmp	r3, #0
 8015836:	ddbe      	ble.n	80157b6 <__ieee754_fmod+0x8a>
 8015838:	3901      	subs	r1, #1
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	e7fa      	b.n	8015834 <__ieee754_fmod+0x108>
 801583e:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015842:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015846:	e7b6      	b.n	80157b6 <__ieee754_fmod+0x8a>
 8015848:	3a01      	subs	r2, #1
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	e7bc      	b.n	80157c8 <__ieee754_fmod+0x9c>
 801584e:	4a3e      	ldr	r2, [pc, #248]	; (8015948 <__ieee754_fmod+0x21c>)
 8015850:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8015854:	2b00      	cmp	r3, #0
 8015856:	ddb9      	ble.n	80157cc <__ieee754_fmod+0xa0>
 8015858:	3a01      	subs	r2, #1
 801585a:	005b      	lsls	r3, r3, #1
 801585c:	e7fa      	b.n	8015854 <__ieee754_fmod+0x128>
 801585e:	ea4f 522e 	mov.w	r2, lr, asr #20
 8015862:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015866:	e7b1      	b.n	80157cc <__ieee754_fmod+0xa0>
 8015868:	1a5c      	subs	r4, r3, r1
 801586a:	2c1f      	cmp	r4, #31
 801586c:	dc0a      	bgt.n	8015884 <__ieee754_fmod+0x158>
 801586e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8015872:	fa08 f804 	lsl.w	r8, r8, r4
 8015876:	fa2a f303 	lsr.w	r3, sl, r3
 801587a:	ea43 0308 	orr.w	r3, r3, r8
 801587e:	fa0a f404 	lsl.w	r4, sl, r4
 8015882:	e7aa      	b.n	80157da <__ieee754_fmod+0xae>
 8015884:	4b31      	ldr	r3, [pc, #196]	; (801594c <__ieee754_fmod+0x220>)
 8015886:	1a5b      	subs	r3, r3, r1
 8015888:	fa0a f303 	lsl.w	r3, sl, r3
 801588c:	2400      	movs	r4, #0
 801588e:	e7a4      	b.n	80157da <__ieee754_fmod+0xae>
 8015890:	eba0 0c02 	sub.w	ip, r0, r2
 8015894:	f1bc 0f1f 	cmp.w	ip, #31
 8015898:	dc0a      	bgt.n	80158b0 <__ieee754_fmod+0x184>
 801589a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801589e:	fa0e fe0c 	lsl.w	lr, lr, ip
 80158a2:	fa27 f606 	lsr.w	r6, r7, r6
 80158a6:	ea46 060e 	orr.w	r6, r6, lr
 80158aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80158ae:	e79b      	b.n	80157e8 <__ieee754_fmod+0xbc>
 80158b0:	4e26      	ldr	r6, [pc, #152]	; (801594c <__ieee754_fmod+0x220>)
 80158b2:	1ab6      	subs	r6, r6, r2
 80158b4:	fa07 f606 	lsl.w	r6, r7, r6
 80158b8:	f04f 0c00 	mov.w	ip, #0
 80158bc:	e794      	b.n	80157e8 <__ieee754_fmod+0xbc>
 80158be:	4564      	cmp	r4, ip
 80158c0:	bf38      	it	cc
 80158c2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80158c6:	2800      	cmp	r0, #0
 80158c8:	da05      	bge.n	80158d6 <__ieee754_fmod+0x1aa>
 80158ca:	0fe0      	lsrs	r0, r4, #31
 80158cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80158d0:	0064      	lsls	r4, r4, #1
 80158d2:	3901      	subs	r1, #1
 80158d4:	e789      	b.n	80157ea <__ieee754_fmod+0xbe>
 80158d6:	ea50 0307 	orrs.w	r3, r0, r7
 80158da:	f43f af5b 	beq.w	8015794 <__ieee754_fmod+0x68>
 80158de:	0ffb      	lsrs	r3, r7, #31
 80158e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80158e4:	007c      	lsls	r4, r7, #1
 80158e6:	e7f4      	b.n	80158d2 <__ieee754_fmod+0x1a6>
 80158e8:	0fe1      	lsrs	r1, r4, #31
 80158ea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80158ee:	0064      	lsls	r4, r4, #1
 80158f0:	3a01      	subs	r2, #1
 80158f2:	e78a      	b.n	801580a <__ieee754_fmod+0xde>
 80158f4:	1a89      	subs	r1, r1, r2
 80158f6:	2914      	cmp	r1, #20
 80158f8:	dc0a      	bgt.n	8015910 <__ieee754_fmod+0x1e4>
 80158fa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80158fe:	fa03 f202 	lsl.w	r2, r3, r2
 8015902:	40cc      	lsrs	r4, r1
 8015904:	4322      	orrs	r2, r4
 8015906:	410b      	asrs	r3, r1
 8015908:	ea43 0105 	orr.w	r1, r3, r5
 801590c:	4610      	mov	r0, r2
 801590e:	e731      	b.n	8015774 <__ieee754_fmod+0x48>
 8015910:	291f      	cmp	r1, #31
 8015912:	dc07      	bgt.n	8015924 <__ieee754_fmod+0x1f8>
 8015914:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015918:	40cc      	lsrs	r4, r1
 801591a:	fa03 f202 	lsl.w	r2, r3, r2
 801591e:	4322      	orrs	r2, r4
 8015920:	462b      	mov	r3, r5
 8015922:	e7f1      	b.n	8015908 <__ieee754_fmod+0x1dc>
 8015924:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015928:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801592c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015930:	32e2      	adds	r2, #226	; 0xe2
 8015932:	fa43 f202 	asr.w	r2, r3, r2
 8015936:	e7f3      	b.n	8015920 <__ieee754_fmod+0x1f4>
 8015938:	7fefffff 	.word	0x7fefffff
 801593c:	7ff00000 	.word	0x7ff00000
 8015940:	080177b0 	.word	0x080177b0
 8015944:	fffffbed 	.word	0xfffffbed
 8015948:	fffffc02 	.word	0xfffffc02
 801594c:	fffffbe2 	.word	0xfffffbe2

08015950 <__ieee754_pow>:
 8015950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015954:	ed2d 8b06 	vpush	{d8-d10}
 8015958:	b08d      	sub	sp, #52	; 0x34
 801595a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801595e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8015962:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8015966:	ea56 0100 	orrs.w	r1, r6, r0
 801596a:	ec53 2b10 	vmov	r2, r3, d0
 801596e:	f000 84d1 	beq.w	8016314 <__ieee754_pow+0x9c4>
 8015972:	497f      	ldr	r1, [pc, #508]	; (8015b70 <__ieee754_pow+0x220>)
 8015974:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015978:	428c      	cmp	r4, r1
 801597a:	ee10 8a10 	vmov	r8, s0
 801597e:	4699      	mov	r9, r3
 8015980:	dc09      	bgt.n	8015996 <__ieee754_pow+0x46>
 8015982:	d103      	bne.n	801598c <__ieee754_pow+0x3c>
 8015984:	b97a      	cbnz	r2, 80159a6 <__ieee754_pow+0x56>
 8015986:	42a6      	cmp	r6, r4
 8015988:	dd02      	ble.n	8015990 <__ieee754_pow+0x40>
 801598a:	e00c      	b.n	80159a6 <__ieee754_pow+0x56>
 801598c:	428e      	cmp	r6, r1
 801598e:	dc02      	bgt.n	8015996 <__ieee754_pow+0x46>
 8015990:	428e      	cmp	r6, r1
 8015992:	d110      	bne.n	80159b6 <__ieee754_pow+0x66>
 8015994:	b178      	cbz	r0, 80159b6 <__ieee754_pow+0x66>
 8015996:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801599a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801599e:	ea54 0308 	orrs.w	r3, r4, r8
 80159a2:	f000 84b7 	beq.w	8016314 <__ieee754_pow+0x9c4>
 80159a6:	4873      	ldr	r0, [pc, #460]	; (8015b74 <__ieee754_pow+0x224>)
 80159a8:	b00d      	add	sp, #52	; 0x34
 80159aa:	ecbd 8b06 	vpop	{d8-d10}
 80159ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b2:	f7fe bf15 	b.w	80147e0 <nan>
 80159b6:	f1b9 0f00 	cmp.w	r9, #0
 80159ba:	da36      	bge.n	8015a2a <__ieee754_pow+0xda>
 80159bc:	496e      	ldr	r1, [pc, #440]	; (8015b78 <__ieee754_pow+0x228>)
 80159be:	428e      	cmp	r6, r1
 80159c0:	dc51      	bgt.n	8015a66 <__ieee754_pow+0x116>
 80159c2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80159c6:	428e      	cmp	r6, r1
 80159c8:	f340 84af 	ble.w	801632a <__ieee754_pow+0x9da>
 80159cc:	1531      	asrs	r1, r6, #20
 80159ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80159d2:	2914      	cmp	r1, #20
 80159d4:	dd0f      	ble.n	80159f6 <__ieee754_pow+0xa6>
 80159d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80159da:	fa20 fc01 	lsr.w	ip, r0, r1
 80159de:	fa0c f101 	lsl.w	r1, ip, r1
 80159e2:	4281      	cmp	r1, r0
 80159e4:	f040 84a1 	bne.w	801632a <__ieee754_pow+0x9da>
 80159e8:	f00c 0c01 	and.w	ip, ip, #1
 80159ec:	f1cc 0102 	rsb	r1, ip, #2
 80159f0:	9100      	str	r1, [sp, #0]
 80159f2:	b180      	cbz	r0, 8015a16 <__ieee754_pow+0xc6>
 80159f4:	e059      	b.n	8015aaa <__ieee754_pow+0x15a>
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d155      	bne.n	8015aa6 <__ieee754_pow+0x156>
 80159fa:	f1c1 0114 	rsb	r1, r1, #20
 80159fe:	fa46 fc01 	asr.w	ip, r6, r1
 8015a02:	fa0c f101 	lsl.w	r1, ip, r1
 8015a06:	42b1      	cmp	r1, r6
 8015a08:	f040 848c 	bne.w	8016324 <__ieee754_pow+0x9d4>
 8015a0c:	f00c 0c01 	and.w	ip, ip, #1
 8015a10:	f1cc 0102 	rsb	r1, ip, #2
 8015a14:	9100      	str	r1, [sp, #0]
 8015a16:	4959      	ldr	r1, [pc, #356]	; (8015b7c <__ieee754_pow+0x22c>)
 8015a18:	428e      	cmp	r6, r1
 8015a1a:	d12d      	bne.n	8015a78 <__ieee754_pow+0x128>
 8015a1c:	2f00      	cmp	r7, #0
 8015a1e:	da79      	bge.n	8015b14 <__ieee754_pow+0x1c4>
 8015a20:	4956      	ldr	r1, [pc, #344]	; (8015b7c <__ieee754_pow+0x22c>)
 8015a22:	2000      	movs	r0, #0
 8015a24:	f7ea ff1a 	bl	800085c <__aeabi_ddiv>
 8015a28:	e016      	b.n	8015a58 <__ieee754_pow+0x108>
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	9100      	str	r1, [sp, #0]
 8015a2e:	2800      	cmp	r0, #0
 8015a30:	d13b      	bne.n	8015aaa <__ieee754_pow+0x15a>
 8015a32:	494f      	ldr	r1, [pc, #316]	; (8015b70 <__ieee754_pow+0x220>)
 8015a34:	428e      	cmp	r6, r1
 8015a36:	d1ee      	bne.n	8015a16 <__ieee754_pow+0xc6>
 8015a38:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015a3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015a40:	ea53 0308 	orrs.w	r3, r3, r8
 8015a44:	f000 8466 	beq.w	8016314 <__ieee754_pow+0x9c4>
 8015a48:	4b4d      	ldr	r3, [pc, #308]	; (8015b80 <__ieee754_pow+0x230>)
 8015a4a:	429c      	cmp	r4, r3
 8015a4c:	dd0d      	ble.n	8015a6a <__ieee754_pow+0x11a>
 8015a4e:	2f00      	cmp	r7, #0
 8015a50:	f280 8464 	bge.w	801631c <__ieee754_pow+0x9cc>
 8015a54:	2000      	movs	r0, #0
 8015a56:	2100      	movs	r1, #0
 8015a58:	ec41 0b10 	vmov	d0, r0, r1
 8015a5c:	b00d      	add	sp, #52	; 0x34
 8015a5e:	ecbd 8b06 	vpop	{d8-d10}
 8015a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a66:	2102      	movs	r1, #2
 8015a68:	e7e0      	b.n	8015a2c <__ieee754_pow+0xdc>
 8015a6a:	2f00      	cmp	r7, #0
 8015a6c:	daf2      	bge.n	8015a54 <__ieee754_pow+0x104>
 8015a6e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8015a72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015a76:	e7ef      	b.n	8015a58 <__ieee754_pow+0x108>
 8015a78:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8015a7c:	d104      	bne.n	8015a88 <__ieee754_pow+0x138>
 8015a7e:	4610      	mov	r0, r2
 8015a80:	4619      	mov	r1, r3
 8015a82:	f7ea fdc1 	bl	8000608 <__aeabi_dmul>
 8015a86:	e7e7      	b.n	8015a58 <__ieee754_pow+0x108>
 8015a88:	493e      	ldr	r1, [pc, #248]	; (8015b84 <__ieee754_pow+0x234>)
 8015a8a:	428f      	cmp	r7, r1
 8015a8c:	d10d      	bne.n	8015aaa <__ieee754_pow+0x15a>
 8015a8e:	f1b9 0f00 	cmp.w	r9, #0
 8015a92:	db0a      	blt.n	8015aaa <__ieee754_pow+0x15a>
 8015a94:	ec43 2b10 	vmov	d0, r2, r3
 8015a98:	b00d      	add	sp, #52	; 0x34
 8015a9a:	ecbd 8b06 	vpop	{d8-d10}
 8015a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa2:	f000 bc77 	b.w	8016394 <__ieee754_sqrt>
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	9100      	str	r1, [sp, #0]
 8015aaa:	ec43 2b10 	vmov	d0, r2, r3
 8015aae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015ab2:	f000 feac 	bl	801680e <fabs>
 8015ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015aba:	ec51 0b10 	vmov	r0, r1, d0
 8015abe:	f1b8 0f00 	cmp.w	r8, #0
 8015ac2:	d12a      	bne.n	8015b1a <__ieee754_pow+0x1ca>
 8015ac4:	b12c      	cbz	r4, 8015ad2 <__ieee754_pow+0x182>
 8015ac6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8015b7c <__ieee754_pow+0x22c>
 8015aca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8015ace:	45e6      	cmp	lr, ip
 8015ad0:	d123      	bne.n	8015b1a <__ieee754_pow+0x1ca>
 8015ad2:	2f00      	cmp	r7, #0
 8015ad4:	da05      	bge.n	8015ae2 <__ieee754_pow+0x192>
 8015ad6:	4602      	mov	r2, r0
 8015ad8:	460b      	mov	r3, r1
 8015ada:	2000      	movs	r0, #0
 8015adc:	4927      	ldr	r1, [pc, #156]	; (8015b7c <__ieee754_pow+0x22c>)
 8015ade:	f7ea febd 	bl	800085c <__aeabi_ddiv>
 8015ae2:	f1b9 0f00 	cmp.w	r9, #0
 8015ae6:	dab7      	bge.n	8015a58 <__ieee754_pow+0x108>
 8015ae8:	9b00      	ldr	r3, [sp, #0]
 8015aea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015aee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015af2:	4323      	orrs	r3, r4
 8015af4:	d108      	bne.n	8015b08 <__ieee754_pow+0x1b8>
 8015af6:	4602      	mov	r2, r0
 8015af8:	460b      	mov	r3, r1
 8015afa:	4610      	mov	r0, r2
 8015afc:	4619      	mov	r1, r3
 8015afe:	f7ea fbcb 	bl	8000298 <__aeabi_dsub>
 8015b02:	4602      	mov	r2, r0
 8015b04:	460b      	mov	r3, r1
 8015b06:	e78d      	b.n	8015a24 <__ieee754_pow+0xd4>
 8015b08:	9b00      	ldr	r3, [sp, #0]
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	d1a4      	bne.n	8015a58 <__ieee754_pow+0x108>
 8015b0e:	4602      	mov	r2, r0
 8015b10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b14:	4610      	mov	r0, r2
 8015b16:	4619      	mov	r1, r3
 8015b18:	e79e      	b.n	8015a58 <__ieee754_pow+0x108>
 8015b1a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8015b1e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8015b22:	950a      	str	r5, [sp, #40]	; 0x28
 8015b24:	9d00      	ldr	r5, [sp, #0]
 8015b26:	46ac      	mov	ip, r5
 8015b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015b2a:	ea5c 0505 	orrs.w	r5, ip, r5
 8015b2e:	d0e4      	beq.n	8015afa <__ieee754_pow+0x1aa>
 8015b30:	4b15      	ldr	r3, [pc, #84]	; (8015b88 <__ieee754_pow+0x238>)
 8015b32:	429e      	cmp	r6, r3
 8015b34:	f340 80fc 	ble.w	8015d30 <__ieee754_pow+0x3e0>
 8015b38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015b3c:	429e      	cmp	r6, r3
 8015b3e:	4b10      	ldr	r3, [pc, #64]	; (8015b80 <__ieee754_pow+0x230>)
 8015b40:	dd07      	ble.n	8015b52 <__ieee754_pow+0x202>
 8015b42:	429c      	cmp	r4, r3
 8015b44:	dc0a      	bgt.n	8015b5c <__ieee754_pow+0x20c>
 8015b46:	2f00      	cmp	r7, #0
 8015b48:	da84      	bge.n	8015a54 <__ieee754_pow+0x104>
 8015b4a:	a307      	add	r3, pc, #28	; (adr r3, 8015b68 <__ieee754_pow+0x218>)
 8015b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b50:	e795      	b.n	8015a7e <__ieee754_pow+0x12e>
 8015b52:	429c      	cmp	r4, r3
 8015b54:	dbf7      	blt.n	8015b46 <__ieee754_pow+0x1f6>
 8015b56:	4b09      	ldr	r3, [pc, #36]	; (8015b7c <__ieee754_pow+0x22c>)
 8015b58:	429c      	cmp	r4, r3
 8015b5a:	dd17      	ble.n	8015b8c <__ieee754_pow+0x23c>
 8015b5c:	2f00      	cmp	r7, #0
 8015b5e:	dcf4      	bgt.n	8015b4a <__ieee754_pow+0x1fa>
 8015b60:	e778      	b.n	8015a54 <__ieee754_pow+0x104>
 8015b62:	bf00      	nop
 8015b64:	f3af 8000 	nop.w
 8015b68:	8800759c 	.word	0x8800759c
 8015b6c:	7e37e43c 	.word	0x7e37e43c
 8015b70:	7ff00000 	.word	0x7ff00000
 8015b74:	0801774b 	.word	0x0801774b
 8015b78:	433fffff 	.word	0x433fffff
 8015b7c:	3ff00000 	.word	0x3ff00000
 8015b80:	3fefffff 	.word	0x3fefffff
 8015b84:	3fe00000 	.word	0x3fe00000
 8015b88:	41e00000 	.word	0x41e00000
 8015b8c:	4b64      	ldr	r3, [pc, #400]	; (8015d20 <__ieee754_pow+0x3d0>)
 8015b8e:	2200      	movs	r2, #0
 8015b90:	f7ea fb82 	bl	8000298 <__aeabi_dsub>
 8015b94:	a356      	add	r3, pc, #344	; (adr r3, 8015cf0 <__ieee754_pow+0x3a0>)
 8015b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	460d      	mov	r5, r1
 8015b9e:	f7ea fd33 	bl	8000608 <__aeabi_dmul>
 8015ba2:	a355      	add	r3, pc, #340	; (adr r3, 8015cf8 <__ieee754_pow+0x3a8>)
 8015ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba8:	4606      	mov	r6, r0
 8015baa:	460f      	mov	r7, r1
 8015bac:	4620      	mov	r0, r4
 8015bae:	4629      	mov	r1, r5
 8015bb0:	f7ea fd2a 	bl	8000608 <__aeabi_dmul>
 8015bb4:	4b5b      	ldr	r3, [pc, #364]	; (8015d24 <__ieee754_pow+0x3d4>)
 8015bb6:	4682      	mov	sl, r0
 8015bb8:	468b      	mov	fp, r1
 8015bba:	2200      	movs	r2, #0
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	4629      	mov	r1, r5
 8015bc0:	f7ea fd22 	bl	8000608 <__aeabi_dmul>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	a14d      	add	r1, pc, #308	; (adr r1, 8015d00 <__ieee754_pow+0x3b0>)
 8015bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bce:	f7ea fb63 	bl	8000298 <__aeabi_dsub>
 8015bd2:	4622      	mov	r2, r4
 8015bd4:	462b      	mov	r3, r5
 8015bd6:	f7ea fd17 	bl	8000608 <__aeabi_dmul>
 8015bda:	4602      	mov	r2, r0
 8015bdc:	460b      	mov	r3, r1
 8015bde:	2000      	movs	r0, #0
 8015be0:	4951      	ldr	r1, [pc, #324]	; (8015d28 <__ieee754_pow+0x3d8>)
 8015be2:	f7ea fb59 	bl	8000298 <__aeabi_dsub>
 8015be6:	4622      	mov	r2, r4
 8015be8:	4680      	mov	r8, r0
 8015bea:	4689      	mov	r9, r1
 8015bec:	462b      	mov	r3, r5
 8015bee:	4620      	mov	r0, r4
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	f7ea fd09 	bl	8000608 <__aeabi_dmul>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	4640      	mov	r0, r8
 8015bfc:	4649      	mov	r1, r9
 8015bfe:	f7ea fd03 	bl	8000608 <__aeabi_dmul>
 8015c02:	a341      	add	r3, pc, #260	; (adr r3, 8015d08 <__ieee754_pow+0x3b8>)
 8015c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c08:	f7ea fcfe 	bl	8000608 <__aeabi_dmul>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	4650      	mov	r0, sl
 8015c12:	4659      	mov	r1, fp
 8015c14:	f7ea fb40 	bl	8000298 <__aeabi_dsub>
 8015c18:	4602      	mov	r2, r0
 8015c1a:	460b      	mov	r3, r1
 8015c1c:	4680      	mov	r8, r0
 8015c1e:	4689      	mov	r9, r1
 8015c20:	4630      	mov	r0, r6
 8015c22:	4639      	mov	r1, r7
 8015c24:	f7ea fb3a 	bl	800029c <__adddf3>
 8015c28:	2400      	movs	r4, #0
 8015c2a:	4632      	mov	r2, r6
 8015c2c:	463b      	mov	r3, r7
 8015c2e:	4620      	mov	r0, r4
 8015c30:	460d      	mov	r5, r1
 8015c32:	f7ea fb31 	bl	8000298 <__aeabi_dsub>
 8015c36:	4602      	mov	r2, r0
 8015c38:	460b      	mov	r3, r1
 8015c3a:	4640      	mov	r0, r8
 8015c3c:	4649      	mov	r1, r9
 8015c3e:	f7ea fb2b 	bl	8000298 <__aeabi_dsub>
 8015c42:	9b00      	ldr	r3, [sp, #0]
 8015c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c46:	3b01      	subs	r3, #1
 8015c48:	4313      	orrs	r3, r2
 8015c4a:	4682      	mov	sl, r0
 8015c4c:	468b      	mov	fp, r1
 8015c4e:	f040 81f1 	bne.w	8016034 <__ieee754_pow+0x6e4>
 8015c52:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015d10 <__ieee754_pow+0x3c0>
 8015c56:	eeb0 8a47 	vmov.f32	s16, s14
 8015c5a:	eef0 8a67 	vmov.f32	s17, s15
 8015c5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015c62:	2600      	movs	r6, #0
 8015c64:	4632      	mov	r2, r6
 8015c66:	463b      	mov	r3, r7
 8015c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c6c:	f7ea fb14 	bl	8000298 <__aeabi_dsub>
 8015c70:	4622      	mov	r2, r4
 8015c72:	462b      	mov	r3, r5
 8015c74:	f7ea fcc8 	bl	8000608 <__aeabi_dmul>
 8015c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c7c:	4680      	mov	r8, r0
 8015c7e:	4689      	mov	r9, r1
 8015c80:	4650      	mov	r0, sl
 8015c82:	4659      	mov	r1, fp
 8015c84:	f7ea fcc0 	bl	8000608 <__aeabi_dmul>
 8015c88:	4602      	mov	r2, r0
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	4640      	mov	r0, r8
 8015c8e:	4649      	mov	r1, r9
 8015c90:	f7ea fb04 	bl	800029c <__adddf3>
 8015c94:	4632      	mov	r2, r6
 8015c96:	463b      	mov	r3, r7
 8015c98:	4680      	mov	r8, r0
 8015c9a:	4689      	mov	r9, r1
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	4629      	mov	r1, r5
 8015ca0:	f7ea fcb2 	bl	8000608 <__aeabi_dmul>
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	460d      	mov	r5, r1
 8015caa:	4602      	mov	r2, r0
 8015cac:	4649      	mov	r1, r9
 8015cae:	4640      	mov	r0, r8
 8015cb0:	f7ea faf4 	bl	800029c <__adddf3>
 8015cb4:	4b1d      	ldr	r3, [pc, #116]	; (8015d2c <__ieee754_pow+0x3dc>)
 8015cb6:	4299      	cmp	r1, r3
 8015cb8:	ec45 4b19 	vmov	d9, r4, r5
 8015cbc:	4606      	mov	r6, r0
 8015cbe:	460f      	mov	r7, r1
 8015cc0:	468b      	mov	fp, r1
 8015cc2:	f340 82fe 	ble.w	80162c2 <__ieee754_pow+0x972>
 8015cc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015cca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015cce:	4303      	orrs	r3, r0
 8015cd0:	f000 81f0 	beq.w	80160b4 <__ieee754_pow+0x764>
 8015cd4:	a310      	add	r3, pc, #64	; (adr r3, 8015d18 <__ieee754_pow+0x3c8>)
 8015cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cda:	ec51 0b18 	vmov	r0, r1, d8
 8015cde:	f7ea fc93 	bl	8000608 <__aeabi_dmul>
 8015ce2:	a30d      	add	r3, pc, #52	; (adr r3, 8015d18 <__ieee754_pow+0x3c8>)
 8015ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce8:	e6cb      	b.n	8015a82 <__ieee754_pow+0x132>
 8015cea:	bf00      	nop
 8015cec:	f3af 8000 	nop.w
 8015cf0:	60000000 	.word	0x60000000
 8015cf4:	3ff71547 	.word	0x3ff71547
 8015cf8:	f85ddf44 	.word	0xf85ddf44
 8015cfc:	3e54ae0b 	.word	0x3e54ae0b
 8015d00:	55555555 	.word	0x55555555
 8015d04:	3fd55555 	.word	0x3fd55555
 8015d08:	652b82fe 	.word	0x652b82fe
 8015d0c:	3ff71547 	.word	0x3ff71547
 8015d10:	00000000 	.word	0x00000000
 8015d14:	bff00000 	.word	0xbff00000
 8015d18:	8800759c 	.word	0x8800759c
 8015d1c:	7e37e43c 	.word	0x7e37e43c
 8015d20:	3ff00000 	.word	0x3ff00000
 8015d24:	3fd00000 	.word	0x3fd00000
 8015d28:	3fe00000 	.word	0x3fe00000
 8015d2c:	408fffff 	.word	0x408fffff
 8015d30:	4bd7      	ldr	r3, [pc, #860]	; (8016090 <__ieee754_pow+0x740>)
 8015d32:	ea03 0309 	and.w	r3, r3, r9
 8015d36:	2200      	movs	r2, #0
 8015d38:	b92b      	cbnz	r3, 8015d46 <__ieee754_pow+0x3f6>
 8015d3a:	4bd6      	ldr	r3, [pc, #856]	; (8016094 <__ieee754_pow+0x744>)
 8015d3c:	f7ea fc64 	bl	8000608 <__aeabi_dmul>
 8015d40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015d44:	460c      	mov	r4, r1
 8015d46:	1523      	asrs	r3, r4, #20
 8015d48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015d4c:	4413      	add	r3, r2
 8015d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d50:	4bd1      	ldr	r3, [pc, #836]	; (8016098 <__ieee754_pow+0x748>)
 8015d52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015d56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015d5a:	429c      	cmp	r4, r3
 8015d5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015d60:	dd08      	ble.n	8015d74 <__ieee754_pow+0x424>
 8015d62:	4bce      	ldr	r3, [pc, #824]	; (801609c <__ieee754_pow+0x74c>)
 8015d64:	429c      	cmp	r4, r3
 8015d66:	f340 8163 	ble.w	8016030 <__ieee754_pow+0x6e0>
 8015d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015d74:	2400      	movs	r4, #0
 8015d76:	00e3      	lsls	r3, r4, #3
 8015d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d7a:	4bc9      	ldr	r3, [pc, #804]	; (80160a0 <__ieee754_pow+0x750>)
 8015d7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d80:	ed93 7b00 	vldr	d7, [r3]
 8015d84:	4629      	mov	r1, r5
 8015d86:	ec53 2b17 	vmov	r2, r3, d7
 8015d8a:	eeb0 8a47 	vmov.f32	s16, s14
 8015d8e:	eef0 8a67 	vmov.f32	s17, s15
 8015d92:	4682      	mov	sl, r0
 8015d94:	f7ea fa80 	bl	8000298 <__aeabi_dsub>
 8015d98:	4652      	mov	r2, sl
 8015d9a:	4606      	mov	r6, r0
 8015d9c:	460f      	mov	r7, r1
 8015d9e:	462b      	mov	r3, r5
 8015da0:	ec51 0b18 	vmov	r0, r1, d8
 8015da4:	f7ea fa7a 	bl	800029c <__adddf3>
 8015da8:	4602      	mov	r2, r0
 8015daa:	460b      	mov	r3, r1
 8015dac:	2000      	movs	r0, #0
 8015dae:	49bd      	ldr	r1, [pc, #756]	; (80160a4 <__ieee754_pow+0x754>)
 8015db0:	f7ea fd54 	bl	800085c <__aeabi_ddiv>
 8015db4:	ec41 0b19 	vmov	d9, r0, r1
 8015db8:	4602      	mov	r2, r0
 8015dba:	460b      	mov	r3, r1
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	4639      	mov	r1, r7
 8015dc0:	f7ea fc22 	bl	8000608 <__aeabi_dmul>
 8015dc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015dc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015dcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	9304      	str	r3, [sp, #16]
 8015dd4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015dd8:	46ab      	mov	fp, r5
 8015dda:	106d      	asrs	r5, r5, #1
 8015ddc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015de0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015de4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015de8:	2200      	movs	r2, #0
 8015dea:	4640      	mov	r0, r8
 8015dec:	4649      	mov	r1, r9
 8015dee:	4614      	mov	r4, r2
 8015df0:	461d      	mov	r5, r3
 8015df2:	f7ea fc09 	bl	8000608 <__aeabi_dmul>
 8015df6:	4602      	mov	r2, r0
 8015df8:	460b      	mov	r3, r1
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	4639      	mov	r1, r7
 8015dfe:	f7ea fa4b 	bl	8000298 <__aeabi_dsub>
 8015e02:	ec53 2b18 	vmov	r2, r3, d8
 8015e06:	4606      	mov	r6, r0
 8015e08:	460f      	mov	r7, r1
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	f7ea fa43 	bl	8000298 <__aeabi_dsub>
 8015e12:	4602      	mov	r2, r0
 8015e14:	460b      	mov	r3, r1
 8015e16:	4650      	mov	r0, sl
 8015e18:	4659      	mov	r1, fp
 8015e1a:	f7ea fa3d 	bl	8000298 <__aeabi_dsub>
 8015e1e:	4642      	mov	r2, r8
 8015e20:	464b      	mov	r3, r9
 8015e22:	f7ea fbf1 	bl	8000608 <__aeabi_dmul>
 8015e26:	4602      	mov	r2, r0
 8015e28:	460b      	mov	r3, r1
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	4639      	mov	r1, r7
 8015e2e:	f7ea fa33 	bl	8000298 <__aeabi_dsub>
 8015e32:	ec53 2b19 	vmov	r2, r3, d9
 8015e36:	f7ea fbe7 	bl	8000608 <__aeabi_dmul>
 8015e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015e3e:	ec41 0b18 	vmov	d8, r0, r1
 8015e42:	4610      	mov	r0, r2
 8015e44:	4619      	mov	r1, r3
 8015e46:	f7ea fbdf 	bl	8000608 <__aeabi_dmul>
 8015e4a:	a37d      	add	r3, pc, #500	; (adr r3, 8016040 <__ieee754_pow+0x6f0>)
 8015e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e50:	4604      	mov	r4, r0
 8015e52:	460d      	mov	r5, r1
 8015e54:	f7ea fbd8 	bl	8000608 <__aeabi_dmul>
 8015e58:	a37b      	add	r3, pc, #492	; (adr r3, 8016048 <__ieee754_pow+0x6f8>)
 8015e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e5e:	f7ea fa1d 	bl	800029c <__adddf3>
 8015e62:	4622      	mov	r2, r4
 8015e64:	462b      	mov	r3, r5
 8015e66:	f7ea fbcf 	bl	8000608 <__aeabi_dmul>
 8015e6a:	a379      	add	r3, pc, #484	; (adr r3, 8016050 <__ieee754_pow+0x700>)
 8015e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e70:	f7ea fa14 	bl	800029c <__adddf3>
 8015e74:	4622      	mov	r2, r4
 8015e76:	462b      	mov	r3, r5
 8015e78:	f7ea fbc6 	bl	8000608 <__aeabi_dmul>
 8015e7c:	a376      	add	r3, pc, #472	; (adr r3, 8016058 <__ieee754_pow+0x708>)
 8015e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e82:	f7ea fa0b 	bl	800029c <__adddf3>
 8015e86:	4622      	mov	r2, r4
 8015e88:	462b      	mov	r3, r5
 8015e8a:	f7ea fbbd 	bl	8000608 <__aeabi_dmul>
 8015e8e:	a374      	add	r3, pc, #464	; (adr r3, 8016060 <__ieee754_pow+0x710>)
 8015e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e94:	f7ea fa02 	bl	800029c <__adddf3>
 8015e98:	4622      	mov	r2, r4
 8015e9a:	462b      	mov	r3, r5
 8015e9c:	f7ea fbb4 	bl	8000608 <__aeabi_dmul>
 8015ea0:	a371      	add	r3, pc, #452	; (adr r3, 8016068 <__ieee754_pow+0x718>)
 8015ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea6:	f7ea f9f9 	bl	800029c <__adddf3>
 8015eaa:	4622      	mov	r2, r4
 8015eac:	4606      	mov	r6, r0
 8015eae:	460f      	mov	r7, r1
 8015eb0:	462b      	mov	r3, r5
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	4629      	mov	r1, r5
 8015eb6:	f7ea fba7 	bl	8000608 <__aeabi_dmul>
 8015eba:	4602      	mov	r2, r0
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	4639      	mov	r1, r7
 8015ec2:	f7ea fba1 	bl	8000608 <__aeabi_dmul>
 8015ec6:	4642      	mov	r2, r8
 8015ec8:	4604      	mov	r4, r0
 8015eca:	460d      	mov	r5, r1
 8015ecc:	464b      	mov	r3, r9
 8015ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ed2:	f7ea f9e3 	bl	800029c <__adddf3>
 8015ed6:	ec53 2b18 	vmov	r2, r3, d8
 8015eda:	f7ea fb95 	bl	8000608 <__aeabi_dmul>
 8015ede:	4622      	mov	r2, r4
 8015ee0:	462b      	mov	r3, r5
 8015ee2:	f7ea f9db 	bl	800029c <__adddf3>
 8015ee6:	4642      	mov	r2, r8
 8015ee8:	4682      	mov	sl, r0
 8015eea:	468b      	mov	fp, r1
 8015eec:	464b      	mov	r3, r9
 8015eee:	4640      	mov	r0, r8
 8015ef0:	4649      	mov	r1, r9
 8015ef2:	f7ea fb89 	bl	8000608 <__aeabi_dmul>
 8015ef6:	4b6c      	ldr	r3, [pc, #432]	; (80160a8 <__ieee754_pow+0x758>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	4606      	mov	r6, r0
 8015efc:	460f      	mov	r7, r1
 8015efe:	f7ea f9cd 	bl	800029c <__adddf3>
 8015f02:	4652      	mov	r2, sl
 8015f04:	465b      	mov	r3, fp
 8015f06:	f7ea f9c9 	bl	800029c <__adddf3>
 8015f0a:	9c04      	ldr	r4, [sp, #16]
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	4622      	mov	r2, r4
 8015f10:	460b      	mov	r3, r1
 8015f12:	4640      	mov	r0, r8
 8015f14:	4649      	mov	r1, r9
 8015f16:	f7ea fb77 	bl	8000608 <__aeabi_dmul>
 8015f1a:	4b63      	ldr	r3, [pc, #396]	; (80160a8 <__ieee754_pow+0x758>)
 8015f1c:	4680      	mov	r8, r0
 8015f1e:	4689      	mov	r9, r1
 8015f20:	2200      	movs	r2, #0
 8015f22:	4620      	mov	r0, r4
 8015f24:	4629      	mov	r1, r5
 8015f26:	f7ea f9b7 	bl	8000298 <__aeabi_dsub>
 8015f2a:	4632      	mov	r2, r6
 8015f2c:	463b      	mov	r3, r7
 8015f2e:	f7ea f9b3 	bl	8000298 <__aeabi_dsub>
 8015f32:	4602      	mov	r2, r0
 8015f34:	460b      	mov	r3, r1
 8015f36:	4650      	mov	r0, sl
 8015f38:	4659      	mov	r1, fp
 8015f3a:	f7ea f9ad 	bl	8000298 <__aeabi_dsub>
 8015f3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f42:	f7ea fb61 	bl	8000608 <__aeabi_dmul>
 8015f46:	4622      	mov	r2, r4
 8015f48:	4606      	mov	r6, r0
 8015f4a:	460f      	mov	r7, r1
 8015f4c:	462b      	mov	r3, r5
 8015f4e:	ec51 0b18 	vmov	r0, r1, d8
 8015f52:	f7ea fb59 	bl	8000608 <__aeabi_dmul>
 8015f56:	4602      	mov	r2, r0
 8015f58:	460b      	mov	r3, r1
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	4639      	mov	r1, r7
 8015f5e:	f7ea f99d 	bl	800029c <__adddf3>
 8015f62:	4606      	mov	r6, r0
 8015f64:	460f      	mov	r7, r1
 8015f66:	4602      	mov	r2, r0
 8015f68:	460b      	mov	r3, r1
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	4649      	mov	r1, r9
 8015f6e:	f7ea f995 	bl	800029c <__adddf3>
 8015f72:	9c04      	ldr	r4, [sp, #16]
 8015f74:	a33e      	add	r3, pc, #248	; (adr r3, 8016070 <__ieee754_pow+0x720>)
 8015f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	460d      	mov	r5, r1
 8015f7e:	f7ea fb43 	bl	8000608 <__aeabi_dmul>
 8015f82:	4642      	mov	r2, r8
 8015f84:	ec41 0b18 	vmov	d8, r0, r1
 8015f88:	464b      	mov	r3, r9
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	4629      	mov	r1, r5
 8015f8e:	f7ea f983 	bl	8000298 <__aeabi_dsub>
 8015f92:	4602      	mov	r2, r0
 8015f94:	460b      	mov	r3, r1
 8015f96:	4630      	mov	r0, r6
 8015f98:	4639      	mov	r1, r7
 8015f9a:	f7ea f97d 	bl	8000298 <__aeabi_dsub>
 8015f9e:	a336      	add	r3, pc, #216	; (adr r3, 8016078 <__ieee754_pow+0x728>)
 8015fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fa4:	f7ea fb30 	bl	8000608 <__aeabi_dmul>
 8015fa8:	a335      	add	r3, pc, #212	; (adr r3, 8016080 <__ieee754_pow+0x730>)
 8015faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fae:	4606      	mov	r6, r0
 8015fb0:	460f      	mov	r7, r1
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	4629      	mov	r1, r5
 8015fb6:	f7ea fb27 	bl	8000608 <__aeabi_dmul>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	4639      	mov	r1, r7
 8015fc2:	f7ea f96b 	bl	800029c <__adddf3>
 8015fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fc8:	4b38      	ldr	r3, [pc, #224]	; (80160ac <__ieee754_pow+0x75c>)
 8015fca:	4413      	add	r3, r2
 8015fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd0:	f7ea f964 	bl	800029c <__adddf3>
 8015fd4:	4682      	mov	sl, r0
 8015fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fd8:	468b      	mov	fp, r1
 8015fda:	f7ea faab 	bl	8000534 <__aeabi_i2d>
 8015fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fe0:	4b33      	ldr	r3, [pc, #204]	; (80160b0 <__ieee754_pow+0x760>)
 8015fe2:	4413      	add	r3, r2
 8015fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015fe8:	4606      	mov	r6, r0
 8015fea:	460f      	mov	r7, r1
 8015fec:	4652      	mov	r2, sl
 8015fee:	465b      	mov	r3, fp
 8015ff0:	ec51 0b18 	vmov	r0, r1, d8
 8015ff4:	f7ea f952 	bl	800029c <__adddf3>
 8015ff8:	4642      	mov	r2, r8
 8015ffa:	464b      	mov	r3, r9
 8015ffc:	f7ea f94e 	bl	800029c <__adddf3>
 8016000:	4632      	mov	r2, r6
 8016002:	463b      	mov	r3, r7
 8016004:	f7ea f94a 	bl	800029c <__adddf3>
 8016008:	9c04      	ldr	r4, [sp, #16]
 801600a:	4632      	mov	r2, r6
 801600c:	463b      	mov	r3, r7
 801600e:	4620      	mov	r0, r4
 8016010:	460d      	mov	r5, r1
 8016012:	f7ea f941 	bl	8000298 <__aeabi_dsub>
 8016016:	4642      	mov	r2, r8
 8016018:	464b      	mov	r3, r9
 801601a:	f7ea f93d 	bl	8000298 <__aeabi_dsub>
 801601e:	ec53 2b18 	vmov	r2, r3, d8
 8016022:	f7ea f939 	bl	8000298 <__aeabi_dsub>
 8016026:	4602      	mov	r2, r0
 8016028:	460b      	mov	r3, r1
 801602a:	4650      	mov	r0, sl
 801602c:	4659      	mov	r1, fp
 801602e:	e606      	b.n	8015c3e <__ieee754_pow+0x2ee>
 8016030:	2401      	movs	r4, #1
 8016032:	e6a0      	b.n	8015d76 <__ieee754_pow+0x426>
 8016034:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016088 <__ieee754_pow+0x738>
 8016038:	e60d      	b.n	8015c56 <__ieee754_pow+0x306>
 801603a:	bf00      	nop
 801603c:	f3af 8000 	nop.w
 8016040:	4a454eef 	.word	0x4a454eef
 8016044:	3fca7e28 	.word	0x3fca7e28
 8016048:	93c9db65 	.word	0x93c9db65
 801604c:	3fcd864a 	.word	0x3fcd864a
 8016050:	a91d4101 	.word	0xa91d4101
 8016054:	3fd17460 	.word	0x3fd17460
 8016058:	518f264d 	.word	0x518f264d
 801605c:	3fd55555 	.word	0x3fd55555
 8016060:	db6fabff 	.word	0xdb6fabff
 8016064:	3fdb6db6 	.word	0x3fdb6db6
 8016068:	33333303 	.word	0x33333303
 801606c:	3fe33333 	.word	0x3fe33333
 8016070:	e0000000 	.word	0xe0000000
 8016074:	3feec709 	.word	0x3feec709
 8016078:	dc3a03fd 	.word	0xdc3a03fd
 801607c:	3feec709 	.word	0x3feec709
 8016080:	145b01f5 	.word	0x145b01f5
 8016084:	be3e2fe0 	.word	0xbe3e2fe0
 8016088:	00000000 	.word	0x00000000
 801608c:	3ff00000 	.word	0x3ff00000
 8016090:	7ff00000 	.word	0x7ff00000
 8016094:	43400000 	.word	0x43400000
 8016098:	0003988e 	.word	0x0003988e
 801609c:	000bb679 	.word	0x000bb679
 80160a0:	080177c0 	.word	0x080177c0
 80160a4:	3ff00000 	.word	0x3ff00000
 80160a8:	40080000 	.word	0x40080000
 80160ac:	080177e0 	.word	0x080177e0
 80160b0:	080177d0 	.word	0x080177d0
 80160b4:	a3b5      	add	r3, pc, #724	; (adr r3, 801638c <__ieee754_pow+0xa3c>)
 80160b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ba:	4640      	mov	r0, r8
 80160bc:	4649      	mov	r1, r9
 80160be:	f7ea f8ed 	bl	800029c <__adddf3>
 80160c2:	4622      	mov	r2, r4
 80160c4:	ec41 0b1a 	vmov	d10, r0, r1
 80160c8:	462b      	mov	r3, r5
 80160ca:	4630      	mov	r0, r6
 80160cc:	4639      	mov	r1, r7
 80160ce:	f7ea f8e3 	bl	8000298 <__aeabi_dsub>
 80160d2:	4602      	mov	r2, r0
 80160d4:	460b      	mov	r3, r1
 80160d6:	ec51 0b1a 	vmov	r0, r1, d10
 80160da:	f7ea fd25 	bl	8000b28 <__aeabi_dcmpgt>
 80160de:	2800      	cmp	r0, #0
 80160e0:	f47f adf8 	bne.w	8015cd4 <__ieee754_pow+0x384>
 80160e4:	4aa4      	ldr	r2, [pc, #656]	; (8016378 <__ieee754_pow+0xa28>)
 80160e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80160ea:	4293      	cmp	r3, r2
 80160ec:	f340 810b 	ble.w	8016306 <__ieee754_pow+0x9b6>
 80160f0:	151b      	asrs	r3, r3, #20
 80160f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80160f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80160fa:	fa4a f303 	asr.w	r3, sl, r3
 80160fe:	445b      	add	r3, fp
 8016100:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016104:	4e9d      	ldr	r6, [pc, #628]	; (801637c <__ieee754_pow+0xa2c>)
 8016106:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801610a:	4116      	asrs	r6, r2
 801610c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016110:	2000      	movs	r0, #0
 8016112:	ea23 0106 	bic.w	r1, r3, r6
 8016116:	f1c2 0214 	rsb	r2, r2, #20
 801611a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801611e:	fa4a fa02 	asr.w	sl, sl, r2
 8016122:	f1bb 0f00 	cmp.w	fp, #0
 8016126:	4602      	mov	r2, r0
 8016128:	460b      	mov	r3, r1
 801612a:	4620      	mov	r0, r4
 801612c:	4629      	mov	r1, r5
 801612e:	bfb8      	it	lt
 8016130:	f1ca 0a00 	rsblt	sl, sl, #0
 8016134:	f7ea f8b0 	bl	8000298 <__aeabi_dsub>
 8016138:	ec41 0b19 	vmov	d9, r0, r1
 801613c:	4642      	mov	r2, r8
 801613e:	464b      	mov	r3, r9
 8016140:	ec51 0b19 	vmov	r0, r1, d9
 8016144:	f7ea f8aa 	bl	800029c <__adddf3>
 8016148:	2400      	movs	r4, #0
 801614a:	a379      	add	r3, pc, #484	; (adr r3, 8016330 <__ieee754_pow+0x9e0>)
 801614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016150:	4620      	mov	r0, r4
 8016152:	460d      	mov	r5, r1
 8016154:	f7ea fa58 	bl	8000608 <__aeabi_dmul>
 8016158:	ec53 2b19 	vmov	r2, r3, d9
 801615c:	4606      	mov	r6, r0
 801615e:	460f      	mov	r7, r1
 8016160:	4620      	mov	r0, r4
 8016162:	4629      	mov	r1, r5
 8016164:	f7ea f898 	bl	8000298 <__aeabi_dsub>
 8016168:	4602      	mov	r2, r0
 801616a:	460b      	mov	r3, r1
 801616c:	4640      	mov	r0, r8
 801616e:	4649      	mov	r1, r9
 8016170:	f7ea f892 	bl	8000298 <__aeabi_dsub>
 8016174:	a370      	add	r3, pc, #448	; (adr r3, 8016338 <__ieee754_pow+0x9e8>)
 8016176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801617a:	f7ea fa45 	bl	8000608 <__aeabi_dmul>
 801617e:	a370      	add	r3, pc, #448	; (adr r3, 8016340 <__ieee754_pow+0x9f0>)
 8016180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016184:	4680      	mov	r8, r0
 8016186:	4689      	mov	r9, r1
 8016188:	4620      	mov	r0, r4
 801618a:	4629      	mov	r1, r5
 801618c:	f7ea fa3c 	bl	8000608 <__aeabi_dmul>
 8016190:	4602      	mov	r2, r0
 8016192:	460b      	mov	r3, r1
 8016194:	4640      	mov	r0, r8
 8016196:	4649      	mov	r1, r9
 8016198:	f7ea f880 	bl	800029c <__adddf3>
 801619c:	4604      	mov	r4, r0
 801619e:	460d      	mov	r5, r1
 80161a0:	4602      	mov	r2, r0
 80161a2:	460b      	mov	r3, r1
 80161a4:	4630      	mov	r0, r6
 80161a6:	4639      	mov	r1, r7
 80161a8:	f7ea f878 	bl	800029c <__adddf3>
 80161ac:	4632      	mov	r2, r6
 80161ae:	463b      	mov	r3, r7
 80161b0:	4680      	mov	r8, r0
 80161b2:	4689      	mov	r9, r1
 80161b4:	f7ea f870 	bl	8000298 <__aeabi_dsub>
 80161b8:	4602      	mov	r2, r0
 80161ba:	460b      	mov	r3, r1
 80161bc:	4620      	mov	r0, r4
 80161be:	4629      	mov	r1, r5
 80161c0:	f7ea f86a 	bl	8000298 <__aeabi_dsub>
 80161c4:	4642      	mov	r2, r8
 80161c6:	4606      	mov	r6, r0
 80161c8:	460f      	mov	r7, r1
 80161ca:	464b      	mov	r3, r9
 80161cc:	4640      	mov	r0, r8
 80161ce:	4649      	mov	r1, r9
 80161d0:	f7ea fa1a 	bl	8000608 <__aeabi_dmul>
 80161d4:	a35c      	add	r3, pc, #368	; (adr r3, 8016348 <__ieee754_pow+0x9f8>)
 80161d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161da:	4604      	mov	r4, r0
 80161dc:	460d      	mov	r5, r1
 80161de:	f7ea fa13 	bl	8000608 <__aeabi_dmul>
 80161e2:	a35b      	add	r3, pc, #364	; (adr r3, 8016350 <__ieee754_pow+0xa00>)
 80161e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e8:	f7ea f856 	bl	8000298 <__aeabi_dsub>
 80161ec:	4622      	mov	r2, r4
 80161ee:	462b      	mov	r3, r5
 80161f0:	f7ea fa0a 	bl	8000608 <__aeabi_dmul>
 80161f4:	a358      	add	r3, pc, #352	; (adr r3, 8016358 <__ieee754_pow+0xa08>)
 80161f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fa:	f7ea f84f 	bl	800029c <__adddf3>
 80161fe:	4622      	mov	r2, r4
 8016200:	462b      	mov	r3, r5
 8016202:	f7ea fa01 	bl	8000608 <__aeabi_dmul>
 8016206:	a356      	add	r3, pc, #344	; (adr r3, 8016360 <__ieee754_pow+0xa10>)
 8016208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801620c:	f7ea f844 	bl	8000298 <__aeabi_dsub>
 8016210:	4622      	mov	r2, r4
 8016212:	462b      	mov	r3, r5
 8016214:	f7ea f9f8 	bl	8000608 <__aeabi_dmul>
 8016218:	a353      	add	r3, pc, #332	; (adr r3, 8016368 <__ieee754_pow+0xa18>)
 801621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621e:	f7ea f83d 	bl	800029c <__adddf3>
 8016222:	4622      	mov	r2, r4
 8016224:	462b      	mov	r3, r5
 8016226:	f7ea f9ef 	bl	8000608 <__aeabi_dmul>
 801622a:	4602      	mov	r2, r0
 801622c:	460b      	mov	r3, r1
 801622e:	4640      	mov	r0, r8
 8016230:	4649      	mov	r1, r9
 8016232:	f7ea f831 	bl	8000298 <__aeabi_dsub>
 8016236:	4604      	mov	r4, r0
 8016238:	460d      	mov	r5, r1
 801623a:	4602      	mov	r2, r0
 801623c:	460b      	mov	r3, r1
 801623e:	4640      	mov	r0, r8
 8016240:	4649      	mov	r1, r9
 8016242:	f7ea f9e1 	bl	8000608 <__aeabi_dmul>
 8016246:	2200      	movs	r2, #0
 8016248:	ec41 0b19 	vmov	d9, r0, r1
 801624c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016250:	4620      	mov	r0, r4
 8016252:	4629      	mov	r1, r5
 8016254:	f7ea f820 	bl	8000298 <__aeabi_dsub>
 8016258:	4602      	mov	r2, r0
 801625a:	460b      	mov	r3, r1
 801625c:	ec51 0b19 	vmov	r0, r1, d9
 8016260:	f7ea fafc 	bl	800085c <__aeabi_ddiv>
 8016264:	4632      	mov	r2, r6
 8016266:	4604      	mov	r4, r0
 8016268:	460d      	mov	r5, r1
 801626a:	463b      	mov	r3, r7
 801626c:	4640      	mov	r0, r8
 801626e:	4649      	mov	r1, r9
 8016270:	f7ea f9ca 	bl	8000608 <__aeabi_dmul>
 8016274:	4632      	mov	r2, r6
 8016276:	463b      	mov	r3, r7
 8016278:	f7ea f810 	bl	800029c <__adddf3>
 801627c:	4602      	mov	r2, r0
 801627e:	460b      	mov	r3, r1
 8016280:	4620      	mov	r0, r4
 8016282:	4629      	mov	r1, r5
 8016284:	f7ea f808 	bl	8000298 <__aeabi_dsub>
 8016288:	4642      	mov	r2, r8
 801628a:	464b      	mov	r3, r9
 801628c:	f7ea f804 	bl	8000298 <__aeabi_dsub>
 8016290:	460b      	mov	r3, r1
 8016292:	4602      	mov	r2, r0
 8016294:	493a      	ldr	r1, [pc, #232]	; (8016380 <__ieee754_pow+0xa30>)
 8016296:	2000      	movs	r0, #0
 8016298:	f7e9 fffe 	bl	8000298 <__aeabi_dsub>
 801629c:	e9cd 0100 	strd	r0, r1, [sp]
 80162a0:	9b01      	ldr	r3, [sp, #4]
 80162a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80162a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80162aa:	da2f      	bge.n	801630c <__ieee754_pow+0x9bc>
 80162ac:	4650      	mov	r0, sl
 80162ae:	ed9d 0b00 	vldr	d0, [sp]
 80162b2:	f000 fb4d 	bl	8016950 <scalbn>
 80162b6:	ec51 0b10 	vmov	r0, r1, d0
 80162ba:	ec53 2b18 	vmov	r2, r3, d8
 80162be:	f7ff bbe0 	b.w	8015a82 <__ieee754_pow+0x132>
 80162c2:	4b30      	ldr	r3, [pc, #192]	; (8016384 <__ieee754_pow+0xa34>)
 80162c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80162c8:	429e      	cmp	r6, r3
 80162ca:	f77f af0b 	ble.w	80160e4 <__ieee754_pow+0x794>
 80162ce:	4b2e      	ldr	r3, [pc, #184]	; (8016388 <__ieee754_pow+0xa38>)
 80162d0:	440b      	add	r3, r1
 80162d2:	4303      	orrs	r3, r0
 80162d4:	d00b      	beq.n	80162ee <__ieee754_pow+0x99e>
 80162d6:	a326      	add	r3, pc, #152	; (adr r3, 8016370 <__ieee754_pow+0xa20>)
 80162d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162dc:	ec51 0b18 	vmov	r0, r1, d8
 80162e0:	f7ea f992 	bl	8000608 <__aeabi_dmul>
 80162e4:	a322      	add	r3, pc, #136	; (adr r3, 8016370 <__ieee754_pow+0xa20>)
 80162e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ea:	f7ff bbca 	b.w	8015a82 <__ieee754_pow+0x132>
 80162ee:	4622      	mov	r2, r4
 80162f0:	462b      	mov	r3, r5
 80162f2:	f7e9 ffd1 	bl	8000298 <__aeabi_dsub>
 80162f6:	4642      	mov	r2, r8
 80162f8:	464b      	mov	r3, r9
 80162fa:	f7ea fc0b 	bl	8000b14 <__aeabi_dcmpge>
 80162fe:	2800      	cmp	r0, #0
 8016300:	f43f aef0 	beq.w	80160e4 <__ieee754_pow+0x794>
 8016304:	e7e7      	b.n	80162d6 <__ieee754_pow+0x986>
 8016306:	f04f 0a00 	mov.w	sl, #0
 801630a:	e717      	b.n	801613c <__ieee754_pow+0x7ec>
 801630c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016310:	4619      	mov	r1, r3
 8016312:	e7d2      	b.n	80162ba <__ieee754_pow+0x96a>
 8016314:	491a      	ldr	r1, [pc, #104]	; (8016380 <__ieee754_pow+0xa30>)
 8016316:	2000      	movs	r0, #0
 8016318:	f7ff bb9e 	b.w	8015a58 <__ieee754_pow+0x108>
 801631c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016320:	f7ff bb9a 	b.w	8015a58 <__ieee754_pow+0x108>
 8016324:	9000      	str	r0, [sp, #0]
 8016326:	f7ff bb76 	b.w	8015a16 <__ieee754_pow+0xc6>
 801632a:	2100      	movs	r1, #0
 801632c:	f7ff bb60 	b.w	80159f0 <__ieee754_pow+0xa0>
 8016330:	00000000 	.word	0x00000000
 8016334:	3fe62e43 	.word	0x3fe62e43
 8016338:	fefa39ef 	.word	0xfefa39ef
 801633c:	3fe62e42 	.word	0x3fe62e42
 8016340:	0ca86c39 	.word	0x0ca86c39
 8016344:	be205c61 	.word	0xbe205c61
 8016348:	72bea4d0 	.word	0x72bea4d0
 801634c:	3e663769 	.word	0x3e663769
 8016350:	c5d26bf1 	.word	0xc5d26bf1
 8016354:	3ebbbd41 	.word	0x3ebbbd41
 8016358:	af25de2c 	.word	0xaf25de2c
 801635c:	3f11566a 	.word	0x3f11566a
 8016360:	16bebd93 	.word	0x16bebd93
 8016364:	3f66c16c 	.word	0x3f66c16c
 8016368:	5555553e 	.word	0x5555553e
 801636c:	3fc55555 	.word	0x3fc55555
 8016370:	c2f8f359 	.word	0xc2f8f359
 8016374:	01a56e1f 	.word	0x01a56e1f
 8016378:	3fe00000 	.word	0x3fe00000
 801637c:	000fffff 	.word	0x000fffff
 8016380:	3ff00000 	.word	0x3ff00000
 8016384:	4090cbff 	.word	0x4090cbff
 8016388:	3f6f3400 	.word	0x3f6f3400
 801638c:	652b82fe 	.word	0x652b82fe
 8016390:	3c971547 	.word	0x3c971547

08016394 <__ieee754_sqrt>:
 8016394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016398:	ec55 4b10 	vmov	r4, r5, d0
 801639c:	4e56      	ldr	r6, [pc, #344]	; (80164f8 <__ieee754_sqrt+0x164>)
 801639e:	43ae      	bics	r6, r5
 80163a0:	ee10 0a10 	vmov	r0, s0
 80163a4:	ee10 3a10 	vmov	r3, s0
 80163a8:	4629      	mov	r1, r5
 80163aa:	462a      	mov	r2, r5
 80163ac:	d110      	bne.n	80163d0 <__ieee754_sqrt+0x3c>
 80163ae:	ee10 2a10 	vmov	r2, s0
 80163b2:	462b      	mov	r3, r5
 80163b4:	f7ea f928 	bl	8000608 <__aeabi_dmul>
 80163b8:	4602      	mov	r2, r0
 80163ba:	460b      	mov	r3, r1
 80163bc:	4620      	mov	r0, r4
 80163be:	4629      	mov	r1, r5
 80163c0:	f7e9 ff6c 	bl	800029c <__adddf3>
 80163c4:	4604      	mov	r4, r0
 80163c6:	460d      	mov	r5, r1
 80163c8:	ec45 4b10 	vmov	d0, r4, r5
 80163cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d0:	2d00      	cmp	r5, #0
 80163d2:	dc10      	bgt.n	80163f6 <__ieee754_sqrt+0x62>
 80163d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80163d8:	4330      	orrs	r0, r6
 80163da:	d0f5      	beq.n	80163c8 <__ieee754_sqrt+0x34>
 80163dc:	b15d      	cbz	r5, 80163f6 <__ieee754_sqrt+0x62>
 80163de:	ee10 2a10 	vmov	r2, s0
 80163e2:	462b      	mov	r3, r5
 80163e4:	ee10 0a10 	vmov	r0, s0
 80163e8:	f7e9 ff56 	bl	8000298 <__aeabi_dsub>
 80163ec:	4602      	mov	r2, r0
 80163ee:	460b      	mov	r3, r1
 80163f0:	f7ea fa34 	bl	800085c <__aeabi_ddiv>
 80163f4:	e7e6      	b.n	80163c4 <__ieee754_sqrt+0x30>
 80163f6:	1509      	asrs	r1, r1, #20
 80163f8:	d076      	beq.n	80164e8 <__ieee754_sqrt+0x154>
 80163fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80163fe:	07ce      	lsls	r6, r1, #31
 8016400:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8016404:	bf5e      	ittt	pl
 8016406:	0fda      	lsrpl	r2, r3, #31
 8016408:	005b      	lslpl	r3, r3, #1
 801640a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801640e:	0fda      	lsrs	r2, r3, #31
 8016410:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8016414:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016418:	2000      	movs	r0, #0
 801641a:	106d      	asrs	r5, r5, #1
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	f04f 0e16 	mov.w	lr, #22
 8016422:	4684      	mov	ip, r0
 8016424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016428:	eb0c 0401 	add.w	r4, ip, r1
 801642c:	4294      	cmp	r4, r2
 801642e:	bfde      	ittt	le
 8016430:	1b12      	suble	r2, r2, r4
 8016432:	eb04 0c01 	addle.w	ip, r4, r1
 8016436:	1840      	addle	r0, r0, r1
 8016438:	0052      	lsls	r2, r2, #1
 801643a:	f1be 0e01 	subs.w	lr, lr, #1
 801643e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016442:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801644a:	d1ed      	bne.n	8016428 <__ieee754_sqrt+0x94>
 801644c:	4671      	mov	r1, lr
 801644e:	2720      	movs	r7, #32
 8016450:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016454:	4562      	cmp	r2, ip
 8016456:	eb04 060e 	add.w	r6, r4, lr
 801645a:	dc02      	bgt.n	8016462 <__ieee754_sqrt+0xce>
 801645c:	d113      	bne.n	8016486 <__ieee754_sqrt+0xf2>
 801645e:	429e      	cmp	r6, r3
 8016460:	d811      	bhi.n	8016486 <__ieee754_sqrt+0xf2>
 8016462:	2e00      	cmp	r6, #0
 8016464:	eb06 0e04 	add.w	lr, r6, r4
 8016468:	da43      	bge.n	80164f2 <__ieee754_sqrt+0x15e>
 801646a:	f1be 0f00 	cmp.w	lr, #0
 801646e:	db40      	blt.n	80164f2 <__ieee754_sqrt+0x15e>
 8016470:	f10c 0801 	add.w	r8, ip, #1
 8016474:	eba2 020c 	sub.w	r2, r2, ip
 8016478:	429e      	cmp	r6, r3
 801647a:	bf88      	it	hi
 801647c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016480:	1b9b      	subs	r3, r3, r6
 8016482:	4421      	add	r1, r4
 8016484:	46c4      	mov	ip, r8
 8016486:	0052      	lsls	r2, r2, #1
 8016488:	3f01      	subs	r7, #1
 801648a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801648e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016496:	d1dd      	bne.n	8016454 <__ieee754_sqrt+0xc0>
 8016498:	4313      	orrs	r3, r2
 801649a:	d006      	beq.n	80164aa <__ieee754_sqrt+0x116>
 801649c:	1c4c      	adds	r4, r1, #1
 801649e:	bf13      	iteet	ne
 80164a0:	3101      	addne	r1, #1
 80164a2:	3001      	addeq	r0, #1
 80164a4:	4639      	moveq	r1, r7
 80164a6:	f021 0101 	bicne.w	r1, r1, #1
 80164aa:	1043      	asrs	r3, r0, #1
 80164ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80164b0:	0849      	lsrs	r1, r1, #1
 80164b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80164b6:	07c2      	lsls	r2, r0, #31
 80164b8:	bf48      	it	mi
 80164ba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80164be:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80164c2:	460c      	mov	r4, r1
 80164c4:	463d      	mov	r5, r7
 80164c6:	e77f      	b.n	80163c8 <__ieee754_sqrt+0x34>
 80164c8:	0ada      	lsrs	r2, r3, #11
 80164ca:	3815      	subs	r0, #21
 80164cc:	055b      	lsls	r3, r3, #21
 80164ce:	2a00      	cmp	r2, #0
 80164d0:	d0fa      	beq.n	80164c8 <__ieee754_sqrt+0x134>
 80164d2:	02d7      	lsls	r7, r2, #11
 80164d4:	d50a      	bpl.n	80164ec <__ieee754_sqrt+0x158>
 80164d6:	f1c1 0420 	rsb	r4, r1, #32
 80164da:	fa23 f404 	lsr.w	r4, r3, r4
 80164de:	1e4d      	subs	r5, r1, #1
 80164e0:	408b      	lsls	r3, r1
 80164e2:	4322      	orrs	r2, r4
 80164e4:	1b41      	subs	r1, r0, r5
 80164e6:	e788      	b.n	80163fa <__ieee754_sqrt+0x66>
 80164e8:	4608      	mov	r0, r1
 80164ea:	e7f0      	b.n	80164ce <__ieee754_sqrt+0x13a>
 80164ec:	0052      	lsls	r2, r2, #1
 80164ee:	3101      	adds	r1, #1
 80164f0:	e7ef      	b.n	80164d2 <__ieee754_sqrt+0x13e>
 80164f2:	46e0      	mov	r8, ip
 80164f4:	e7be      	b.n	8016474 <__ieee754_sqrt+0xe0>
 80164f6:	bf00      	nop
 80164f8:	7ff00000 	.word	0x7ff00000

080164fc <__ieee754_asinf>:
 80164fc:	b538      	push	{r3, r4, r5, lr}
 80164fe:	ee10 5a10 	vmov	r5, s0
 8016502:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016506:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801650a:	ed2d 8b04 	vpush	{d8-d9}
 801650e:	d10c      	bne.n	801652a <__ieee754_asinf+0x2e>
 8016510:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8016688 <__ieee754_asinf+0x18c>
 8016514:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801668c <__ieee754_asinf+0x190>
 8016518:	ee60 7a27 	vmul.f32	s15, s0, s15
 801651c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016520:	eeb0 0a67 	vmov.f32	s0, s15
 8016524:	ecbd 8b04 	vpop	{d8-d9}
 8016528:	bd38      	pop	{r3, r4, r5, pc}
 801652a:	dd04      	ble.n	8016536 <__ieee754_asinf+0x3a>
 801652c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016530:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016534:	e7f6      	b.n	8016524 <__ieee754_asinf+0x28>
 8016536:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801653a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801653e:	da0b      	bge.n	8016558 <__ieee754_asinf+0x5c>
 8016540:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016544:	da52      	bge.n	80165ec <__ieee754_asinf+0xf0>
 8016546:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016690 <__ieee754_asinf+0x194>
 801654a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801654e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016556:	dce5      	bgt.n	8016524 <__ieee754_asinf+0x28>
 8016558:	f000 fb54 	bl	8016c04 <fabsf>
 801655c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016560:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016564:	ee20 8a08 	vmul.f32	s16, s0, s16
 8016568:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016694 <__ieee754_asinf+0x198>
 801656c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8016698 <__ieee754_asinf+0x19c>
 8016570:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801669c <__ieee754_asinf+0x1a0>
 8016574:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016578:	eddf 7a49 	vldr	s15, [pc, #292]	; 80166a0 <__ieee754_asinf+0x1a4>
 801657c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016580:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80166a4 <__ieee754_asinf+0x1a8>
 8016584:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016588:	eddf 7a47 	vldr	s15, [pc, #284]	; 80166a8 <__ieee754_asinf+0x1ac>
 801658c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016590:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80166ac <__ieee754_asinf+0x1b0>
 8016594:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016598:	eddf 7a45 	vldr	s15, [pc, #276]	; 80166b0 <__ieee754_asinf+0x1b4>
 801659c:	eee8 7a07 	vfma.f32	s15, s16, s14
 80165a0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80166b4 <__ieee754_asinf+0x1b8>
 80165a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80165a8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80166b8 <__ieee754_asinf+0x1bc>
 80165ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80165b0:	eeb0 0a48 	vmov.f32	s0, s16
 80165b4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80165b8:	f000 f926 	bl	8016808 <__ieee754_sqrtf>
 80165bc:	4b3f      	ldr	r3, [pc, #252]	; (80166bc <__ieee754_asinf+0x1c0>)
 80165be:	ee29 9a08 	vmul.f32	s18, s18, s16
 80165c2:	429c      	cmp	r4, r3
 80165c4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80165c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80165cc:	dd3d      	ble.n	801664a <__ieee754_asinf+0x14e>
 80165ce:	eea0 0a06 	vfma.f32	s0, s0, s12
 80165d2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80166c0 <__ieee754_asinf+0x1c4>
 80165d6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80165da:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801668c <__ieee754_asinf+0x190>
 80165de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165e2:	2d00      	cmp	r5, #0
 80165e4:	bfd8      	it	le
 80165e6:	eeb1 0a40 	vnegle.f32	s0, s0
 80165ea:	e79b      	b.n	8016524 <__ieee754_asinf+0x28>
 80165ec:	ee60 7a00 	vmul.f32	s15, s0, s0
 80165f0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016694 <__ieee754_asinf+0x198>
 80165f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8016698 <__ieee754_asinf+0x19c>
 80165f8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80166ac <__ieee754_asinf+0x1b0>
 80165fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016600:	eddf 6a27 	vldr	s13, [pc, #156]	; 80166a0 <__ieee754_asinf+0x1a4>
 8016604:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016608:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80166a4 <__ieee754_asinf+0x1a8>
 801660c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016610:	eddf 6a25 	vldr	s13, [pc, #148]	; 80166a8 <__ieee754_asinf+0x1ac>
 8016614:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016618:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801669c <__ieee754_asinf+0x1a0>
 801661c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016620:	eddf 6a23 	vldr	s13, [pc, #140]	; 80166b0 <__ieee754_asinf+0x1b4>
 8016624:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016628:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80166b4 <__ieee754_asinf+0x1b8>
 801662c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016630:	eddf 6a21 	vldr	s13, [pc, #132]	; 80166b8 <__ieee754_asinf+0x1bc>
 8016634:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016638:	ee27 7a27 	vmul.f32	s14, s14, s15
 801663c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016640:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016644:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016648:	e76c      	b.n	8016524 <__ieee754_asinf+0x28>
 801664a:	ee10 3a10 	vmov	r3, s0
 801664e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016652:	f023 030f 	bic.w	r3, r3, #15
 8016656:	ee07 3a10 	vmov	s14, r3
 801665a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801665e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016662:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016666:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801666a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016688 <__ieee754_asinf+0x18c>
 801666e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016672:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8016676:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80166c4 <__ieee754_asinf+0x1c8>
 801667a:	eeb0 6a40 	vmov.f32	s12, s0
 801667e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016682:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016686:	e7aa      	b.n	80165de <__ieee754_asinf+0xe2>
 8016688:	b33bbd2e 	.word	0xb33bbd2e
 801668c:	3fc90fdb 	.word	0x3fc90fdb
 8016690:	7149f2ca 	.word	0x7149f2ca
 8016694:	3811ef08 	.word	0x3811ef08
 8016698:	3a4f7f04 	.word	0x3a4f7f04
 801669c:	3e2aaaab 	.word	0x3e2aaaab
 80166a0:	bd241146 	.word	0xbd241146
 80166a4:	3e4e0aa8 	.word	0x3e4e0aa8
 80166a8:	bea6b090 	.word	0xbea6b090
 80166ac:	3d9dc62e 	.word	0x3d9dc62e
 80166b0:	bf303361 	.word	0xbf303361
 80166b4:	4001572d 	.word	0x4001572d
 80166b8:	c019d139 	.word	0xc019d139
 80166bc:	3f799999 	.word	0x3f799999
 80166c0:	333bbd2e 	.word	0x333bbd2e
 80166c4:	3f490fdb 	.word	0x3f490fdb

080166c8 <__ieee754_atan2f>:
 80166c8:	ee10 2a90 	vmov	r2, s1
 80166cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80166d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80166d4:	b510      	push	{r4, lr}
 80166d6:	eef0 7a40 	vmov.f32	s15, s0
 80166da:	dc06      	bgt.n	80166ea <__ieee754_atan2f+0x22>
 80166dc:	ee10 0a10 	vmov	r0, s0
 80166e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80166e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166e8:	dd04      	ble.n	80166f4 <__ieee754_atan2f+0x2c>
 80166ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80166ee:	eeb0 0a67 	vmov.f32	s0, s15
 80166f2:	bd10      	pop	{r4, pc}
 80166f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80166f8:	d103      	bne.n	8016702 <__ieee754_atan2f+0x3a>
 80166fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166fe:	f000 b9ad 	b.w	8016a5c <atanf>
 8016702:	1794      	asrs	r4, r2, #30
 8016704:	f004 0402 	and.w	r4, r4, #2
 8016708:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801670c:	b943      	cbnz	r3, 8016720 <__ieee754_atan2f+0x58>
 801670e:	2c02      	cmp	r4, #2
 8016710:	d05e      	beq.n	80167d0 <__ieee754_atan2f+0x108>
 8016712:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80167e4 <__ieee754_atan2f+0x11c>
 8016716:	2c03      	cmp	r4, #3
 8016718:	bf08      	it	eq
 801671a:	eef0 7a47 	vmoveq.f32	s15, s14
 801671e:	e7e6      	b.n	80166ee <__ieee754_atan2f+0x26>
 8016720:	b941      	cbnz	r1, 8016734 <__ieee754_atan2f+0x6c>
 8016722:	eddf 7a31 	vldr	s15, [pc, #196]	; 80167e8 <__ieee754_atan2f+0x120>
 8016726:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80167ec <__ieee754_atan2f+0x124>
 801672a:	2800      	cmp	r0, #0
 801672c:	bfb8      	it	lt
 801672e:	eef0 7a40 	vmovlt.f32	s15, s0
 8016732:	e7dc      	b.n	80166ee <__ieee754_atan2f+0x26>
 8016734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016738:	d110      	bne.n	801675c <__ieee754_atan2f+0x94>
 801673a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801673e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016742:	d107      	bne.n	8016754 <__ieee754_atan2f+0x8c>
 8016744:	2c02      	cmp	r4, #2
 8016746:	d846      	bhi.n	80167d6 <__ieee754_atan2f+0x10e>
 8016748:	4b29      	ldr	r3, [pc, #164]	; (80167f0 <__ieee754_atan2f+0x128>)
 801674a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801674e:	edd4 7a00 	vldr	s15, [r4]
 8016752:	e7cc      	b.n	80166ee <__ieee754_atan2f+0x26>
 8016754:	2c02      	cmp	r4, #2
 8016756:	d841      	bhi.n	80167dc <__ieee754_atan2f+0x114>
 8016758:	4b26      	ldr	r3, [pc, #152]	; (80167f4 <__ieee754_atan2f+0x12c>)
 801675a:	e7f6      	b.n	801674a <__ieee754_atan2f+0x82>
 801675c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016760:	d0df      	beq.n	8016722 <__ieee754_atan2f+0x5a>
 8016762:	1a5b      	subs	r3, r3, r1
 8016764:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016768:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801676c:	da1a      	bge.n	80167a4 <__ieee754_atan2f+0xdc>
 801676e:	2a00      	cmp	r2, #0
 8016770:	da01      	bge.n	8016776 <__ieee754_atan2f+0xae>
 8016772:	313c      	adds	r1, #60	; 0x3c
 8016774:	db19      	blt.n	80167aa <__ieee754_atan2f+0xe2>
 8016776:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801677a:	f000 fa43 	bl	8016c04 <fabsf>
 801677e:	f000 f96d 	bl	8016a5c <atanf>
 8016782:	eef0 7a40 	vmov.f32	s15, s0
 8016786:	2c01      	cmp	r4, #1
 8016788:	d012      	beq.n	80167b0 <__ieee754_atan2f+0xe8>
 801678a:	2c02      	cmp	r4, #2
 801678c:	d017      	beq.n	80167be <__ieee754_atan2f+0xf6>
 801678e:	2c00      	cmp	r4, #0
 8016790:	d0ad      	beq.n	80166ee <__ieee754_atan2f+0x26>
 8016792:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80167f8 <__ieee754_atan2f+0x130>
 8016796:	ee77 7a80 	vadd.f32	s15, s15, s0
 801679a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80167fc <__ieee754_atan2f+0x134>
 801679e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167a2:	e7a4      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167a4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80167e8 <__ieee754_atan2f+0x120>
 80167a8:	e7ed      	b.n	8016786 <__ieee754_atan2f+0xbe>
 80167aa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016800 <__ieee754_atan2f+0x138>
 80167ae:	e7ea      	b.n	8016786 <__ieee754_atan2f+0xbe>
 80167b0:	ee17 3a90 	vmov	r3, s15
 80167b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80167b8:	ee07 3a90 	vmov	s15, r3
 80167bc:	e797      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167be:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80167f8 <__ieee754_atan2f+0x130>
 80167c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80167c6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80167fc <__ieee754_atan2f+0x134>
 80167ca:	ee70 7a67 	vsub.f32	s15, s0, s15
 80167ce:	e78e      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167d0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80167fc <__ieee754_atan2f+0x134>
 80167d4:	e78b      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167d6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016804 <__ieee754_atan2f+0x13c>
 80167da:	e788      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016800 <__ieee754_atan2f+0x138>
 80167e0:	e785      	b.n	80166ee <__ieee754_atan2f+0x26>
 80167e2:	bf00      	nop
 80167e4:	c0490fdb 	.word	0xc0490fdb
 80167e8:	3fc90fdb 	.word	0x3fc90fdb
 80167ec:	bfc90fdb 	.word	0xbfc90fdb
 80167f0:	080177f0 	.word	0x080177f0
 80167f4:	080177fc 	.word	0x080177fc
 80167f8:	33bbbd2e 	.word	0x33bbbd2e
 80167fc:	40490fdb 	.word	0x40490fdb
 8016800:	00000000 	.word	0x00000000
 8016804:	3f490fdb 	.word	0x3f490fdb

08016808 <__ieee754_sqrtf>:
 8016808:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801680c:	4770      	bx	lr

0801680e <fabs>:
 801680e:	ec51 0b10 	vmov	r0, r1, d0
 8016812:	ee10 2a10 	vmov	r2, s0
 8016816:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801681a:	ec43 2b10 	vmov	d0, r2, r3
 801681e:	4770      	bx	lr

08016820 <finite>:
 8016820:	b082      	sub	sp, #8
 8016822:	ed8d 0b00 	vstr	d0, [sp]
 8016826:	9801      	ldr	r0, [sp, #4]
 8016828:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801682c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016830:	0fc0      	lsrs	r0, r0, #31
 8016832:	b002      	add	sp, #8
 8016834:	4770      	bx	lr
	...

08016838 <rint>:
 8016838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801683a:	ec51 0b10 	vmov	r0, r1, d0
 801683e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016842:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016846:	2e13      	cmp	r6, #19
 8016848:	ee10 4a10 	vmov	r4, s0
 801684c:	460b      	mov	r3, r1
 801684e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016852:	dc58      	bgt.n	8016906 <rint+0xce>
 8016854:	2e00      	cmp	r6, #0
 8016856:	da2b      	bge.n	80168b0 <rint+0x78>
 8016858:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801685c:	4302      	orrs	r2, r0
 801685e:	d023      	beq.n	80168a8 <rint+0x70>
 8016860:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016864:	4302      	orrs	r2, r0
 8016866:	4254      	negs	r4, r2
 8016868:	4314      	orrs	r4, r2
 801686a:	0c4b      	lsrs	r3, r1, #17
 801686c:	0b24      	lsrs	r4, r4, #12
 801686e:	045b      	lsls	r3, r3, #17
 8016870:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016874:	ea44 0103 	orr.w	r1, r4, r3
 8016878:	4b32      	ldr	r3, [pc, #200]	; (8016944 <rint+0x10c>)
 801687a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801687e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016882:	4602      	mov	r2, r0
 8016884:	460b      	mov	r3, r1
 8016886:	4630      	mov	r0, r6
 8016888:	4639      	mov	r1, r7
 801688a:	f7e9 fd07 	bl	800029c <__adddf3>
 801688e:	e9cd 0100 	strd	r0, r1, [sp]
 8016892:	463b      	mov	r3, r7
 8016894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016898:	4632      	mov	r2, r6
 801689a:	f7e9 fcfd 	bl	8000298 <__aeabi_dsub>
 801689e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80168a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80168a6:	4639      	mov	r1, r7
 80168a8:	ec41 0b10 	vmov	d0, r0, r1
 80168ac:	b003      	add	sp, #12
 80168ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168b0:	4a25      	ldr	r2, [pc, #148]	; (8016948 <rint+0x110>)
 80168b2:	4132      	asrs	r2, r6
 80168b4:	ea01 0702 	and.w	r7, r1, r2
 80168b8:	4307      	orrs	r7, r0
 80168ba:	d0f5      	beq.n	80168a8 <rint+0x70>
 80168bc:	0851      	lsrs	r1, r2, #1
 80168be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80168c2:	4314      	orrs	r4, r2
 80168c4:	d00c      	beq.n	80168e0 <rint+0xa8>
 80168c6:	ea23 0201 	bic.w	r2, r3, r1
 80168ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80168ce:	2e13      	cmp	r6, #19
 80168d0:	fa43 f606 	asr.w	r6, r3, r6
 80168d4:	bf0c      	ite	eq
 80168d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80168da:	2400      	movne	r4, #0
 80168dc:	ea42 0306 	orr.w	r3, r2, r6
 80168e0:	4918      	ldr	r1, [pc, #96]	; (8016944 <rint+0x10c>)
 80168e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80168e6:	4622      	mov	r2, r4
 80168e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80168ec:	4620      	mov	r0, r4
 80168ee:	4629      	mov	r1, r5
 80168f0:	f7e9 fcd4 	bl	800029c <__adddf3>
 80168f4:	e9cd 0100 	strd	r0, r1, [sp]
 80168f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168fc:	4622      	mov	r2, r4
 80168fe:	462b      	mov	r3, r5
 8016900:	f7e9 fcca 	bl	8000298 <__aeabi_dsub>
 8016904:	e7d0      	b.n	80168a8 <rint+0x70>
 8016906:	2e33      	cmp	r6, #51	; 0x33
 8016908:	dd07      	ble.n	801691a <rint+0xe2>
 801690a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801690e:	d1cb      	bne.n	80168a8 <rint+0x70>
 8016910:	ee10 2a10 	vmov	r2, s0
 8016914:	f7e9 fcc2 	bl	800029c <__adddf3>
 8016918:	e7c6      	b.n	80168a8 <rint+0x70>
 801691a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801691e:	f04f 36ff 	mov.w	r6, #4294967295
 8016922:	40d6      	lsrs	r6, r2
 8016924:	4230      	tst	r0, r6
 8016926:	d0bf      	beq.n	80168a8 <rint+0x70>
 8016928:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801692c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8016930:	bf1f      	itttt	ne
 8016932:	ea24 0101 	bicne.w	r1, r4, r1
 8016936:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801693a:	fa44 f202 	asrne.w	r2, r4, r2
 801693e:	ea41 0402 	orrne.w	r4, r1, r2
 8016942:	e7cd      	b.n	80168e0 <rint+0xa8>
 8016944:	08017808 	.word	0x08017808
 8016948:	000fffff 	.word	0x000fffff
 801694c:	00000000 	.word	0x00000000

08016950 <scalbn>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	ec55 4b10 	vmov	r4, r5, d0
 8016956:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801695a:	4606      	mov	r6, r0
 801695c:	462b      	mov	r3, r5
 801695e:	b99a      	cbnz	r2, 8016988 <scalbn+0x38>
 8016960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016964:	4323      	orrs	r3, r4
 8016966:	d036      	beq.n	80169d6 <scalbn+0x86>
 8016968:	4b39      	ldr	r3, [pc, #228]	; (8016a50 <scalbn+0x100>)
 801696a:	4629      	mov	r1, r5
 801696c:	ee10 0a10 	vmov	r0, s0
 8016970:	2200      	movs	r2, #0
 8016972:	f7e9 fe49 	bl	8000608 <__aeabi_dmul>
 8016976:	4b37      	ldr	r3, [pc, #220]	; (8016a54 <scalbn+0x104>)
 8016978:	429e      	cmp	r6, r3
 801697a:	4604      	mov	r4, r0
 801697c:	460d      	mov	r5, r1
 801697e:	da10      	bge.n	80169a2 <scalbn+0x52>
 8016980:	a32b      	add	r3, pc, #172	; (adr r3, 8016a30 <scalbn+0xe0>)
 8016982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016986:	e03a      	b.n	80169fe <scalbn+0xae>
 8016988:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801698c:	428a      	cmp	r2, r1
 801698e:	d10c      	bne.n	80169aa <scalbn+0x5a>
 8016990:	ee10 2a10 	vmov	r2, s0
 8016994:	4620      	mov	r0, r4
 8016996:	4629      	mov	r1, r5
 8016998:	f7e9 fc80 	bl	800029c <__adddf3>
 801699c:	4604      	mov	r4, r0
 801699e:	460d      	mov	r5, r1
 80169a0:	e019      	b.n	80169d6 <scalbn+0x86>
 80169a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80169a6:	460b      	mov	r3, r1
 80169a8:	3a36      	subs	r2, #54	; 0x36
 80169aa:	4432      	add	r2, r6
 80169ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80169b0:	428a      	cmp	r2, r1
 80169b2:	dd08      	ble.n	80169c6 <scalbn+0x76>
 80169b4:	2d00      	cmp	r5, #0
 80169b6:	a120      	add	r1, pc, #128	; (adr r1, 8016a38 <scalbn+0xe8>)
 80169b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169bc:	da1c      	bge.n	80169f8 <scalbn+0xa8>
 80169be:	a120      	add	r1, pc, #128	; (adr r1, 8016a40 <scalbn+0xf0>)
 80169c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169c4:	e018      	b.n	80169f8 <scalbn+0xa8>
 80169c6:	2a00      	cmp	r2, #0
 80169c8:	dd08      	ble.n	80169dc <scalbn+0x8c>
 80169ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80169ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80169d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169d6:	ec45 4b10 	vmov	d0, r4, r5
 80169da:	bd70      	pop	{r4, r5, r6, pc}
 80169dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80169e0:	da19      	bge.n	8016a16 <scalbn+0xc6>
 80169e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80169e6:	429e      	cmp	r6, r3
 80169e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80169ec:	dd0a      	ble.n	8016a04 <scalbn+0xb4>
 80169ee:	a112      	add	r1, pc, #72	; (adr r1, 8016a38 <scalbn+0xe8>)
 80169f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d1e2      	bne.n	80169be <scalbn+0x6e>
 80169f8:	a30f      	add	r3, pc, #60	; (adr r3, 8016a38 <scalbn+0xe8>)
 80169fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fe:	f7e9 fe03 	bl	8000608 <__aeabi_dmul>
 8016a02:	e7cb      	b.n	801699c <scalbn+0x4c>
 8016a04:	a10a      	add	r1, pc, #40	; (adr r1, 8016a30 <scalbn+0xe0>)
 8016a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d0b8      	beq.n	8016980 <scalbn+0x30>
 8016a0e:	a10e      	add	r1, pc, #56	; (adr r1, 8016a48 <scalbn+0xf8>)
 8016a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a14:	e7b4      	b.n	8016980 <scalbn+0x30>
 8016a16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016a1a:	3236      	adds	r2, #54	; 0x36
 8016a1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016a20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016a24:	4620      	mov	r0, r4
 8016a26:	4b0c      	ldr	r3, [pc, #48]	; (8016a58 <scalbn+0x108>)
 8016a28:	2200      	movs	r2, #0
 8016a2a:	e7e8      	b.n	80169fe <scalbn+0xae>
 8016a2c:	f3af 8000 	nop.w
 8016a30:	c2f8f359 	.word	0xc2f8f359
 8016a34:	01a56e1f 	.word	0x01a56e1f
 8016a38:	8800759c 	.word	0x8800759c
 8016a3c:	7e37e43c 	.word	0x7e37e43c
 8016a40:	8800759c 	.word	0x8800759c
 8016a44:	fe37e43c 	.word	0xfe37e43c
 8016a48:	c2f8f359 	.word	0xc2f8f359
 8016a4c:	81a56e1f 	.word	0x81a56e1f
 8016a50:	43500000 	.word	0x43500000
 8016a54:	ffff3cb0 	.word	0xffff3cb0
 8016a58:	3c900000 	.word	0x3c900000

08016a5c <atanf>:
 8016a5c:	b538      	push	{r3, r4, r5, lr}
 8016a5e:	ee10 5a10 	vmov	r5, s0
 8016a62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016a66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016a6a:	eef0 7a40 	vmov.f32	s15, s0
 8016a6e:	db10      	blt.n	8016a92 <atanf+0x36>
 8016a70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016a74:	dd04      	ble.n	8016a80 <atanf+0x24>
 8016a76:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8016a7e:	bd38      	pop	{r3, r4, r5, pc}
 8016a80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016bb8 <atanf+0x15c>
 8016a84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8016bbc <atanf+0x160>
 8016a88:	2d00      	cmp	r5, #0
 8016a8a:	bfd8      	it	le
 8016a8c:	eef0 7a40 	vmovle.f32	s15, s0
 8016a90:	e7f3      	b.n	8016a7a <atanf+0x1e>
 8016a92:	4b4b      	ldr	r3, [pc, #300]	; (8016bc0 <atanf+0x164>)
 8016a94:	429c      	cmp	r4, r3
 8016a96:	dc10      	bgt.n	8016aba <atanf+0x5e>
 8016a98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016a9c:	da0a      	bge.n	8016ab4 <atanf+0x58>
 8016a9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016bc4 <atanf+0x168>
 8016aa2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016aaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab2:	dce2      	bgt.n	8016a7a <atanf+0x1e>
 8016ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab8:	e013      	b.n	8016ae2 <atanf+0x86>
 8016aba:	f000 f8a3 	bl	8016c04 <fabsf>
 8016abe:	4b42      	ldr	r3, [pc, #264]	; (8016bc8 <atanf+0x16c>)
 8016ac0:	429c      	cmp	r4, r3
 8016ac2:	dc4f      	bgt.n	8016b64 <atanf+0x108>
 8016ac4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016ac8:	429c      	cmp	r4, r3
 8016aca:	dc41      	bgt.n	8016b50 <atanf+0xf4>
 8016acc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016ad0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016ad4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016ad8:	2300      	movs	r3, #0
 8016ada:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016ade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016ae2:	1c5a      	adds	r2, r3, #1
 8016ae4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016ae8:	eddf 5a38 	vldr	s11, [pc, #224]	; 8016bcc <atanf+0x170>
 8016aec:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8016bd0 <atanf+0x174>
 8016af0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8016bd4 <atanf+0x178>
 8016af4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8016bd8 <atanf+0x17c>
 8016af8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016afc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b00:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016bdc <atanf+0x180>
 8016b04:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b08:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016be0 <atanf+0x184>
 8016b0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b10:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016be4 <atanf+0x188>
 8016b14:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b18:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8016be8 <atanf+0x18c>
 8016b1c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b20:	eddf 5a32 	vldr	s11, [pc, #200]	; 8016bec <atanf+0x190>
 8016b24:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016b28:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8016bf0 <atanf+0x194>
 8016b2c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016b30:	eddf 5a30 	vldr	s11, [pc, #192]	; 8016bf4 <atanf+0x198>
 8016b34:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016b38:	eea5 0a87 	vfma.f32	s0, s11, s14
 8016b3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016b40:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016b44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016b48:	d121      	bne.n	8016b8e <atanf+0x132>
 8016b4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016b4e:	e794      	b.n	8016a7a <atanf+0x1e>
 8016b50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b54:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016b58:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b62:	e7be      	b.n	8016ae2 <atanf+0x86>
 8016b64:	4b24      	ldr	r3, [pc, #144]	; (8016bf8 <atanf+0x19c>)
 8016b66:	429c      	cmp	r4, r3
 8016b68:	dc0b      	bgt.n	8016b82 <atanf+0x126>
 8016b6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b72:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016b76:	2302      	movs	r3, #2
 8016b78:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016b80:	e7af      	b.n	8016ae2 <atanf+0x86>
 8016b82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b8a:	2303      	movs	r3, #3
 8016b8c:	e7a9      	b.n	8016ae2 <atanf+0x86>
 8016b8e:	4a1b      	ldr	r2, [pc, #108]	; (8016bfc <atanf+0x1a0>)
 8016b90:	491b      	ldr	r1, [pc, #108]	; (8016c00 <atanf+0x1a4>)
 8016b92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016b96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016b9a:	ed93 7a00 	vldr	s14, [r3]
 8016b9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016ba2:	2d00      	cmp	r5, #0
 8016ba4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016ba8:	ed92 0a00 	vldr	s0, [r2]
 8016bac:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016bb0:	bfb8      	it	lt
 8016bb2:	eef1 7a67 	vneglt.f32	s15, s15
 8016bb6:	e760      	b.n	8016a7a <atanf+0x1e>
 8016bb8:	3fc90fdb 	.word	0x3fc90fdb
 8016bbc:	bfc90fdb 	.word	0xbfc90fdb
 8016bc0:	3edfffff 	.word	0x3edfffff
 8016bc4:	7149f2ca 	.word	0x7149f2ca
 8016bc8:	3f97ffff 	.word	0x3f97ffff
 8016bcc:	3c8569d7 	.word	0x3c8569d7
 8016bd0:	3d4bda59 	.word	0x3d4bda59
 8016bd4:	bd15a221 	.word	0xbd15a221
 8016bd8:	be4ccccd 	.word	0xbe4ccccd
 8016bdc:	3d886b35 	.word	0x3d886b35
 8016be0:	3dba2e6e 	.word	0x3dba2e6e
 8016be4:	3e124925 	.word	0x3e124925
 8016be8:	3eaaaaab 	.word	0x3eaaaaab
 8016bec:	bd6ef16b 	.word	0xbd6ef16b
 8016bf0:	bd9d8795 	.word	0xbd9d8795
 8016bf4:	bde38e38 	.word	0xbde38e38
 8016bf8:	401bffff 	.word	0x401bffff
 8016bfc:	08017818 	.word	0x08017818
 8016c00:	08017828 	.word	0x08017828

08016c04 <fabsf>:
 8016c04:	ee10 3a10 	vmov	r3, s0
 8016c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c0c:	ee00 3a10 	vmov	s0, r3
 8016c10:	4770      	bx	lr
	...

08016c14 <_init>:
 8016c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c16:	bf00      	nop
 8016c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c1a:	bc08      	pop	{r3}
 8016c1c:	469e      	mov	lr, r3
 8016c1e:	4770      	bx	lr

08016c20 <_fini>:
 8016c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c22:	bf00      	nop
 8016c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c26:	bc08      	pop	{r3}
 8016c28:	469e      	mov	lr, r3
 8016c2a:	4770      	bx	lr
